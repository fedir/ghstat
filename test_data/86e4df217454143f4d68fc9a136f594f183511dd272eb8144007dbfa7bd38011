HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 14 Nov 2020 18:01:22 GMT
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
Vary: Accept, Authorization, Cookie, X-GitHub-OTP
Vary: Accept-Encoding, Accept, X-Requested-With
Vary: Accept-Encoding
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CE25:E4B7:3A20210:4302B57:5FB01B72
X-Oauth-Scopes: repo
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 27
X-Ratelimit-Reset: 1605376942
X-Ratelimit-Used: 3
X-Xss-Protection: 1; mode=block

56e3
{"total_count":5,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/MarkusAmshove/Kluent/issues/37","repository_url":"https://api.github.com/repos/MarkusAmshove/Kluent","labels_url":"https://api.github.com/repos/MarkusAmshove/Kluent/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/MarkusAmshove/Kluent/issues/37/comments","events_url":"https://api.github.com/repos/MarkusAmshove/Kluent/issues/37/events","html_url":"https://github.com/MarkusAmshove/Kluent/issues/37","id":218936210,"node_id":"MDU6SXNzdWUyMTg5MzYyMTA=","number":37,"title":"Maven pom refers to \"plus sign\" versions of dependencies","user":{"login":"binkley","id":186421,"node_id":"MDQ6VXNlcjE4NjQyMQ==","avatar_url":"https://avatars2.githubusercontent.com/u/186421?v=4","gravatar_id":"","url":"https://api.github.com/users/binkley","html_url":"https://github.com/binkley","followers_url":"https://api.github.com/users/binkley/followers","following_url":"https://api.github.com/users/binkley/following{/other_user}","gists_url":"https://api.github.com/users/binkley/gists{/gist_id}","starred_url":"https://api.github.com/users/binkley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/binkley/subscriptions","organizations_url":"https://api.github.com/users/binkley/orgs","repos_url":"https://api.github.com/users/binkley/repos","events_url":"https://api.github.com/users/binkley/events{/privacy}","received_events_url":"https://api.github.com/users/binkley/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2017-04-03T13:38:39Z","updated_at":"2017-04-12T11:22:59Z","closed_at":"2017-04-05T15:57:06Z","author_association":"NONE","active_lock_reason":null,"body":"I'm using maven 3.3.9, and am unable to resolve these dependencies from the Kluent 1.1.7 pom:\r\n* org.jetbrains.kotlin:kotlin-stdlib:jar:1.1.+\r\n* org.jetbrains.kotlin:kotlin-reflect:jar:1.1.+\r\n* com.nhaarman:mockito-kotlin:jar:1.3.+\r\n\r\nThat I'm aware of, the \"plus sign\" is not valid for resolving.  The documentation on this is a bit scattered, but I believe this works: http://maven.apache.org/enforcer/enforcer-rules/versionRanges.html.\r\n\r\nPerhaps `[1.1,1.2)` would work (meaning at least 1.1, but not yet 1.2)?\r\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/jdbi/jdbi/issues/296","repository_url":"https://api.github.com/repos/jdbi/jdbi","labels_url":"https://api.github.com/repos/jdbi/jdbi/issues/296/labels{/name}","comments_url":"https://api.github.com/repos/jdbi/jdbi/issues/296/comments","events_url":"https://api.github.com/repos/jdbi/jdbi/issues/296/events","html_url":"https://github.com/jdbi/jdbi/issues/296","id":139122009,"node_id":"MDU6SXNzdWUxMzkxMjIwMDk=","number":296,"title":"Extension point for building handlers in SqlObject (without annotations)","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"labels":[{"id":276671285,"node_id":"MDU6TGFiZWwyNzY2NzEyODU=","url":"https://api.github.com/repos/jdbi/jdbi/labels/feature","name":"feature","color":"009800","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/jdbi/jdbi/milestones/4","html_url":"https://github.com/jdbi/jdbi/milestone/4","labels_url":"https://api.github.com/repos/jdbi/jdbi/milestones/4/labels","id":2159573,"node_id":"MDk6TWlsZXN0b25lMjE1OTU3Mw==","number":4,"title":"JDBI 3.x","description":"","creator":{"login":"qualidafial","id":38629,"node_id":"MDQ6VXNlcjM4NjI5","avatar_url":"https://avatars2.githubusercontent.com/u/38629?v=4","gravatar_id":"","url":"https://api.github.com/users/qualidafial","html_url":"https://github.com/qualidafial","followers_url":"https://api.github.com/users/qualidafial/followers","following_url":"https://api.github.com/users/qualidafial/following{/other_user}","gists_url":"https://api.github.com/users/qualidafial/gists{/gist_id}","starred_url":"https://api.github.com/users/qualidafial/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qualidafial/subscriptions","organizations_url":"https://api.github.com/users/qualidafial/orgs","repos_url":"https://api.github.com/users/qualidafial/repos","events_url":"https://api.github.com/users/qualidafial/events{/privacy}","received_events_url":"https://api.github.com/users/qualidafial/received_events","type":"User","site_admin":false},"open_issues":19,"closed_issues":64,"state":"closed","created_at":"2016-11-27T21:07:31Z","updated_at":"2019-11-29T00:29:16Z","due_on":null,"closed_at":"2019-09-01T17:55:53Z"},"comments":4,"created_at":"2016-03-07T23:09:14Z","updated_at":"2017-03-29T06:38:13Z","closed_at":"2017-03-29T06:38:00Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Related to Kotlin support, we want to make a transparent system in Kovert like we do for REST endpoints.\n\nBasically in Kovert (https://github.com/kohesive/kovert) we generate REST endpoints based on naming and type information.  So I hacked JDBI to allow me to do the same.  Below is an interface with ideas similar to what was implemented in hacking `SqlObject.buildHandlersFor`.  For each method, the commented out annotation is what is inferred from the naming as-if it existed (minus anything added dynamically for paging).  We use the method name, the parameters and the return type to know what SQL should be inferred.  \n\nGiven this model, we find that in some of our apps we have 80% of our queries covered without needing annotations.  Only joins (we are adding simple 1-to-1 joins already) and complex SQL requires them.  \n\nHere are the examples:\n\n```\n    /// @UseTable(\"something\") // *Service, *Repository, *Table\n    // default table name inferred, or could be set by annotation\n    private interface SomethingService {\n        // @SqlUpdate(\"insert into something (id, name) values (:something.id, :something.name)\")\n        // infer action from prefix, table from `into` clause\n        // infer the columns and bindings from the parameter of the method\n        fun insertIntoSomething(something: Thing)\n\n        // @SqlUpdate(\"insert into something (id, name) values (:id, :name)\")\n        // infer the columns and bindings from the method parameters\n        fun insertIntoSomething(id: Int, name: String)\n\n        // @SqlQuery(\"select id, name, nullable, nullableDefaultedNull, nullableDefaultedNotNull, defaulted from something\")\n        // infer action from prefix, table from `select` clause.  Could be `selectFrom` or `list` as other verbs\n        // infer fields from the return type\n        fun selectSomething(): List<Thing>\n\n        // @SqlQuery(\"select id, name from something\")\n        // same as above, but different return type with fewer fields allows partial projection\n        fun selectSomething(): List<ThingPartial>\n\n        // @SqlQuery(\"select id, name from something where name = :name\")\n        // return a Cursor which is a closeable sequence, can internally use paging based on connection defaults \n        fun selectSomething(name: String): Cursor<Thing>  // cursor is closable sequence\n\n        // @SqlQuery(\"select id, name from something where name = :name\")\n        // return a sequence which can be paged as separate queries, not as a cursor\n        fun selectSomething(name: String): Sequence<Thing>\n\n        // @SqlQuery(\"select id, name from something\")\n        // someway to know specific requested page and page size, one idea\n        fun selectSomething(paging: PageInstuctions): Cursor<Thing> // or Sequence<Thing>\n\n        // @SqlQuery(\"select id, name from something\")\n        // someway to know specific requested page and page size, one idea\n        fun selectSomethingWithPaging(page: Int, pageSize: Int): PagedResult<Thing>\n\n        // @SqlQuery(\"select id, name from something\")\n        // a Cursor that also contains paging information (current page, page size, ...)\n        fun selectSomething(): PagedCursor<Thing> // PagedSequence<Thing> ... and here you do paging on the response\n\n        // other ideas for PagedResult\n        // pagedResult.batch(10).forEach { batch ->  ... }\n        // pagedResult.batch(10).forEachWithPageInfo { pageInfo, batch ->  ... } // pageInfo = current + total page + total\n        // or page using default paging on the connection/control object, defaults to 100 per page\n        //\n        //\n\n\n        @SqlQuery(\"select id, name, null as nullable, null as nullableDefaultedNull, null as nullableDefaultedNotNull, 'test' as defaulted from something\")\n        // you can still use annotations!\n        fun listWithNulls(): List<Thing>\n\n        // @SqlQuery(\"select id, name from something where id=:id\")\n        // find is an alias for select, and we know it returns one row since the return type is singular\n        fun findSomethingById(id: Int): Thing\n    }\n```\n\nAnd you can use any state object that has partial or all fields, and given what is in the state object the query can be changed.  Two state objects used above.\n\n```\n   data class Thing(val id: Int, val name: String,\n                     val nullable: String?,\n                     val nullableDefaultedNull: String? = null,\n                     val nullableDefaultedNotNull: String? = \"not null\",\n                     val defaulted: String = \"default value\")\n\n    data class ThingPartial(val id: Int, val name: String)\n```\n\nThe hack is `SqlObject.buildHandlersFor()` calls a fallback for any method that does not have annotations and allows a plugin to add handlers for those methods.  And a set of handlers that allows the information to be passed in without having an annotation.  Although you could use an annotation proxy or some other way to fake instantiate one (Kotlin doesn't make that easy, but you can fallback to Java to do so).\n\nEven `GetGeneratedKeys` can be done in the naming convention, so we had to change `UpdateHandler` to allow that to be passed in, the idea of that annotation.\n\nIt is somewhat cleaner anyway to have the annotation research done in SqlObject and then all the rest of the handlers and such do not know about them.  Makes them more flexible and useful in other circumstances.\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/jdbi/jdbi/issues/282","repository_url":"https://api.github.com/repos/jdbi/jdbi","labels_url":"https://api.github.com/repos/jdbi/jdbi/issues/282/labels{/name}","comments_url":"https://api.github.com/repos/jdbi/jdbi/issues/282/comments","events_url":"https://api.github.com/repos/jdbi/jdbi/issues/282/events","html_url":"https://github.com/jdbi/jdbi/issues/282","id":135572754,"node_id":"MDU6SXNzdWUxMzU1NzI3NTQ=","number":282,"title":"For JDBI 3 to support Kotlin, need plugin points...","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"labels":[{"id":276671285,"node_id":"MDU6TGFiZWwyNzY2NzEyODU=","url":"https://api.github.com/repos/jdbi/jdbi/labels/feature","name":"feature","color":"009800","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/jdbi/jdbi/milestones/2","html_url":"https://github.com/jdbi/jdbi/milestone/2","labels_url":"https://api.github.com/repos/jdbi/jdbi/milestones/2/labels","id":382959,"node_id":"MDk6TWlsZXN0b25lMzgyOTU5","number":2,"title":"JDBI 3 Release blocker","description":"Bucket for issues that should be in JDBI 3","creator":{"login":"stevenschlansker","id":129097,"node_id":"MDQ6VXNlcjEyOTA5Nw==","avatar_url":"https://avatars0.githubusercontent.com/u/129097?v=4","gravatar_id":"","url":"https://api.github.com/users/stevenschlansker","html_url":"https://github.com/stevenschlansker","followers_url":"https://api.github.com/users/stevenschlansker/followers","following_url":"https://api.github.com/users/stevenschlansker/following{/other_user}","gists_url":"https://api.github.com/users/stevenschlansker/gists{/gist_id}","starred_url":"https://api.github.com/users/stevenschlansker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stevenschlansker/subscriptions","organizations_url":"https://api.github.com/users/stevenschlansker/orgs","repos_url":"https://api.github.com/users/stevenschlansker/repos","events_url":"https://api.github.com/users/stevenschlansker/events{/privacy}","received_events_url":"https://api.github.com/users/stevenschlansker/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":322,"state":"closed","created_at":"2013-07-20T23:48:16Z","updated_at":"2017-11-23T18:29:50Z","due_on":null,"closed_at":"2017-11-23T18:29:50Z"},"comments":48,"created_at":"2016-02-22T23:00:42Z","updated_at":"2017-03-07T20:03:15Z","closed_at":"2017-03-07T20:03:15Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Kotlin has a lot of type information available at runtime, so if we can write a Kotlin plugin for JDBI we can take advantage of that information.\n\nI'll write the plugin, if you add extension points.  \n\nThings in Kotlin, related to JDBI:\n- like Java 8, we have parameter names, but in a different way.  So if the non annotated parameters can have a specific object mapper instead of just DefaultObjectMapper, we can use ours instead.   We can detect a Kotlin class and apply logic, otherwise fallback to the other DefaultObjectMapper.\n- we know if a property or parameter is nullable or not, so we can do error checking on required vs. optional parameters.\n- for data classes, all properties are also in the constructor, and normally we do not have a default constructor, so we can use the names of incoming parameters (i.e. fields in the query results) to pick the constructor.\n- we have copy constructors in data classes so anywhere we want to clone or make a slight modification to a immutable class we can copy it while changing the set list of fields.\n- we have optional parameters, and can detect when they exist, and can call using or omitting them (call by name)\n- for normal classes we can also look at the list of constructors and parameter names and try to make a best fit\n- we can reify generic parameters for inline functions so some methods can be simplified, we can do this as an extension function to add variations of API that do not need the class passed in as parameters (i.e. `DBI.open(SomeClass)` could infer `SomeClass` from the left side of the assignment).  I think our function parameter types also have full generic information in the metadata when viewed through reflection, same for return type.  I'll have to check that one, I think reflection can read it, but isn't reified.\n- we have default methods for interfaces, but not sure they are done the same as Java 8 ones (they copy into the first level of the class hierarchy that implements the interface I think, not sure they exist in the interface bytecode itself)\n- we have lambdas, function classes, etc. and can treat a parameter that is an interface with a single method as a lambda as well (automatic conversion).  \n\nSo given that, we should be able to help with `SqlObject` building to help decide binding by parameter name, and if things are optional coming in.  For results (I think we can do this already without changes) we can bind the results to classes or class hierarchies given that we can see names nicely, pick constructors besides the default,  take advantage of knowing about default values (for non nullable things), which parameters are really required, etc.  \n\nWhere else can we fit in?   and maybe a first early step is the `SqlObject` change for the default binder.  And then a result set binder, and a way to make it the default (I seem to remember it could be set per class as an annotation, but here we would want one general default to apply).  Other places we can extend?\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/kohesive/kovert/issues/35","repository_url":"https://api.github.com/repos/kohesive/kovert","labels_url":"https://api.github.com/repos/kohesive/kovert/issues/35/labels{/name}","comments_url":"https://api.github.com/repos/kohesive/kovert/issues/35/comments","events_url":"https://api.github.com/repos/kohesive/kovert/issues/35/events","html_url":"https://github.com/kohesive/kovert/issues/35","id":161183781,"node_id":"MDU6SXNzdWUxNjExODM3ODE=","number":35,"title":"enhancement request: add maven packages for freemarker and handlebars support","user":{"login":"kenkyee","id":12235883,"node_id":"MDQ6VXNlcjEyMjM1ODgz","avatar_url":"https://avatars0.githubusercontent.com/u/12235883?v=4","gravatar_id":"","url":"https://api.github.com/users/kenkyee","html_url":"https://github.com/kenkyee","followers_url":"https://api.github.com/users/kenkyee/followers","following_url":"https://api.github.com/users/kenkyee/following{/other_user}","gists_url":"https://api.github.com/users/kenkyee/gists{/gist_id}","starred_url":"https://api.github.com/users/kenkyee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kenkyee/subscriptions","organizations_url":"https://api.github.com/users/kenkyee/orgs","repos_url":"https://api.github.com/users/kenkyee/repos","events_url":"https://api.github.com/users/kenkyee/events{/privacy}","received_events_url":"https://api.github.com/users/kenkyee/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2016-06-20T12:28:41Z","updated_at":"2016-06-20T14:23:59Z","closed_at":"2016-06-20T13:56:51Z","author_association":"NONE","active_lock_reason":null,"body":"or better directions for integrating w/ an app.\n\nIncluding only compile \"uy.kohesive.kovert:kovert-vertx:0.13.+\"\nisn't enough to pull freemarker in or the small class to use it.\n\nI prefer HandleBars though...beats Freemarker in a bunch of benchmark tests ;-)\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/19","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/19/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/19/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/19/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/19","id":123903457,"node_id":"MDU6SXNzdWUxMjM5MDM0NTc=","number":19,"title":"The shorthand for readValue does not work with generics","user":{"login":"villesau","id":2647016,"node_id":"MDQ6VXNlcjI2NDcwMTY=","avatar_url":"https://avatars1.githubusercontent.com/u/2647016?v=4","gravatar_id":"","url":"https://api.github.com/users/villesau","html_url":"https://github.com/villesau","followers_url":"https://api.github.com/users/villesau/followers","following_url":"https://api.github.com/users/villesau/following{/other_user}","gists_url":"https://api.github.com/users/villesau/gists{/gist_id}","starred_url":"https://api.github.com/users/villesau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/villesau/subscriptions","organizations_url":"https://api.github.com/users/villesau/orgs","repos_url":"https://api.github.com/users/villesau/repos","events_url":"https://api.github.com/users/villesau/events{/privacy}","received_events_url":"https://api.github.com/users/villesau/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2015-12-26T01:43:02Z","updated_at":"2015-12-28T16:25:22Z","closed_at":"2015-12-26T01:59:51Z","author_association":"NONE","active_lock_reason":null,"body":"it seems that the shorthand val str : String = mapper.readValue(\"\") does not work if i try to do it like \nval str : T = mapper.readValue(\"\") \n\nmy code reads now like this:\n\n```\n    val mapper = jacksonObjectMapper()\n    fun <T: Any> RoutingContext.getAsPojo(type: KClass<T>) : T = mapper.readValue(this.bodyAsString, type.java)\n```\n\nif it's possible to write the code like this:\nval state: MyStateObject = mapper.readValue(json)\n\nit sounds logical that it should be possible to write like that with generics as well. Would it be possible?\n","performed_via_github_app":null,"score":1.0}]}
0

