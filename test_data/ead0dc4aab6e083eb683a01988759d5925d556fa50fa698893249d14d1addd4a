HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sun, 13 May 2018 12:59:45 GMT
Link: <https://api.github.com/search/issues?q=repo%3Acrystal-lang%2Fcrystal+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Acrystal-lang%2Fcrystal+type%3Aissue+state%3Aclosed&page=34>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CCEA:4F42:44DB098:8AB9A94:5AF836C1
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 29
X-Ratelimit-Reset: 1526216445
X-Runtime-Rack: 0.491844
X-Xss-Protection: 1; mode=block

8000
{"total_count":3025,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6088","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6088/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6088/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6088/events","html_url":"https://github.com/crystal-lang/crystal/issues/6088","id":322173153,"number":6088,"title":"Ruby-like suggestions?","user":{"login":"KCErb","id":4992244,"avatar_url":"https://avatars2.githubusercontent.com/u/4992244?v=4","gravatar_id":"","url":"https://api.github.com/users/KCErb","html_url":"https://github.com/KCErb","followers_url":"https://api.github.com/users/KCErb/followers","following_url":"https://api.github.com/users/KCErb/following{/other_user}","gists_url":"https://api.github.com/users/KCErb/gists{/gist_id}","starred_url":"https://api.github.com/users/KCErb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KCErb/subscriptions","organizations_url":"https://api.github.com/users/KCErb/orgs","repos_url":"https://api.github.com/users/KCErb/repos","events_url":"https://api.github.com/users/KCErb/events{/privacy}","received_events_url":"https://api.github.com/users/KCErb/received_events","type":"User","site_admin":false},"labels":[{"id":514698655,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/community:shard-idea","name":"community:shard-idea","color":"c2e0c6","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2018-05-11T05:35:19Z","updated_at":"2018-05-11T14:53:43Z","closed_at":"2018-05-11T08:15:44Z","author_association":"NONE","body":"Hi there, I'm a long-time Ruby developer new to Crystal and loving my experience!\r\n\r\nOne decision that was made (which I applaud) was to have only one way of doing something. Coming from Ruby this means more than once I've done something like `array.length` or `array.inject` and been puzzled for a few minutes trying to figure out what went wrong.\r\n\r\nWhat would you guys say to adding some ruby-like suggestions (somewhere in crystal/semantic?) so that calling `array.inject` produces `undefined method 'inject' for Array(T) (did you mean 'reduce'?)`\r\n\r\nI don't think we need an exhaustive list of these Ruby changes, but if there was a place in semantics where we could store a JSON of them or something along with some logic, it would add just one more cool feature to an already bursting-at-the-seams-with-cool-features project.","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6086","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6086/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6086/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6086/events","html_url":"https://github.com/crystal-lang/crystal/issues/6086","id":321823853,"number":6086,"title":"Get an error: \"ld: library not found for -lgc\"","user":{"login":"lfwelove","id":554891,"avatar_url":"https://avatars1.githubusercontent.com/u/554891?v=4","gravatar_id":"","url":"https://api.github.com/users/lfwelove","html_url":"https://github.com/lfwelove","followers_url":"https://api.github.com/users/lfwelove/followers","following_url":"https://api.github.com/users/lfwelove/following{/other_user}","gists_url":"https://api.github.com/users/lfwelove/gists{/gist_id}","starred_url":"https://api.github.com/users/lfwelove/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lfwelove/subscriptions","organizations_url":"https://api.github.com/users/lfwelove/orgs","repos_url":"https://api.github.com/users/lfwelove/repos","events_url":"https://api.github.com/users/lfwelove/events{/privacy}","received_events_url":"https://api.github.com/users/lfwelove/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-05-10T06:26:40Z","updated_at":"2018-05-10T10:48:39Z","closed_at":"2018-05-10T09:42:15Z","author_association":"NONE","body":"MacOS High Sierra 10.13.4\r\n\r\nI tried two ways to install Crystal-lang on Mac\r\n1. $brew install crystal-lang\r\n2. $brew install crystal-lang --with-llvm\r\n\r\nmy test.cr content:\r\nputs \"hello\"\r\n\r\ntype \"$ crystal test.cr \"\r\n(then get an error)\r\nld: library not found for -lgc\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nError: execution of command failed with code: 1: `cc \"${@}\" -o '/Users/chenxi/.cache/crystal/crystal-run-test.tmp'  -rdynamic  -lpcre -lgc -lpthread /usr/local/Cellar/crystal-lang/0.24.2_1/src/ext/libcrystal.a -levent -liconv -ldl -L/usr/lib -L/usr/local/lib`\r\n","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6081","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6081/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6081/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6081/events","html_url":"https://github.com/crystal-lang/crystal/issues/6081","id":321275308,"number":6081,"title":"New Feature: Allow passing TypeDeclarations to regular methods at runtime","user":{"login":"paulcsmith","id":22394,"avatar_url":"https://avatars0.githubusercontent.com/u/22394?v=4","gravatar_id":"","url":"https://api.github.com/users/paulcsmith","html_url":"https://github.com/paulcsmith","followers_url":"https://api.github.com/users/paulcsmith/followers","following_url":"https://api.github.com/users/paulcsmith/following{/other_user}","gists_url":"https://api.github.com/users/paulcsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/paulcsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulcsmith/subscriptions","organizations_url":"https://api.github.com/users/paulcsmith/orgs","repos_url":"https://api.github.com/users/paulcsmith/repos","events_url":"https://api.github.com/users/paulcsmith/events{/privacy}","received_events_url":"https://api.github.com/users/paulcsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-05-08T17:23:30Z","updated_at":"2018-05-08T20:30:33Z","closed_at":"2018-05-08T19:56:17Z","author_association":"CONTRIBUTOR","body":"Right now you can pass TypeDeclarations to macros:\r\n\r\nhttps://play.crystal-lang.org/#/r/41a7\r\n```crystal\r\nmacro what_am_i?(declaration)\r\n  {{ p declaration.type }}\r\nend\r\n\r\nwhat_am_i? thing : String # Prints: String\r\n```\r\n\r\nIt would be wonderful to also be able to use a `TypeDeclaration` class at *runtime*:\r\n\r\n```crystal\r\ndef what_am_i?(declaration)\r\n  p declaration.type\r\nend\r\n\r\nwhat_am_i? thing : String # Prints: String\r\n```\r\n\r\n## Example use case:\r\n\r\n\r\nhttps://luckyframework.org/guides/database-migrations/#creating-and-altering-tables\r\n```crystal\r\n# created_at, updated_at, and id are added automatically\r\ncreate :users do\r\n  add name : String # will set the column to NULL FALSE\r\n  add age : Int32? # will allow NULL values because of the nilable type\r\nend\r\n```\r\n\r\nRight now I have to make `add` a macro even though it could easily be done as a method if it were possible to pass a type declaration around at runtime. I imagine it would be a simple struct with the exact same methods as the TypeDeclaration(T) available at compile-time (where T is the type, makes it so you can only allow TypeDeclarations of a certain type, used in this case so that only types that are allowed in the database can be passed to the method)\r\n\r\n```crystal\r\ndef add(declaration : TypeDeclaration(String))\r\n  # add string column using declaration.type, declaration.var and declaration.default\r\nend\r\n```\r\n\r\nI admit I do not know how this is implemented so maybe this is extremely difficult, but my hope is that it is not. I think this will open up APIs that feel wonderful because you're using familiar syntax instead of something like: `add :age, Int32?, default = 1`","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6076","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6076/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6076/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6076/events","html_url":"https://github.com/crystal-lang/crystal/issues/6076","id":321106197,"number":6076,"title":"Module validation failed when assigning with iteration","user":{"login":"cielavenir","id":1495368,"avatar_url":"https://avatars3.githubusercontent.com/u/1495368?v=4","gravatar_id":"","url":"https://api.github.com/users/cielavenir","html_url":"https://github.com/cielavenir","followers_url":"https://api.github.com/users/cielavenir/followers","following_url":"https://api.github.com/users/cielavenir/following{/other_user}","gists_url":"https://api.github.com/users/cielavenir/gists{/gist_id}","starred_url":"https://api.github.com/users/cielavenir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cielavenir/subscriptions","organizations_url":"https://api.github.com/users/cielavenir/orgs","repos_url":"https://api.github.com/users/cielavenir/repos","events_url":"https://api.github.com/users/cielavenir/events{/privacy}","received_events_url":"https://api.github.com/users/cielavenir/received_events","type":"User","site_admin":false},"labels":[{"id":20487867,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/kind:bug","name":"kind:bug","color":"fc2929","default":false},{"id":20487870,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/status:invalid","name":"status:invalid","color":"e6e6e6","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-08T09:17:28Z","updated_at":"2018-05-08T14:34:42Z","closed_at":"2018-05-08T14:34:12Z","author_association":"NONE","body":"The following code:\r\n\r\n```\r\nf=Hash(Char,->Int32).new\r\n#(2..9).each{|i|f[i.to_s[0]]=->(n : Int32){->{n}}.call(i)} # this is ok as a workaround\r\n(2..9).each{|i|f[i.to_s[0]]=->{i}}\r\nputs f['2'].call\r\n```\r\n\r\nraises the following error:\r\n\r\n```\r\nModule validation failed: inlinable function call in a function with debug info must have a !dbg location\r\n  %107 = call i8* @__crystal_malloc64(i64 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i64))\r\n\r\n???\r\n???\r\n???\r\n???\r\n???\r\n__crystal_main\r\nmain\r\n__libc_start_main\r\n_start\r\n???\r\n\r\nError: you've found a bug in the Crystal compiler. Please open an issue, including source code that will allow us to reproduce the bug: https://github.com/crystal-lang/crystal/issues\r\n```\r\n\r\nThe longer original code was able to reproduce the issue on my macbook. The compacted code was tested on play.crystal 0.24.2.\r\n\r\n----\r\n\r\nThe difference between ideal code and workaround code is that in workaround code I wrapped the iterated variable with a temporal Proc. I know several languages including Go require this trick, but I suppose we should allow the ideal notation or make it compilation error.","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6067","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6067/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6067/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6067/events","html_url":"https://github.com/crystal-lang/crystal/issues/6067","id":320537600,"number":6067,"title":"Feature Idea: Auto-prefix `class` and `enum` arguments.","user":{"login":"chris-huxtable","id":2386387,"avatar_url":"https://avatars2.githubusercontent.com/u/2386387?v=4","gravatar_id":"","url":"https://api.github.com/users/chris-huxtable","html_url":"https://github.com/chris-huxtable","followers_url":"https://api.github.com/users/chris-huxtable/followers","following_url":"https://api.github.com/users/chris-huxtable/following{/other_user}","gists_url":"https://api.github.com/users/chris-huxtable/gists{/gist_id}","starred_url":"https://api.github.com/users/chris-huxtable/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chris-huxtable/subscriptions","organizations_url":"https://api.github.com/users/chris-huxtable/orgs","repos_url":"https://api.github.com/users/chris-huxtable/repos","events_url":"https://api.github.com/users/chris-huxtable/events{/privacy}","received_events_url":"https://api.github.com/users/chris-huxtable/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-05T20:04:15Z","updated_at":"2018-05-08T20:02:11Z","closed_at":"2018-05-08T20:02:11Z","author_association":"CONTRIBUTOR","body":"I am interested in getting a little more involved with the actual compiler and have an idea which I think would be a big improvement to the use of `enum`s. If its thought to be a good idea I would appreciate some guidance on where it might be best to start.\r\n\r\nCurrently when one submits an enum as an argument it needs to be something like `Process::Redirect::Close`. It could simply be `Close`. The method is expecting a `Process::Redirect`. This produces long lines of repeated information; `Process.run(...)` for example.\r\n\r\nI would like to modify the compiler to assume a prefix on a given `enum` or `class` as being that of the expected receiving kind. \r\n\r\nThoughts?","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6065","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6065/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6065/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6065/events","html_url":"https://github.com/crystal-lang/crystal/issues/6065","id":320526370,"number":6065,"title":"Pointer(Void).new(-1) points to address 18446744073709551615","user":{"login":"petoem","id":8493004,"avatar_url":"https://avatars0.githubusercontent.com/u/8493004?v=4","gravatar_id":"","url":"https://api.github.com/users/petoem","html_url":"https://github.com/petoem","followers_url":"https://api.github.com/users/petoem/followers","following_url":"https://api.github.com/users/petoem/following{/other_user}","gists_url":"https://api.github.com/users/petoem/gists{/gist_id}","starred_url":"https://api.github.com/users/petoem/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petoem/subscriptions","organizations_url":"https://api.github.com/users/petoem/orgs","repos_url":"https://api.github.com/users/petoem/repos","events_url":"https://api.github.com/users/petoem/events{/privacy}","received_events_url":"https://api.github.com/users/petoem/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-05T17:21:21Z","updated_at":"2018-05-05T19:23:57Z","closed_at":"2018-05-05T19:23:57Z","author_association":"CONTRIBUTOR","body":"While working on my overflow [shard](https://github.com/petoem/overflow), I discovered that the stdlib uses `Pointer(Void).new(-1)`. \r\nSee petoem/overflow#1 \r\ne.g. https://github.com/crystal-lang/crystal/blob/5e518f97349fe0cc3fba6455b5173cb02900b287/src/lib_c/x86_64-linux-gnu/c/sys/mman.cr#L13\r\n\r\nhttps://github.com/crystal-lang/crystal/blob/5e518f97349fe0cc3fba6455b5173cb02900b287/src/pointer.cr#L411-L413\r\n`#to_u64` causes an overflow and the pointer will point to address `0xffffffffffffffff` not `-1`. ","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6059","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6059/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6059/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6059/events","html_url":"https://github.com/crystal-lang/crystal/issues/6059","id":320259919,"number":6059,"title":"initialize LogHandler(log : Logger)","user":{"login":"baelter","id":1399369,"avatar_url":"https://avatars1.githubusercontent.com/u/1399369?v=4","gravatar_id":"","url":"https://api.github.com/users/baelter","html_url":"https://github.com/baelter","followers_url":"https://api.github.com/users/baelter/followers","following_url":"https://api.github.com/users/baelter/following{/other_user}","gists_url":"https://api.github.com/users/baelter/gists{/gist_id}","starred_url":"https://api.github.com/users/baelter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baelter/subscriptions","organizations_url":"https://api.github.com/users/baelter/orgs","repos_url":"https://api.github.com/users/baelter/repos","events_url":"https://api.github.com/users/baelter/events{/privacy}","received_events_url":"https://api.github.com/users/baelter/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-04T12:40:15Z","updated_at":"2018-05-11T15:04:18Z","closed_at":"2018-05-11T15:04:18Z","author_association":"NONE","body":"Nice to have feature. I can submit. What do you think?","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6054","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6054/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6054/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6054/events","html_url":"https://github.com/crystal-lang/crystal/issues/6054","id":319658705,"number":6054,"title":"Running crystal spec returns: cannot find -lxm12","user":{"login":"beanilsson","id":13626169,"avatar_url":"https://avatars0.githubusercontent.com/u/13626169?v=4","gravatar_id":"","url":"https://api.github.com/users/beanilsson","html_url":"https://github.com/beanilsson","followers_url":"https://api.github.com/users/beanilsson/followers","following_url":"https://api.github.com/users/beanilsson/following{/other_user}","gists_url":"https://api.github.com/users/beanilsson/gists{/gist_id}","starred_url":"https://api.github.com/users/beanilsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/beanilsson/subscriptions","organizations_url":"https://api.github.com/users/beanilsson/orgs","repos_url":"https://api.github.com/users/beanilsson/repos","events_url":"https://api.github.com/users/beanilsson/events{/privacy}","received_events_url":"https://api.github.com/users/beanilsson/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-05-02T18:15:10Z","updated_at":"2018-05-04T10:50:54Z","closed_at":"2018-05-02T18:31:14Z","author_association":"NONE","body":"I got this error on an Ubuntu Server, 18.04 LTS 64-bit edition which I run through Virtualbox. I have no idea if the same happens on any other system or distro. What I did was:\r\n\r\n- Create a new crystal lib with `crystal init lib repo_name`.\r\n- Without any modifications at all, running `crystal spec` immediately after. Which gave this stacktrace: \r\n```\r\n/usr/bin/x86_64-linux-gnu-ld: cannot find -lxm12\r\ncollect2: error: ld returned 1 exit status\r\nError: execution of command failed with code: 1: `cc \"${@}\" -o '/home/myUser/.cache/crystal/crystal-run-spec.tmp' -rdynamic -lxm12 -lpcre -lm -lgc -lpthread /usr/share/crystal/src/ext/libcrystal.a -levent -lrt -ldl -L/usr/lib -L/usr/local/lib`\r\n```\r\nCrystal compiler version:\r\n```\r\nCrystal 0.24.2 [4f9ed8d03] (2018-03-08)\r\nLLVM: 4.0.0\r\nDefault target: x86_64-unknown-linux-gnu\r\n```","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6050","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6050/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6050/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6050/events","html_url":"https://github.com/crystal-lang/crystal/issues/6050","id":319571120,"number":6050,"title":"Recursive Hash initialization","user":{"login":"vladfaust","id":7955682,"avatar_url":"https://avatars2.githubusercontent.com/u/7955682?v=4","gravatar_id":"","url":"https://api.github.com/users/vladfaust","html_url":"https://github.com/vladfaust","followers_url":"https://api.github.com/users/vladfaust/followers","following_url":"https://api.github.com/users/vladfaust/following{/other_user}","gists_url":"https://api.github.com/users/vladfaust/gists{/gist_id}","starred_url":"https://api.github.com/users/vladfaust/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladfaust/subscriptions","organizations_url":"https://api.github.com/users/vladfaust/orgs","repos_url":"https://api.github.com/users/vladfaust/repos","events_url":"https://api.github.com/users/vladfaust/events{/privacy}","received_events_url":"https://api.github.com/users/vladfaust/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-05-02T14:16:17Z","updated_at":"2018-05-02T17:51:55Z","closed_at":"2018-05-02T17:51:54Z","author_association":"NONE","body":"Hola,\r\n\r\n```crystal\r\nalias MyHash = Hash(String, String | MyHash)\r\nh = MyHash.new # Doesn't work\r\nh = {} of String => String | MyHash # Works\r\n```\r\n\r\n:bug: ?","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6049","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6049/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6049/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6049/events","html_url":"https://github.com/crystal-lang/crystal/issues/6049","id":319489914,"number":6049,"title":"Undefined macro variable in nested macro","user":{"login":"vladfaust","id":7955682,"avatar_url":"https://avatars2.githubusercontent.com/u/7955682?v=4","gravatar_id":"","url":"https://api.github.com/users/vladfaust","html_url":"https://github.com/vladfaust","followers_url":"https://api.github.com/users/vladfaust/followers","following_url":"https://api.github.com/users/vladfaust/following{/other_user}","gists_url":"https://api.github.com/users/vladfaust/gists{/gist_id}","starred_url":"https://api.github.com/users/vladfaust/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladfaust/subscriptions","organizations_url":"https://api.github.com/users/vladfaust/orgs","repos_url":"https://api.github.com/users/vladfaust/repos","events_url":"https://api.github.com/users/vladfaust/events{/privacy}","received_events_url":"https://api.github.com/users/vladfaust/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-02T10:03:50Z","updated_at":"2018-05-02T12:19:57Z","closed_at":"2018-05-02T12:19:57Z","author_association":"NONE","body":"https://carc.in/#/r/3zhj\r\n\r\n```crystal\r\n{% begin %}\r\n  \\{% foo = \"foo\" %}\r\n  \\{% pp foo %}\r\n{% end %}\r\n```\r\n\r\n```\r\nin macro 'macro_93906895660240' eval:1, line 3:\r\n\r\n   1. \r\n   2.   {% foo = \"foo\" %}\r\n>  3.   {% pp foo %}\r\n\r\nundefined macro variable 'foo'\r\n```\r\n\r\n:bug: ","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6042","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6042/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6042/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6042/events","html_url":"https://github.com/crystal-lang/crystal/issues/6042","id":319173630,"number":6042,"title":"reserved keywords error messages","user":{"login":"stern0","id":21057231,"avatar_url":"https://avatars2.githubusercontent.com/u/21057231?v=4","gravatar_id":"","url":"https://api.github.com/users/stern0","html_url":"https://github.com/stern0","followers_url":"https://api.github.com/users/stern0/followers","following_url":"https://api.github.com/users/stern0/following{/other_user}","gists_url":"https://api.github.com/users/stern0/gists{/gist_id}","starred_url":"https://api.github.com/users/stern0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stern0/subscriptions","organizations_url":"https://api.github.com/users/stern0/orgs","repos_url":"https://api.github.com/users/stern0/repos","events_url":"https://api.github.com/users/stern0/events{/privacy}","received_events_url":"https://api.github.com/users/stern0/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-01T11:13:36Z","updated_at":"2018-05-02T16:26:53Z","closed_at":"2018-05-02T16:26:53Z","author_association":"NONE","body":"A similar issue was raised in https://github.com/crystal-lang/crystal/issues/4121\r\n\r\nIt would be good to produce proper error messages for using reserved keywords in the language.\r\nThe below example shows I am using the `out` keyword.\r\n\r\n```crystal\r\ndef foo(up : String, down : String, out : String)\r\n  bar = JSON.build do |json|\r\n    json.object do\r\n      json.field \"up\", up\r\n      json.field \"down\", down\r\n      json.field \"out\", out\r\n    end\r\n  end\r\n\r\n  bar\r\nend\r\n```\r\n\r\nThe compiler throw the following error at compile time. Same with `crystal tool format`.\r\n```bash\r\nSyntax Error: can't use variable name 'bar' inside assignment to variable 'bar'\r\n```\r\n\r\nThe above message gives no idea about `out` been a reserved keyword and suggests `bar` is.\r\nDisplaying proper errors for builtin types would be good.\r\n\r\n- Crystal compiler version `Crystal 0.24.2 (2018-03-10) LLVM: 5.0.1`\r\n- OS `x86_64-apple-macosx`\r\n","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6030","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6030/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6030/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6030/events","html_url":"https://github.com/crystal-lang/crystal/issues/6030","id":318718050,"number":6030,"title":"Bug: Expression after quoted heredoc identifier raises syntax error","user":{"login":"straight-shoota","id":466378,"avatar_url":"https://avatars0.githubusercontent.com/u/466378?v=4","gravatar_id":"","url":"https://api.github.com/users/straight-shoota","html_url":"https://github.com/straight-shoota","followers_url":"https://api.github.com/users/straight-shoota/followers","following_url":"https://api.github.com/users/straight-shoota/following{/other_user}","gists_url":"https://api.github.com/users/straight-shoota/gists{/gist_id}","starred_url":"https://api.github.com/users/straight-shoota/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/straight-shoota/subscriptions","organizations_url":"https://api.github.com/users/straight-shoota/orgs","repos_url":"https://api.github.com/users/straight-shoota/repos","events_url":"https://api.github.com/users/straight-shoota/events{/privacy}","received_events_url":"https://api.github.com/users/straight-shoota/received_events","type":"User","site_admin":false},"labels":[{"id":20487867,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/kind:bug","name":"kind:bug","color":"fc2929","default":false},{"id":253019637,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:compiler","name":"topic:compiler","color":"fef2c0","default":false},{"id":562537508,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:parser","name":"topic:parser","color":"fef2c0","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-29T13:42:31Z","updated_at":"2018-05-02T13:39:56Z","closed_at":"2018-05-02T13:39:56Z","author_association":"CONTRIBUTOR","body":"This seems to be a bug in master introduced by incomplete change of heredoc behaviour in #5578:\r\n\r\n```cr\r\nputs <<-'EOF'.upcase # expecting '\\n' or '\\r' after closing single quote\r\n  foo\r\nEOF\r\n```\r\n\r\nWithout single quotes it compiles fine.","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6028","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6028/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6028/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6028/events","html_url":"https://github.com/crystal-lang/crystal/issues/6028","id":318643747,"number":6028,"title":"Instance vars + finished: chicken and egg problem","user":{"login":"asterite","id":209371,"avatar_url":"https://avatars0.githubusercontent.com/u/209371?v=4","gravatar_id":"","url":"https://api.github.com/users/asterite","html_url":"https://github.com/asterite","followers_url":"https://api.github.com/users/asterite/followers","following_url":"https://api.github.com/users/asterite/following{/other_user}","gists_url":"https://api.github.com/users/asterite/gists{/gist_id}","starred_url":"https://api.github.com/users/asterite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asterite/subscriptions","organizations_url":"https://api.github.com/users/asterite/orgs","repos_url":"https://api.github.com/users/asterite/repos","events_url":"https://api.github.com/users/asterite/events{/privacy}","received_events_url":"https://api.github.com/users/asterite/received_events","type":"User","site_admin":false},"labels":[{"id":514722955,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/status:discussion","name":"status:discussion","color":"bfd4f2","default":false},{"id":253019637,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:compiler","name":"topic:compiler","color":"fef2c0","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2018-04-28T15:05:29Z","updated_at":"2018-05-05T18:30:13Z","closed_at":"2018-05-05T18:03:56Z","author_association":"MEMBER","body":"Imagine I'd like to implement an `AutoConstructor` module that defines an `initialize` method from all the instance variables. One solution could be this:\r\n\r\n```crystal\r\nclass Object\r\n  module AutoConstructor\r\n    macro included\r\n      macro finished\r\n        def initialize(*,\r\n          \\{% for ivar in @type.instance_vars %}\r\n            @\\{{ivar}} = \\{{ivar.default_value}},\r\n          \\{% end %}\r\n          )\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nclass Foo\r\n  property x = 1\r\n  property y = \"foo\"\r\n\r\n  include AutoConstructor\r\nend\r\n\r\nFoo.new(x: 10, y: \"hello\")\r\n```\r\n\r\nThe code is a bit convulted because it involves an `included` macro and a `finished` macro, which needs to be escaped to avoid it being expanded as the result of the inclusion (and not because of `finished`).\r\n\r\nBut, aside from those indirections (which are sometimes needed)... it doesn't work.\r\n\r\nThe problem is that `f
8000
inished` runs directly after the first compiler pass, and at that point the type of instance variables (or even which instance variables) are computed.\r\n\r\nThis is both bad and good: the above doesn't work, but we can introduce more instance variables in a `finished` hook, and in fact this how it's implemented here: https://github.com/kostya/auto_constructor . But, instead of using instance vars, the `field` macro will store this info in some array, and later process that array. It works because it doesn't use instance vars in the `finished` macro.\r\n\r\nWe can change the compiler to have instance vars be processed/defined **before** `finished` macros are executed. I have that change working on my machine (though I didn't thoroughly tested it), and with that the above snippet runs fine. The downside of this approach is that the `finished` macro now obviously **can't** define new instance variables (and if it does, they will probably be ignored).\r\n\r\nSo, which approach should we chose?\r\n\r\nI think I'd like to stick with the latter behaviour, because I'd like macros to work on instance variables and their metadata. Right now they only have just a few (their type, whether or not they have a default value, and what's the default value), but eventually, with `@[Attribute]` (https://github.com/crystal-lang/crystal/issues/3620) we could store arbitrary data in them to be able to more easily implement `JSON::Mapping` and such (and maybe more use cases that right now I can't imagine).\r\n\r\nJust note that `JSON::Mapping` could still be implemented on top of instance var attributes **without** this change, because macros inside methods are only expanded when methods are instantiated, and at that point instance vars are already defined. A partial implementation is here: https://github.com/crystal-lang/crystal/issues/5643#issuecomment-360817842\r\n\r\nIf we go with the latter approach, the `AutoConstructor` project above can still work: the `field` macro can declare the type of an instance variable right away, but still store the associated info in some compile-time array (though it might be convenient to use an attribute at that point).\r\n\r\nThe question is: how do you use `finished`? And do you think your projects could still work if we change the compiler to work in the latter form?\r\n\r\n(One more thing: I don't want to change the compiler to just be able to implement the above `AutoConstructor` module, which I think it might not be very useful. Instead, I'm thinking about a way of having access to instance variables in `finished` macros, which is something that isn't currently possible, to open up the way for more flexibility, such as defining various things based on instance vars (not just a constructor)).","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6025","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6025/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6025/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6025/events","html_url":"https://github.com/crystal-lang/crystal/issues/6025","id":318593133,"number":6025,"title":"Indexable mixin in String class","user":{"login":"Blacksmoke16","id":12136995,"avatar_url":"https://avatars1.githubusercontent.com/u/12136995?v=4","gravatar_id":"","url":"https://api.github.com/users/Blacksmoke16","html_url":"https://github.com/Blacksmoke16","followers_url":"https://api.github.com/users/Blacksmoke16/followers","following_url":"https://api.github.com/users/Blacksmoke16/following{/other_user}","gists_url":"https://api.github.com/users/Blacksmoke16/gists{/gist_id}","starred_url":"https://api.github.com/users/Blacksmoke16/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Blacksmoke16/subscriptions","organizations_url":"https://api.github.com/users/Blacksmoke16/orgs","repos_url":"https://api.github.com/users/Blacksmoke16/repos","events_url":"https://api.github.com/users/Blacksmoke16/events{/privacy}","received_events_url":"https://api.github.com/users/Blacksmoke16/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-28T02:41:34Z","updated_at":"2018-04-28T14:51:47Z","closed_at":"2018-04-28T14:51:47Z","author_association":"NONE","body":"Is there a reason why https://crystal-lang.org/api/0.24.2/Indexable.html isn't included in String.cr?\r\n\r\nIt seems that all of those methods could be used on a string, since a string could be thought of an array of characters.\r\n\r\nif `\"foo\"[0]` works why shouldn't `\"foo\".first`?\r\n\r\nWDYT?","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6021","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6021/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6021/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6021/events","html_url":"https://github.com/crystal-lang/crystal/issues/6021","id":318526759,"number":6021,"title":"🚑 TypeNode#instance_vars returns empty array","user":{"login":"vladfaust","id":7955682,"avatar_url":"https://avatars2.githubusercontent.com/u/7955682?v=4","gravatar_id":"","url":"https://api.github.com/users/vladfaust","html_url":"https://github.com/vladfaust","followers_url":"https://api.github.com/users/vladfaust/followers","following_url":"https://api.github.com/users/vladfaust/following{/other_user}","gists_url":"https://api.github.com/users/vladfaust/gists{/gist_id}","starred_url":"https://api.github.com/users/vladfaust/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladfaust/subscriptions","organizations_url":"https://api.github.com/users/vladfaust/orgs","repos_url":"https://api.github.com/users/vladfaust/repos","events_url":"https://api.github.com/users/vladfaust/events{/privacy}","received_events_url":"https://api.github.com/users/vladfaust/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-27T19:39:32Z","updated_at":"2018-04-28T13:24:50Z","closed_at":"2018-04-28T00:24:22Z","author_association":"NONE","body":"```crystal\r\nclass Foo\r\n  @bar : String?\r\n\r\n  {% begin %}\r\n    def initialize(\r\n      {% for var in @type.instance_vars %}\r\n        @{{var.name.id}} : {{var.type.id}}\r\n      {% end %}\r\n    )\r\n    end\r\n  {% end %}\r\nend\r\n\r\nFoo.new(\"baz\")\r\n\r\n# wrong number of arguments for 'Foo.new' (given 1, expected 0)\r\n```\r\n\r\nI've tried interpolating macros and `macro finished` and wrapping with `macro define_initializer` - it's always empty ☹️\r\n\r\nThat constant fight between me and the compilator in a single-man journey is kinda exhausting. ","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6019","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6019/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6019/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6019/events","html_url":"https://github.com/crystal-lang/crystal/issues/6019","id":318436230,"number":6019,"title":"Pretty printing et al.","user":{"login":"asterite","id":209371,"avatar_url":"https://avatars0.githubusercontent.com/u/209371?v=4","gravatar_id":"","url":"https://api.github.com/users/asterite","html_url":"https://github.com/asterite","followers_url":"https://api.github.com/users/asterite/followers","following_url":"https://api.github.com/users/asterite/following{/other_user}","gists_url":"https://api.github.com/users/asterite/gists{/gist_id}","starred_url":"https://api.github.com/users/asterite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asterite/subscriptions","organizations_url":"https://api.github.com/users/asterite/orgs","repos_url":"https://api.github.com/users/asterite/repos","events_url":"https://api.github.com/users/asterite/events{/privacy}","received_events_url":"https://api.github.com/users/asterite/received_events","type":"User","site_admin":false},"labels":[{"id":514722955,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/status:discussion","name":"status:discussion","color":"bfd4f2","default":false},{"id":260346999,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/status:draft","name":"status:draft","color":"00B8B8","default":false},{"id":253019694,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:stdlib","name":"topic:stdlib","color":"fad8c7","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":24,"created_at":"2018-04-27T14:42:45Z","updated_at":"2018-05-02T12:58:41Z","closed_at":"2018-05-02T12:58:41Z","author_association":"MEMBER","body":"Right now we have:\r\n\r\n```\r\np value # pretty print value\r\npp value # pretty print value while also showing what are you printing\r\n```\r\n\r\nI think it's a bit confusing. In Ruby we have:\r\n\r\n```\r\np value # inspect value\r\npp value # pretty print value\r\n# (and there's no way to pretty print while also showing what are you printing)\r\n```\r\n\r\nI propose we:\r\n- change `p` to the old meaning of \"inspect\"\r\n- change `pp` to just pretty print a value\r\n- add two new methods to inspect or pretty print a value and show what you are inspecting (like the current `pp`, but one using `inspect`, and one using `pretty print`)\r\n\r\nWhat do you think? I have no idea for the names.\r\n\r\nMy main issue with `pp` is that it's both \"pretty print\" and \"show what we are pretty printing\". And somtimes just `p` leads to a lot of lines being printed, while `puts value.inspect` (so Ruby's `p`) is sometimes more clear.\r\n\r\nThoughts?","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6016","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6016/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6016/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6016/events","html_url":"https://github.com/crystal-lang/crystal/issues/6016","id":318164216,"number":6016,"title":"Unintended nested macro behaviour","user":{"login":"vladfaust","id":7955682,"avatar_url":"https://avatars2.githubusercontent.com/u/7955682?v=4","gravatar_id":"","url":"https://api.github.com/users/vladfaust","html_url":"https://github.com/vladfaust","followers_url":"https://api.github.com/users/vladfaust/followers","following_url":"https://api.github.com/users/vladfaust/following{/other_user}","gists_url":"https://api.github.com/users/vladfaust/gists{/gist_id}","starred_url":"https://api.github.com/users/vladfaust/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladfaust/subscriptions","organizations_url":"https://api.github.com/users/vladfaust/orgs","repos_url":"https://api.github.com/users/vladfaust/repos","events_url":"https://api.github.com/users/vladfaust/events{/privacy}","received_events_url":"https://api.github.com/users/vladfaust/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2018-04-26T19:21:17Z","updated_at":"2018-04-26T22:01:33Z","closed_at":"2018-04-26T22:01:33Z","author_association":"NONE","body":"Works OK (https://play.crystal-lang.org/#/r/3yfm):\r\n\r\n```crystal\r\nFOO = {} of Object => Object\r\n\r\nmacro foo\r\n  {{yield}}\r\n  debug\r\nend\r\n\r\nmacro bar(&block)\r\n  {{yield}}\r\nend\r\n\r\nmacro bar\r\n  {% FOO[:a] = 42 %}\r\nend\r\n\r\nmacro debug\r\n  {% pp FOO %}\r\nend\r\n\r\nfoo do\r\n  bar do\r\n    bar\r\n  end\r\nend\r\n\r\n# FOO # => {:a => 42} of Object => Object\r\n```\r\n\r\nBut if switch two `bar` definitions, something strange happens (https://play.crystal-lang.org/#/r/3yfq):\r\n\r\n```crystal\r\nFOO = {} of Object => Object\r\n\r\nmacro foo\r\n  {{yield}}\r\n  debug\r\nend\r\n\r\nmacro bar\r\n  {% FOO[:a] = 42 %}\r\nend\r\n\r\nmacro bar(&block)\r\n  {{yield}}\r\nend\r\n\r\nmacro debug\r\n  {% pp FOO %}\r\nend\r\n\r\nfoo do\r\n  bar do\r\n    bar\r\n  end\r\nend\r\n\r\n# FOO # => {} of Object => Object\r\n```\r\n\r\nThis made me hysterically laugh after an hour of debugging :grin: \r\n\r\nCould someone please explain why is that happening?\r\n\r\n*1.0 is far-far away...*","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6010","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6010/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6010/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6010/events","html_url":"https://github.com/crystal-lang/crystal/issues/6010","id":317695014,"number":6010,"title":"Formatter incorrectly indents arguments when using a backslash","user":{"login":"paulcsmith","id":22394,"avatar_url":"https://avatars0.githubusercontent.com/u/22394?v=4","gravatar_id":"","url":"https://api.github.com/users/paulcsmith","html_url":"https://github.com/paulcsmith","followers_url":"https://api.github.com/users/paulcsmith/followers","following_url":"https://api.github.com/users/paulcsmith/following{/other_user}","gists_url":"https://api.github.com/users/paulcsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/paulcsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulcsmith/subscriptions","organizations_url":"https://api.github.com/users/paulcsmith/orgs","repos_url":"https://api.github.com/users/paulcsmith/repos","events_url":"https://api.github.com/users/paulcsmith/events{/privacy}","received_events_url":"https://api.github.com/users/paulcsmith/received_events","type":"User","site_admin":false},"labels":[{"id":20487867,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/kind:bug","name":"kind:bug","color":"fc2929","default":false},{"id":253019637,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:compiler","name":"topic:compiler","color":"fef2c0","default":false},{"id":273087516,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:formatter","name":"topic:formatter","color":"d4c5f9","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-25T16:06:50Z","updated_at":"2018-04-26T15:08:04Z","closed_at":"2018-04-26T15:08:04Z","author_association":"CONTRIBUTOR","body":"> Similar to https://github.com/crystal-lang/crystal/issues/3383\r\n\r\n```crystal\r\n# Before formatting\r\nUser.new \\\r\n  name: \"Paul\",\r\n  age: 28,\r\n  location: \"Boston, MA\"\r\n\r\n# After formatting\r\nUser.new \\\r\n  name: \"Paul\",\r\n    age: 28,\r\n    location: \"Boston, MA\"\r\n```\r\n\r\n## Alternative syntaxes work\r\n\r\nThis is *not* a deal-breaker since other syntaxes can be used and the formatter works fine, but I'd love to use the `\\` in cases like this:\r\n\r\n```crystal\r\nclass User\r\n  def initialize(@name : String, @age : Int32, @location : String)\r\n  end\r\nend\r\n\r\n# I think this reads very nicely\r\nUser.new \\\r\n  name: \"Paul\",\r\n    age: 28,\r\n    location: \"Boston, MA\"\r\n\r\n# Not a huge fan of these latter syntaxes\r\nUser.new(\r\n  name: \"Paul\",\r\n  age: 28,\r\n  location: \"Boston, MA\"\r\n)\r\n\r\nUser.new name: \"Paul\",\r\n  age: 28,\r\n  location: \"Boston, MA\"\r\n```","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6003","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6003/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6003/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6003/events","html_url":"https://github.com/crystal-lang/crystal/issues/6003","id":317515313,"number":6003,"title":"libxml2-dev is a dependency that is missing for the .deb package","user":{"login":"evandrojr","id":939608,"avatar_url":"https://avatars0.githubusercontent.com/u/939608?v=4","gravatar_id":"","url":"https://api.github.com/users/evandrojr","html_url":"https://github.com/evandrojr","followers_url":"https://api.github.com/users/evandrojr/followers","following_url":"https://api.github.com/users/evandrojr/following{/other_user}","gists_url":"https://api.github.com/users/evandrojr/gists{/gist_id}","starred_url":"https://api.github.com/users/evandrojr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evandrojr/subscriptions","organizations_url":"https://api.github.com/users/evandrojr/orgs","repos_url":"https://api.github.com/users/evandrojr/repos","events_url":"https://api.github.com/users/evandrojr/events{/privacy}","received_events_url":"https://api.github.com/users/evandrojr/received_events","type":"User","site_admin":false},"labels":[{"id":20487868,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/status:duplicate","name":"status:duplicate","color":"cccccc","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-25T07:49:14Z","updated_at":"2018-04-25T09:19:40Z","closed_at":"2018-04-25T09:19:31Z","author_association":"NONE","body":"crystal spec command throws this error:\r\n\r\n```\r\n crystal spec\r\n/usr/bin/ld: cannot find -lxml2\r\ncollect2: error: ld returned 1 exit status\r\nError: execution of command failed with code: 1: `cc \"${@}\" -o '/home/j/.cache/crystal/crystal-run-spec.tmp'  -rdynamic  -lxml2 -lpcre -lm -lgc -lpthread /usr/share/crystal/src/ext/libcrystal.a -levent -lrt -ldl -L/usr/lib -L/usr/local/lib`\r\n```\r\n\r\nAfter the installation of libxml2-dev it works\r\n\r\nI guess it a missing dependency","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/6000","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6000/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6000/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/6000/events","html_url":"https://github.com/crystal-lang/crystal/issues/6000","id":317313150,"number":6000,"title":"Catch conditionals that test always-truthy or always-falsey types and constant values, warn about code that can never be executed.","user":{"login":"BrucePerens","id":1103471,"avatar_url":"https://avatars1.githubusercontent.com/u/1103471?v=4","gravatar_id":"","url":"https://api.github.com/users/BrucePerens","html_url":"https://github.com/BrucePerens","followers_url":"https://api.github.com/users/BrucePerens/followers","following_url":"https://api.github.com/users/BrucePerens/following{/other_user}","gists_url":"https://api.github.com/users/BrucePerens/gists{/gist_id}","starred_url":"https://api.github.com/users/BrucePerens/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BrucePerens/subscriptions","organizations_url":"https://api.github.com/users/BrucePerens/orgs","repos_url":"https://api.github.com/users/BrucePerens/repos","events_url":"https://api.github.com/users/BrucePerens/events{/privacy}","received_events_url":"https://api.github.com/users/BrucePerens/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2018-04-24T16:57:28Z","updated_at":"2018-04-25T12:39:41Z","closed_at":"2018-04-25T12:39:41Z","author_association":"NONE","body":"The Crystal compiler doesn't catch conditionals where the type tested is _fully-specified_ and always truthy or always falsey. It also doesn't catch when the constant value is always truthy or falsey. Code that can never be executed is met with silence rather than a warning. Such code is useful in macros and generic classes, but is likely to be an error elsewhere.\r\n\r\nType is always truthy, tested for falsey:\r\n```\r\nif !(s = String.new())\r\n  p \"This is impossible\"\r\nend\r\n```\r\nConstant value is always falsey, tested for truthy:\r\n```\r\nif false\r\n  p \"This is impossible\"\r\nend\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5995","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5995/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5995/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5995/events","html_url":"https://github.com/crystal-lang/crystal/issues/5995","id":316943153,"number":5995,"title":"Calling private method with explicit receiver `self`","user":{"login":"straight-shoota","id":466378,"avatar_url":"https://avatars0.githubusercontent.com/u/466378?v=4","gravatar_id":"","url":"https://api.github.com/users/straight-shoota","html_url":"https://github.com/straight-shoota","followers_url":"https://api.github.com/users/straight-shoota/followers","following_url":"https://api.github.com/users/straight-shoota/following{/other_user}","gists_url":"https://api.github.com/users/straight-shoota/gists{/gist_id}","starred_url":"https://api.github.com/users/straight-shoota/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/straight-shoota/subscriptions","organizations_url":"https://api.github.com/users/straight-shoota/orgs","repos_url":"https://api.github.com/users/straight-shoota/repos","events_url":"https://api.github.com/users/straight-shoota/events{/privacy}","received_events_url":"https://api.github.com/users/straight-shoota/received_events","type":"User","site_admin":false},"labels":[{"id":20487869,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/kind:feature","name":"kind:feature","color":"84b6eb","default":false},{"id":253019637,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:compiler","name":"topic:compiler","color":"fef2c0","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-04-23T19:04:14Z","updated_at":"2018-05-08T08:22:10Z","closed_at":"2018-05-08T08:22:10Z","author_association":"CONTRIBUTOR","body":"Calling a private method with explicit receiver `self` fails with the error message `private method 'bar' called for Foo`. In general, it is correct to avoid calling a private method with explicit receiver, but in the case of `self` it would make sense to allow for an exception.\r\nHaving the possibility to use `self` as explicit receiver is particularly useful when the return value of the private method is supposed to be stored in a synonymous local var: `bar = self.bar`. A valid alternative is `bar = bar()` but using `self` is often preferred and I think it would make sense to allow calling a private method with `self`.\r\n\r\nFull example:\r\n```cr\r\nclass Foo\r\n  def foo\r\n    bar = self.bar\r\n  end\r\n  \r\n  private def bar\r\n  end\r\nend\r\n\r\nFoo.new.foo\r\n```","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5991","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5991/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5991/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5991/events","html_url":"https://github.com/crystal-lang/crystal/issues/5991","id":316631581,"number":5991,"title":"Static compilation of empty project fails on macos (OSX)","user":{"login":"sherjilozair","id":677316,"avatar_url":"https://avatars0.githubusercontent.com/u/677316?v=4","gravatar_id":"","url":"https://api.github.com/users/sherjilozair","html_url":"https://github.com/sherjilozair","followers_url":"https://api.github.com/users/sherjilozair/followers","following_url":"https://api.github.com/users/sherjilozair/following{/other_user}","gists_url":"https://api.github.com/users/sherjilozair/gists{/gist_id}","starred_url":"https://api.github.com/users/sherjilozair/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sherjilozair/subscriptions","organizations_url":"https://api.github.com/users/sherjilozair/orgs","repos_url":"https://api.github.com/users/sherjilozair/repos","events_url":"https://api.github.com/users/sherjilozair/events{/privacy}","received_events_url":"https://api.github.com/users/sherjilozair/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-23T01:15:34Z","updated_at":"2018-04-23T10:14:40Z","closed_at":"2018-04-23T10:03:46Z","author_association":"NONE","body":"This is the command I ran and the error I got:\r\n```\r\n$ crystal build --static src/something.cr\r\nld: library not found for -lcrt0.o\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nError: execution of command failed with code: 1: `cc \"${@}\" -o '/Users/sherjil/Desktop/something/something'  -rdynamic -static  -lpcre -lgc -lpthread /usr/local/Cellar/crystal-lang/0.24.2_1/src/ext/libcrystal.a -levent -liconv -ldl -L/usr/lib -L/usr/local/lib`\r\n```\r\n\r\nI did a bit of googling, and it seems macos doesn't provide a static library for `crt0.o`, which is causing this problem.\r\n","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5989","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5989/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5989/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5989/events","html_url":"https://github.com/crystal-lang/crystal/issues/5989","id":316599165,"number":5989,"title":"Abstract methods with &block can not be implemented","user":{"login":"vladfaust","id":7955682,"avatar_url":"https://avatars2.githubusercontent.com/u/7955682?v=4","gravatar_id":"","url":"https://api.github.com/users/vladfaust","html_url":"https://github.com/vladfaust","followers_url":"https://api.github.com/users/vladfaust/followers","following_url":"https://api.github.com/users/vladfaust/following{/other_user}","gists_url":"https://api.github.com/users/vladfaust/gists{/gist_id}","starred_url":"https://api.github.com/users/vladfaust/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladfaust/subscriptions","organizations_url":"https://api.github.com/users/vladfaust/orgs","repos_url":"https://api.github.com/users/vladfaust/repos","events_url":"https://api.github.com/users/vladfaust/events{/privacy}","received_events_url":"https://api.github.com/users/vladfaust/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-22T17:54:30Z","updated_at":"2018-04-25T21:56:02Z","closed_at":"2018-04-25T21:56:02Z","author_association":"NONE","body":"```crystal\r\nabstract class Foo\r\n  abstract def wrap(foo, &block)\r\nend\r\n\r\nclass Bar < Foo\r\n  def wrap(foo, &block)\r\n    yield foo\r\n  end\r\nend\r\n```\r\n\r\n```\r\nError in test.cr:2: abstract `def Foo#wrap(foo, &block)` must be implemented by Bar\r\n\r\n  abstract def wrap(foo, &block)\r\n               ^~~~\r\n```\r\n\r\nI'm not sure if that's intended...","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5987","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5987/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5987/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5987/events","html_url":"https://github.com/crystal-lang/crystal/issues/5987","id":316590602,"number":5987,"title":"CSV.build hardcodes default separator","user":{"login":"rsiddle","id":18415,"avatar_url":"https://avatars2.githubusercontent.com/u/18415?v=4","gravatar_id":"","url":"https://api.github.com/users/rsiddle","html_url":"https://github.com/rsiddle","followers_url":"https://api.github.com/users/rsiddle/followers","following_url":"https://api.github.com/users/rsiddle/following{/other_user}","gists_url":"https://api.github.com/users/rsiddle/gists{/gist_id}","starred_url":"https://api.github.com/users/rsiddle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rsiddle/subscriptions","organizations_url":"https://api.github.com/users/rsiddle/orgs","repos_url":"https://api.github.com/users/rsiddle/repos","events_url":"https://api.github.com/users/rsiddle/events{/privacy}","received_events_url":"https://api.github.com/users/rsiddle/received_events","type":"User","site_admin":false},"labels":[{"id":386560387,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/community:newcomer","name":"community:newcomer","color":"C0FF24","default":false},{"id":530992188,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/community:to-implement","name":"community:to-implement","color":"e99695","default":false},{"id":20487869,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/kind:feature","name":"kind:feature","color":"84b6eb","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-22T15:58:16Z","updated_at":"2018-04-25T05:59:26Z","closed_at":"2018-04-25T05:59:26Z","author_association":"NONE","body":"The character separated value builder takes a [comma by default](https://github.com/crystal-lang/crystal/blob/4f9ed8d03208dd0db33993c5a6fa6753bc1cf91e/src/csv/builder.cr#L89).\r\n\r\nIt would be useful to have an option, similar to [CSV.new](https://github.com/crystal-lang/crystal/blob/ccf46c095a7e10cb120d4d04c96333858be4aaa2/src/csv.cr#L176) whereby the programmer can specify the `DEFAULT_SEPARATOR`.","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5986","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5986/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5986/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5986/events","html_url":"https://github.com/crystal-lang/crystal/issues/5986","id":316582747,"number":5986,"title":"Cannot deserialize generic Arrays with JSON/YAML","user":{"login":"colonlc","id":13833431,"avatar_url":"https://avatars1.githubusercontent.com/u/13833431?v=4","gravatar_id":"","url":"https://api.github.com/users/colonlc","html_url":"https://github.com/colonlc","followers_url":"https://api.github.com/users/colonlc/followers","following_url":"https://api.github.com/users/colonlc/following{/other_user}","gists_url":"https://api.github.com/users/colonlc/gists{/gist_id}","starred_url":"https://api.github.com/users/colonlc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colonlc/subscriptions","organizations_url":"https://api.github.com/users/colonlc/orgs","repos_url":"https://api.github.com/users/colonlc/repos","events_url":"https://api.github.com/users/colonlc/events{/privacy}","received_events_url":"https://api.github.com/users/colonlc/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-04-22T14:16:26Z","updated_at":"2018-04-23T10:30:54Z","closed_at":"2018-04-23T10:30:54Z","author_association":"NONE","body":"Crystal 0.24.2 (2018-03-19)\r\n\r\nLLVM: 6.0.0\r\nDefault target: x86_64-pc-linux-gnu\r\n\r\nIt is not possible to deserialize a generic type with the stdlib JSON/YAML mappings.\r\nThis is due to missing type information/labeling in the serialized form. If I try to deserialize a class with a generic array property for instance, this happen
474c
s:\r\n\r\n(similar error with yaml instead of json)\r\n[Playground](https://play.crystal-lang.org/#/r/3x48)\r\n```crystal\r\nrequire \"json\"\r\nclass A\r\n  def initialize(@arr : Array(B)); end\r\n  JSON.mapping({arr: Array(B)})\r\nend\r\n\r\nabstract class B; end\r\n\r\nclass C < B\r\n  def initialize(@x : Int32); end\r\n  JSON.mapping({x: Int32})\r\nend\r\n\r\nclass D < B\r\n  def initialize(@x : String); end\r\n  JSON.mapping({x: String})\r\nend\r\n\r\na = A.new([C.new(2), D.new(\"foo\")])\r\nputs A.from_json(a.to_json).to_json\r\n```\r\nError:\r\n```\r\nError in line 21: instantiating 'A:Class#from_json(String)'\r\n\r\nin /usr/lib/crystal/json/from_json.cr:13: instantiating 'new(JSON::PullParser)'\r\n\r\n  new parser\r\n  ^~~\r\n\r\nin line 4: expanding macro\r\n\r\nin macro 'mapping' /usr/lib/crystal/json/mapping.cr:63, line 45:\r\n\r\n   1.     \r\n   2.       \r\n   3.     \r\n   4. \r\n   5.     \r\n   6.       @arr : Array(B) \r\n   7. \r\n   8.       \r\n   9.         def arr=(_arr : Array(B) )\r\n  10.           @arr = _arr\r\n  11.         end\r\n  12.       \r\n  13. \r\n  14.       \r\n  15.         def arr\r\n  16.           @arr\r\n  17.         end\r\n  18.       \r\n  19. \r\n  20.       \r\n  21.     \r\n  22. \r\n  23.     def initialize(__temp_23 : ::JSON::PullParser)\r\n  24.       \r\n  25.         __temp_24 = nil\r\n  26.         __temp_25 = false\r\n  27.       \r\n  28. \r\n  29.       __temp_26 = __temp_23.location\r\n  30.       __temp_23.read_begin_object\r\n  31.       while __temp_23.kind != :end_object\r\n  32.         __temp_27 = __temp_23.location\r\n  33.         key = __temp_23.read_object_key\r\n  34.         case key\r\n  35.         \r\n  36.           when \"arr\"\r\n  37.             __temp_25 = true\r\n  38. \r\n  39.             __temp_24 =\r\n  40.               \r\n  41. \r\n  42.               \r\n  43. \r\n  44.               \r\n> 45.                 Array(B).new(__temp_23)\r\n  46.               \r\n  47. \r\n  48.               \r\n  49. \r\n  50.             \r\n  51. \r\n  52.         \r\n  53.         else\r\n  54.           \r\n  55.             __temp_23.skip\r\n  56.           \r\n  57.         end\r\n  58.       end\r\n  59.       __temp_23.read_next\r\n  60. \r\n  61.       \r\n  62.         \r\n  63.           if __temp_24.nil? && !__temp_25 && !::Union(Array(B)).nilable?\r\n  64.             raise ::JSON::ParseException.new(\"Missing json attribute: arr\", *__temp_26)\r\n  65.           end\r\n  66.         \r\n  67.       \r\n  68. \r\n  69.       \r\n  70.         \r\n  71.           @arr = (__temp_24).as(Array(B))\r\n  72.         \r\n  73.       \r\n  74. \r\n  75.       \r\n  76.         \r\n  77.       \r\n  78.     end\r\n  79. \r\n  80.     def to_json(json : ::JSON::Builder)\r\n  81.       json.object do\r\n  82.         \r\n  83.           _arr = @arr\r\n  84. \r\n  85.           \r\n  86.             unless _arr.nil?\r\n  87.           \r\n  88. \r\n  89.             json.field(\"arr\") do\r\n  90.               \r\n  91. \r\n  92.               \r\n  93.                 _arr.to_json(json)\r\n  94.               \r\n  95. \r\n  96.               \r\n  97.             end\r\n  98. \r\n  99.           \r\n 100.             end\r\n 101.           \r\n 102.         \r\n 103.       end\r\n 104.     end\r\n 105.   \r\n\r\ninstantiating 'Array(B):Class#new(JSON::PullParser)'\r\nin /usr/lib/crystal/json/from_json.cr:103: instantiating 'new(JSON::PullParser)'\r\n\r\n  new(pull) do |element|\r\n  ^~~\r\n\r\nin /usr/lib/crystal/json/from_json.cr:110: instantiating 'JSON::PullParser#read_array()'\r\n\r\n  pull.read_array do\r\n       ^~~~~~~~~~\r\n\r\nin /usr/lib/crystal/json/from_json.cr:110: instantiating 'JSON::PullParser#read_array()'\r\n\r\n  pull.read_array do\r\n       ^~~~~~~~~~\r\n\r\nin /usr/lib/crystal/json/from_json.cr:111: wrong number of arguments for 'B.new' (given 1, expected 0)\r\nOverloads are:\r\n - Reference.new()\r\n\r\n    yield T.new(pull)\r\n            ^~~\r\n```\r\n\r\nI consider this behaviour wrong. It tries to instantiate B, which is not even possible due to its abstractness even though it should instantiate a C and a D from the serialized data.\r\nThis could only be worked around with a custom written deserialization method which then checks the properties and according to that chooses the correct subclasses to be instantiated.\r\n\r\nMy suggestion: Include type information in JSON/YAML mappings!","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5985","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5985/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5985/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5985/events","html_url":"https://github.com/crystal-lang/crystal/issues/5985","id":316554086,"number":5985,"title":"dyld: Library not loaded: /usr/local/opt/bdw-gc/lib/libgc.2.dylib when launching binary","user":{"login":"Qwerp-Derp","id":14177193,"avatar_url":"https://avatars3.githubusercontent.com/u/14177193?v=4","gravatar_id":"","url":"https://api.github.com/users/Qwerp-Derp","html_url":"https://github.com/Qwerp-Derp","followers_url":"https://api.github.com/users/Qwerp-Derp/followers","following_url":"https://api.github.com/users/Qwerp-Derp/following{/other_user}","gists_url":"https://api.github.com/users/Qwerp-Derp/gists{/gist_id}","starred_url":"https://api.github.com/users/Qwerp-Derp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Qwerp-Derp/subscriptions","organizations_url":"https://api.github.com/users/Qwerp-Derp/orgs","repos_url":"https://api.github.com/users/Qwerp-Derp/repos","events_url":"https://api.github.com/users/Qwerp-Derp/events{/privacy}","received_events_url":"https://api.github.com/users/Qwerp-Derp/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-22T06:43:44Z","updated_at":"2018-04-26T05:11:34Z","closed_at":"2018-04-25T21:57:15Z","author_association":"NONE","body":"I installed the newest version of `crystal`, `0.24.2_2`, via Homebrew on Mac OS X High Sierra. This bug will trigger with any binary program as soon as you launch the program:\r\n\r\nProgram:\r\n\r\n```\r\nputs 1\r\n```\r\n\r\nTerminal commands:\r\n\r\n```\r\ncrystal build program.cr\r\n./program\r\n```\r\n\r\nError:\r\n\r\n```\r\ndyld: Library not loaded: /usr/local/opt/bdw-gc/lib/libgc.2.dylib\r\n  Referenced from: {location of file}/./program\r\n  Reason: image not found\r\nAbort trap: 6\r\n```\r\n\r\nThe problem is that the `dylib` file is called `libgc.1.dylib` instead of `libgc.2.dylib`, but I'm not sure how to fix that, and simply renaming the dylib file doesn't seem like a good option.","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5982","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5982/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5982/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5982/events","html_url":"https://github.com/crystal-lang/crystal/issues/5982","id":316528617,"number":5982,"title":"Covariance of Method Return Types?","user":{"login":"timscott","id":118409,"avatar_url":"https://avatars1.githubusercontent.com/u/118409?v=4","gravatar_id":"","url":"https://api.github.com/users/timscott","html_url":"https://github.com/timscott","followers_url":"https://api.github.com/users/timscott/followers","following_url":"https://api.github.com/users/timscott/following{/other_user}","gists_url":"https://api.github.com/users/timscott/gists{/gist_id}","starred_url":"https://api.github.com/users/timscott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/timscott/subscriptions","organizations_url":"https://api.github.com/users/timscott/orgs","repos_url":"https://api.github.com/users/timscott/repos","events_url":"https://api.github.com/users/timscott/events{/privacy}","received_events_url":"https://api.github.com/users/timscott/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-21T21:54:29Z","updated_at":"2018-04-21T22:00:09Z","closed_at":"2018-04-21T22:00:09Z","author_association":"NONE","body":"_This is probably already reported, but I'm not clever enough to find the exact issue._\r\n\r\nGiven two classes:\r\n\r\n```crystal\r\nclass Foo\r\nend\r\n\r\nclass Bar < Foo\r\nend\r\n```\r\n\r\nThis compiles as expected:\r\n\r\n```crystal\r\ndef do_it(input : Array(Foo))\r\n  input\r\nend\r\n\r\ndo_it(Array(Bar).new)\r\n```\r\n\r\nThis fails with `type must be Array(Foo), not Array(Bar)`\r\n\r\n```crystal\r\ndef do_it_again() : Array(Foo)\r\n  Array(Bar).new\r\nend\r\n\r\ndo_it_again()\r\n```\r\n\r\nIt's unclear why covariance is allowed in the method arguments but not the return type. Seems like it must be a bug.","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5979","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5979/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5979/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5979/events","html_url":"https://github.com/crystal-lang/crystal/issues/5979","id":316457552,"number":5979,"title":"Can't format `NamedTuple(foo: Int32 bar: Bool)`","user":{"login":"bew","id":9730330,"avatar_url":"https://avatars1.githubusercontent.com/u/9730330?v=4","gravatar_id":"","url":"https://api.github.com/users/bew","html_url":"https://github.com/bew","followers_url":"https://api.github.com/users/bew/followers","following_url":"https://api.github.com/users/bew/following{/other_user}","gists_url":"https://api.github.com/users/bew/gists{/gist_id}","starred_url":"https://api.github.com/users/bew/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bew/subscriptions","organizations_url":"https://api.github.com/users/bew/orgs","repos_url":"https://api.github.com/users/bew/repos","events_url":"https://api.github.com/users/bew/events{/privacy}","received_events_url":"https://api.github.com/users/bew/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-21T03:29:16Z","updated_at":"2018-04-21T15:49:18Z","closed_at":"2018-04-21T15:49:18Z","author_association":"CONTRIBUTOR","body":"The formatter can't format the following code: (@MakeNowJust :smiley:)\r\n```cr\r\np NamedTuple(foo: Int32 bar: Bool).types\r\n```\r\n(there is no comma and it compiles! https://carc.in/#/r/3wvz)\r\n\r\n---\r\nNOTE: This syntax only works for the generic type, not in actual named tuples.\r\nI think the syntax can be confusing, I'd suggest to remove it (by making the comma mandatory).\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5966","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5966/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5966/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5966/events","html_url":"https://github.com/crystal-lang/crystal/issues/5966","id":315898764,"number":5966,"title":"Macros: ending comma incorrectly required in multi-line arguments","user":{"login":"j8r","id":6562667,"avatar_url":"https://avatars0.githubusercontent.com/u/6562667?v=4","gravatar_id":"","url":"https://api.github.com/users/j8r","html_url":"https://github.com/j8r","followers_url":"https://api.github.com/users/j8r/followers","following_url":"https://api.github.com/users/j8r/following{/other_user}","gists_url":"https://api.github.com/users/j8r/gists{/gist_id}","starred_url":"https://api.github.com/users/j8r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/j8r/subscriptions","organizations_url":"https://api.github.com/users/j8r/orgs","repos_url":"https://api.github.com/users/j8r/repos","events_url":"https://api.github.com/users/j8r/events{/privacy}","received_events_url":"https://api.github.com/users/j8r/received_events","type":"User","site_admin":false},"labels":[{"id":20487867,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/kind:bug","name":"kind:bug","color":"fc2929","default":false},{"id":253019637,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:compiler","name":"topic:compiler","color":"fef2c0","default":false},{"id":562537508,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:parser","name":"topic:parser","color":"fef2c0","default":false}],"state":"closed","locked":false,"assignee":{"login":"asterite","id":209371,"avatar_url":"https://avatars0.githubusercontent.com/u/209371?v=4","gravatar_id":"","url":"https://api.github.com/users/asterite","html_url":"https://github.com/asterite","followers_url":"https://api.github.com/users/asterite/followers","following_url":"https://api.github.com/users/asterite/following{/other_user}","gists_url":"https://api.github.com/users/asterite/gists{/gist_id}","starred_url":"https://api.github.com/users/asterite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asterite/subscriptions","organizations_url":"https://api.github.com/users/asterite/orgs","repos_url":"https://api.github.com/users/asterite/repos","events_url":"https://api.github.com/users/asterite/events{/privacy}","received_events_url":"https://api.github.com/users/asterite/received_events","type":"User","site_admin":false},"assignees":[{"login":"asterite","id":209371,"avatar_url":"https://avatars0.githubusercontent.com/u/209371?v=4","gravatar_id":"","url":"https://api.github.com/users/asterite","html_url":"https://github.com/asterite","followers_url":"https://api.github.com/users/asterite/followers","following_url":"https://api.github.com/users/asterite/following{/other_user}","gists_url":"https://api.github.com/users/asterite/gists{/gist_id}","starred_url":"https://api.github.com/users/asterite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asterite/subscriptions","organizations_url":"https://api.github.com/users/asterite/orgs","repos_url":"https://api.github.com/users/asterite/repos","events_url":"https://api.github.com/users/asterite/events{/privacy}","received_events_url":"https://api.github.com/users/asterite/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2018-04-19T14:18:39Z","updated_at":"2018-05-02T01:25:20Z","closed_at":"2018-05-02T01:25:20Z","author_association":"CONTRIBUTOR","body":"This following code fails without a comma after `a = 0`.\r\nWhen we add the missing comma, running the formatter `crystal tool format` removes it (tested in master):\r\n\r\n```crystal\r\nmacro test(\r\n  a = 0\r\n)\r\nend\r\n```\r\n`Syntax error in test.cr:2: unexpected token: NEWLINE (expected ',' or ')')`\r\n\r\nNo problems when not setting defaut values for arguments, or all arguments is in one line.\r\n\r\nThere are two options:\r\n1. keep a similar behavior as `def` - make `macro` works without an ending comma.\r\n2. enforce an ending comma","score":1.0},{"url":"https://api.github.com/repos/crystal-lang/crystal/issues/5965","repository_url":"https://api.github.com/repos/crystal-lang/crystal","labels_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5965/labels{/name}","comments_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5965/comments","events_url":"https://api.github.com/repos/crystal-lang/crystal/issues/5965/events","html_url":"https://github.com/crystal-lang/crystal/issues/5965","id":315837049,"number":5965,"title":"Unquoted symbol literals should allow equals sign (=) as last character","user":{"login":"straight-shoota","id":466378,"avatar_url":"https://avatars0.githubusercontent.com/u/466378?v=4","gravatar_id":"","url":"https://api.github.com/users/straight-shoota","html_url":"https://github.com/straight-shoota","followers_url":"https://api.github.com/users/straight-shoota/followers","following_url":"https://api.github.com/users/straight-shoota/following{/other_user}","gists_url":"https://api.github.com/users/straight-shoota/gists{/gist_id}","starred_url":"https://api.github.com/users/straight-shoota/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/straight-shoota/subscriptions","organizations_url":"https://api.github.com/users/straight-shoota/orgs","repos_url":"https://api.github.com/users/straight-shoota/repos","events_url":"https://api.github.com/users/straight-shoota/events{/privacy}","received_events_url":"https://api.github.com/users/straight-shoota/received_events","type":"User","site_admin":false},"labels":[{"id":20487869,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/kind:feature","name":"kind:feature","color":"84b6eb","default":false},{"id":562537508,"url":"https://api.github.com/repos/crystal-lang/crystal/labels/topic:parser","name":"topic:parser","color":"fef2c0","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-19T11:30:06Z","updated_at":"2018-04-22T19:20:15Z","closed_at":"2018-04-22T19:20:15Z","author_association":"CONTRIBUTOR","body":"Generally, unquoted symbol literals follow mostly the same rules as variable and methods names. But `:foo=` is not a valid symbol (`unexpected token: =`). I'm not sure if there is a particular reason for not allowing equals sign in a symbol literal, but I can't think of any problems with that. It would be nice to add this for completeness and ease of use, for example with setter delegation (see #5964).\r\n\r\nIn Ruby, `:foo=` is a valid symbol.","score":1.0}]}
0

