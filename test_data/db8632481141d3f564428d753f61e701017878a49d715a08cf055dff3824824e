HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 14 Apr 2018 20:20:23 GMT
Link: <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=4>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CC5E:148B:1BBFAF9:3C75D92:5AD26286
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 12
X-Ratelimit-Reset: 1523737274
X-Runtime-Rack: 0.334905
X-Xss-Protection: 1; mode=block

8000
{"total_count":99,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/actix/actix-web/issues/181","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/181/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/181/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/181/events","html_url":"https://github.com/actix/actix-web/issues/181","id":314279511,"number":181,"title":"Support custom handling of extractor errors","user":{"login":"connec","id":160652,"avatar_url":"https://avatars2.githubusercontent.com/u/160652?v=4","gravatar_id":"","url":"https://api.github.com/users/connec","html_url":"https://github.com/connec","followers_url":"https://api.github.com/users/connec/followers","following_url":"https://api.github.com/users/connec/following{/other_user}","gists_url":"https://api.github.com/users/connec/gists{/gist_id}","starred_url":"https://api.github.com/users/connec/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/connec/subscriptions","organizations_url":"https://api.github.com/users/connec/orgs","repos_url":"https://api.github.com/users/connec/repos","events_url":"https://api.github.com/users/connec/events{/privacy}","received_events_url":"https://api.github.com/users/connec/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-13T23:50:28Z","updated_at":"2018-04-14T11:29:28Z","closed_at":"2018-04-14T02:32:25Z","author_association":"NONE","body":"Example:\r\n\r\n```rust\r\nfn main() {\r\n    ...\r\n    App::new().resource(\"/items\", |r| r.with(create_item))\r\n    ...\r\n}\r\n\r\n#[derive(Deserialize)]\r\nstruct Item {\r\n    ...\r\n}\r\n\r\nfn create_item(item: Json<Item>) -> HttpResponse {\r\n    ...\r\n}\r\n```\r\n\r\nCurrently, if there is a deserialization error when attempting to extract an `Item` (e.g. because the JSON payload has missing fields, or is the wrong type) an empty HTTP 400 Bad Request response will be returned due to the impl of [`ResponseError for DeError`](https://github.com/actix/actix-web/blob/master/src/error.rs#L122).\r\n\r\nWhilst this is sufficient for experimental or internal APIs, it would be useful to be able to customise or override how errors are handled. For myself, I wanted to include the text of the serialization error in the response body so consumers can debug their bad requests.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/180","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/180/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/180/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/180/events","html_url":"https://github.com/actix/actix-web/issues/180","id":314256855,"number":180,"title":"MovedPermanenty -> MovedPermanently","user":{"login":"Unmoving","id":16563063,"avatar_url":"https://avatars0.githubusercontent.com/u/16563063?v=4","gravatar_id":"","url":"https://api.github.com/users/Unmoving","html_url":"https://github.com/Unmoving","followers_url":"https://api.github.com/users/Unmoving/followers","following_url":"https://api.github.com/users/Unmoving/following{/other_user}","gists_url":"https://api.github.com/users/Unmoving/gists{/gist_id}","starred_url":"https://api.github.com/users/Unmoving/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Unmoving/subscriptions","organizations_url":"https://api.github.com/users/Unmoving/orgs","repos_url":"https://api.github.com/users/Unmoving/repos","events_url":"https://api.github.com/users/Unmoving/events{/privacy}","received_events_url":"https://api.github.com/users/Unmoving/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-13T21:33:04Z","updated_at":"2018-04-13T21:36:24Z","closed_at":"2018-04-13T21:36:24Z","author_association":"NONE","body":"https://github.com/actix/actix-web/blob/22c776f46ea169a29d5a34572d71a966db25044b/src/httpcodes.rs#L205\r\n\r\nThere is a typo in there:\r\n\r\n `STATIC_RESP!(MovedPermanenty, StatusCode::MOVED_PERMANENTLY);`\r\n\r\nShould be `MovedPermanently` (MovedPermanent**l**y)","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/179","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/179/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/179/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/179/events","html_url":"https://github.com/actix/actix-web/issues/179","id":314255945,"number":179,"title":".with(json) always returning 404","user":{"login":"Unmoving","id":16563063,"avatar_url":"https://avatars0.githubusercontent.com/u/16563063?v=4","gravatar_id":"","url":"https://api.github.com/users/Unmoving","html_url":"https://github.com/Unmoving","followers_url":"https://api.github.com/users/Unmoving/followers","following_url":"https://api.github.com/users/Unmoving/following{/other_user}","gists_url":"https://api.github.com/users/Unmoving/gists{/gist_id}","starred_url":"https://api.github.com/users/Unmoving/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Unmoving/subscriptions","organizations_url":"https://api.github.com/users/Unmoving/orgs","repos_url":"https://api.github.com/users/Unmoving/repos","events_url":"https://api.github.com/users/Unmoving/events{/privacy}","received_events_url":"https://api.github.com/users/Unmoving/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-13T21:29:28Z","updated_at":"2018-04-13T21:48:27Z","closed_at":"2018-04-13T21:41:01Z","author_association":"NONE","body":"Trying out the minimal example from `0.5`, just slightly adapted:\r\n\r\n```\r\n#[macro_use]\r\nextern crate lazy_static;\r\nextern crate regex;\r\n#[macro_use]\r\nextern crate slog;\r\nextern crate slog_term;\r\n\r\nextern crate actix;\r\nextern crate actix_web;\r\nextern crate http;\r\nextern crate bincode;\r\nextern crate serde_json;\r\n\r\nextern crate futures;\r\nextern crate diesel;\r\n\r\nuse actix_web::{\r\n   Json,\r\n   Result,\r\n   dev::Handler,\r\n};\r\n\r\nfn main() -> () {\r\n    actix_web::server::new(|| actix_web::App::new().resource(\r\n      \"/api/json\",\r\n      |r| r.method(actix_web::http::Method::POST).with(json))\r\n   ).bind(\"localhost:8000\").expect(\"Cannot bind to localhost:8000\")\r\n       .run();\r\n}\r\n\r\nfn json(req: Json<serde_json::Value>) -> Result<String> {\r\n   println!(\"Here\");\r\n   Ok(format! {\"Request received\"})\r\n}\r\n```\r\n\r\nNo matter which json I send to `localhost:8000/api/json` I always get a \r\n> 400 Bad Request\r\n\r\nand **no** \"Here\" printed on the std::out :(\r\n\r\nWhat am I doing wrong?\r\n\r\n[dependencies] of `Cargo.toml`:\r\n```\r\ndotenv = \"0.10\"\r\nregex = \"0.2\"\r\nbincode = \"^1.0\"\r\n\r\nlazy_static = \"1.0.0\"\r\nserde = \"^1.0\"\r\nserde_derive = \"^1.0\"\r\nserde_json = \"^1.0\"\r\n\r\nslog = \"2.1\"\r\nslog-term = \"2.3\"\r\n\r\nactix = \"^0.5\"\r\nactix-web = \"^0.5\"\r\nhttp = \"^0.1.4\"\r\nfutures = \"0.1.17\"\r\n\r\ndiesel = { version = \"1.1\", features = [\"sqlite\"] }\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/177","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/177/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/177/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/177/events","html_url":"https://github.com/actix/actix-web/issues/177","id":313961455,"number":177,"title":"StaticFiles unable to find files in folder with whitespace in its name","user":{"login":"limira","id":20672976,"avatar_url":"https://avatars3.githubusercontent.com/u/20672976?v=4","gravatar_id":"","url":"https://api.github.com/users/limira","html_url":"https://github.com/limira","followers_url":"https://api.github.com/users/limira/followers","following_url":"https://api.github.com/users/limira/following{/other_user}","gists_url":"https://api.github.com/users/limira/gists{/gist_id}","starred_url":"https://api.github.com/users/limira/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/limira/subscriptions","organizations_url":"https://api.github.com/users/limira/orgs","repos_url":"https://api.github.com/users/limira/repos","events_url":"https://api.github.com/users/limira/events{/privacy}","received_events_url":"https://api.github.com/users/limira/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-13T03:57:03Z","updated_at":"2018-04-13T17:13:47Z","closed_at":"2018-04-13T17:13:47Z","author_association":"NONE","body":"Actix-web version: 0.5.0\r\n\r\nThis is an extract from log:\r\n\r\n    \"GET /glyphs/Open%20Sans%20Regular/256-511.pbf HTTP/1.1\" 404 0 \"http://localhost:3000/\"\r\n    ...\r\n    ... Error occured during request handling: No such file or directory\r\n\r\nI double-checked that the required folder/file exists (of course, it has whitespace instead of %20). Other files in non-whitespace-folder have been served successfully.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/175","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/175/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/175/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/175/events","html_url":"https://github.com/actix/actix-web/issues/175","id":313924234,"number":175,"title":"crate a new Examples repo","user":{"login":"krircc","id":18028295,"avatar_url":"https://avatars0.githubusercontent.com/u/18028295?v=4","gravatar_id":"","url":"https://api.github.com/users/krircc","html_url":"https://github.com/krircc","followers_url":"https://api.github.com/users/krircc/followers","following_url":"https://api.github.com/users/krircc/following{/other_user}","gists_url":"https://api.github.com/users/krircc/gists{/gist_id}","starred_url":"https://api.github.com/users/krircc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krircc/subscriptions","organizations_url":"https://api.github.com/users/krircc/orgs","repos_url":"https://api.github.com/users/krircc/repos","events_url":"https://api.github.com/users/krircc/events{/privacy}","received_events_url":"https://api.github.com/users/krircc/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2018-04-12T23:46:50Z","updated_at":"2018-04-13T05:21:11Z","closed_at":"2018-04-13T00:11:10Z","author_association":"CONTRIBUTOR","body":"I think something should change, after i update [Rust-webapp-starter](https://github.com/OUISRC/Rust-webapp-starter) to actix-web V0.5, It's more easier now, it's time for people to try it widely.\r\n\r\nnow examples at actix-web is good for maintenance than users, it dep on master not release and change everytime. after  actix-web V0.5, I think we should move things from master to release. It should be more stable for people to try it. we should recommend people use release everywhere(repo, office..etc).  \r\n\r\nalso It's more easier for PRs","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/174","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/174/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/174/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/174/events","html_url":"https://github.com/actix/actix-web/issues/174","id":313845755,"number":174,"title":"StaticFiles generate a lot of threads","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-12T18:51:05Z","updated_at":"2018-04-12T22:50:55Z","closed_at":"2018-04-12T22:50:55Z","author_association":"COLLABORATOR","body":"StaticFiles generate a lot of threads, especially combined with the fact that application\r\nfactory get called for each worker thread, this generate a lot of threads","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/169","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/169/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/169/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/169/events","html_url":"https://github.com/actix/actix-web/issues/169","id":312440456,"number":169,"title":"Allow multiple apps to have different State","user":{"login":"adwhit","id":3189554,"avatar_url":"https://avatars3.githubusercontent.com/u/3189554?v=4","gravatar_id":"","url":"https://api.github.com/users/adwhit","html_url":"https://github.com/adwhit","followers_url":"https://api.github.com/users/adwhit/followers","following_url":"https://api.github.com/users/adwhit/following{/other_user}","gists_url":"https://api.github.com/users/adwhit/gists{/gist_id}","starred_url":"https://api.github.com/users/adwhit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adwhit/subscriptions","organizations_url":"https://api.github.com/users/adwhit/orgs","repos_url":"https://api.github.com/users/adwhit/repos","events_url":"https://api.github.com/users/adwhit/events{/privacy}","received_events_url":"https://api.github.com/users/adwhit/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-09T08:33:35Z","updated_at":"2018-04-09T15:45:59Z","closed_at":"2018-04-09T14:53:09Z","author_association":"CONTRIBUTOR","body":"It would be nice if it were possible to run two apps with different state e.g.\r\n```rust\r\nstruct MyState;\r\nlet app1 = App::new()\r\n    .prefix(\"/stateless\")\r\n    .route(\"/\", http::Method::GET, |_| HttpResponse::Ok());\r\nlet app2 = App::with_state(MyState)\r\n    .prefix(\"/stateful\")\r\n    .route(\"/\", http::Method::GET, |_| HttpResponse::Ok());\r\n// attempt make vec of IntoHttpHandler trait objects\r\nlet apps: Vec<Box<IntoHttpHandler<Handler=???>>> = vec![Box::new(app1), Box::new(app2)];\r\n//                                        ^^^ What goes here?\r\n\r\nlet server = server::new(|| apps);\r\n// ...\r\n```\r\nUnfortunately the State is part of the type of HttpApplication so it isn't possible to create an iterator of apps with different state. I think this really limits the usefulness of using multiple apps as they can't be properly isolated from each other.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/168","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/168/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/168/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/168/events","html_url":"https://github.com/actix/actix-web/issues/168","id":312329352,"number":168,"title":"prefix and static file serving interact badly","user":{"login":"adwhit","id":3189554,"avatar_url":"https://avatars3.githubusercontent.com/u/3189554?v=4","gravatar_id":"","url":"https://api.github.com/users/adwhit","html_url":"https://github.com/adwhit","followers_url":"https://api.github.com/users/adwhit/followers","following_url":"https://api.github.com/users/adwhit/following{/other_user}","gists_url":"https://api.github.com/users/adwhit/gists{/gist_id}","starred_url":"https://api.github.com/users/adwhit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adwhit/subscriptions","organizations_url":"https://api.github.com/users/adwhit/orgs","repos_url":"https://api.github.com/users/adwhit/repos","events_url":"https://api.github.com/users/adwhit/events{/privacy}","received_events_url":"https://api.github.com/users/adwhit/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-08T18:46:39Z","updated_at":"2018-04-10T17:16:38Z","closed_at":"2018-04-10T17:16:38Z","author_association":"CONTRIBUTOR","body":"Take the following app:\r\n```rust\r\nApp::new()\r\n    .prefix(\"/public\")\r\n    .handler(\"/\", fs::StaticFiles::new(\"some/folder\")\r\n             .index_file(\"index.html\"));\r\n```\r\nTest with httpie:\r\n```\r\n➜  ~ http :8000/public/\r\nHTTP/1.1 302 Found\r\nlocation: /public/index.html\r\n\r\n➜  ~ http :8000/public \r\nHTTP/1.1 302 Found\r\nlocation: /publicindex.html\r\n```\r\nThe second test generates an incorrect redirect.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/167","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/167/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/167/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/167/events","html_url":"https://github.com/actix/actix-web/issues/167","id":312314465,"number":167,"title":"Expose `max_age` for `CookieSessionBackendBuilder`","user":{"login":"brandur","id":96890,"avatar_url":"https://avatars1.githubusercontent.com/u/96890?v=4","gravatar_id":"","url":"https://api.github.com/users/brandur","html_url":"https://github.com/brandur","followers_url":"https://api.github.com/users/brandur/followers","following_url":"https://api.github.com/users/brandur/following{/other_user}","gists_url":"https://api.github.com/users/brandur/gists{/gist_id}","starred_url":"https://api.github.com/users/brandur/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brandur/subscriptions","organizations_url":"https://api.github.com/users/brandur/orgs","repos_url":"https://api.github.com/users/brandur/repos","events_url":"https://api.github.com/users/brandur/events{/privacy}","received_events_url":"https://api.github.com/users/brandur/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-08T15:26:13Z","updated_at":"2018-04-08T18:46:05Z","closed_at":"2018-04-08T18:45:52Z","author_association":"NONE","body":"Currently, cookies created with `actix-web`'s built-in middleware have an invalid expiry date showing up in the distant past:\r\n\r\n![image](https://user-images.githubusercontent.com/96890/38469249-58e1dc0e-3b06-11e8-86a2-924dda76176a.png)\r\n\r\nThis should be fixed by exposing a `max_age` option for `CookieSessionBackendBuilder`. [`set_max_age`](https://docs.rs/cookie/0.10.1/cookie/struct.Cookie.html#method.set_max_age) is exposed by the underlying `cookie` Crate, so this should be fairly easy to do.\r\n\r\nBTW, @fafhrd91 any thoughts on getting a `rustfmt.toml` in place? I was going to just contribute this feature myself, but after running into some pretty nasty diffs caused by `rustfmt` save hooks activating automatically, I just opened this issue instead :)","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/166","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/166/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/166/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/166/events","html_url":"https://github.com/actix/actix-web/issues/166","id":312252963,"number":166,"title":"Getting mutable state reference when using HttpRequest::json()?","user":{"login":"spease","id":2825204,"avatar_url":"https://avatars1.githubusercontent.com/u/2825204?v=4","gravatar_id":"","url":"https://api.github.com/users/spease","html_url":"https://github.com/spease","followers_url":"https://api.github.com/users/spease/followers","following_url":"https://api.github.com/users/spease/following{/other_user}","gists_url":"https://api.github.com/users/spease/gists{/gist_id}","starred_url":"https://api.github.com/users/spease/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spease/subscriptions","organizations_url":"https://api.github.com/users/spease/orgs","repos_url":"https://api.github.com/users/spease/repos","events_url":"https://api.github.com/users/spease/events{/privacy}","received_events_url":"https://api.github.com/users/spease/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-07T23:31:32Z","updated_at":"2018-04-07T23:40:02Z","closed_at":"2018-04-07T23:40:02Z","author_association":"NONE","body":"```\r\n    req.json()                   // <- get JsonBody future\r\n       .from_err()\r\n       .and_then(|val: MyObj| {  // <- deserialized value\r\n           println!(\"==== BODY ==== {:?}\", val);\r\n           Ok(httpcodes::HttpOk.into())\r\n       }).responder()\r\n```\r\n\r\nThe problem:\r\nI have state which is retrieved with req.state() that depends on the value of the serialized JSON. However, json consumes the request object. If I gain a mutable reference before calling json(), it prevents json(). If I try to gain a mutable reference during or after json(), the object has already been consumed.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/164","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/164/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/164/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/164/events","html_url":"https://github.com/actix/actix-web/issues/164","id":312195827,"number":164,"title":"connection left open when spamming with garbage","user":{"login":"aep","id":136926,"avatar_url":"https://avatars3.githubusercontent.com/u/136926?v=4","gravatar_id":"","url":"https://api.github.com/users/aep","html_url":"https://github.com/aep","followers_url":"https://api.github.com/users/aep/followers","following_url":"https://api.github.com/users/aep/following{/other_user}","gists_url":"https://api.github.com/users/aep/gists{/gist_id}","starred_url":"https://api.github.com/users/aep/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aep/subscriptions","organizations_url":"https://api.github.com/users/aep/orgs","repos_url":"https://api.github.com/users/aep/repos","events_url":"https://api.github.com/users/aep/events{/privacy}","received_events_url":"https://api.github.com/users/aep/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-07T10:33:31Z","updated_at":"2018-04-10T17:16:59Z","closed_at":"2018-04-10T17:16:59Z","author_association":"NONE","body":"is it intentional  that the connection is left open on invalid http?\r\nFrom a production perspective this seems pretty dangerous since it at least eats up file descriptors easily during a DOS.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/162","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/162/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/162/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/162/events","html_url":"https://github.com/actix/actix-web/issues/162","id":312028742,"number":162,"title":"HttpServer with multiple un-prefixed Apps","user":{"login":"adwhit","id":3189554,"avatar_url":"https://avatars3.githubusercontent.com/u/3189554?v=4","gravatar_id":"","url":"https://api.github.com/users/adwhit","html_url":"https://github.com/adwhit","followers_url":"https://api.github.com/users/adwhit/followers","following_url":"https://api.github.com/users/adwhit/following{/other_user}","gists_url":"https://api.github.com/users/adwhit/gists{/gist_id}","starred_url":"https://api.github.com/users/adwhit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adwhit/subscriptions","organizations_url":"https://api.github.com/users/adwhit/orgs","repos_url":"https://api.github.com/users/adwhit/repos","events_url":"https://api.github.com/users/adwhit/events{/privacy}","received_events_url":"https://api.github.com/users/adwhit/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-06T15:55:22Z","updated_at":"2018-04-09T08:07:45Z","closed_at":"2018-04-09T08:07:44Z","author_association":"CONTRIBUTOR","body":"`HttpServer` can be provided with multilple `App`s like so:\r\n```rust\r\nlet app1 = App::new()...\r\nlet app2 = App::new()...\r\nlet server = HttpServer::new(|| vec![app1, app2])\r\n```\r\nThis works great when the apps have different prefixes, but if they have the same prefix then the server 'works' but the second app will not respond to any request. I think if two or more apps are provided with the same prefix, either `actix-web` should error at startup, or the routes should 'just work' as expected.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/161","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/161/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/161/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/161/events","html_url":"https://github.com/actix/actix-web/issues/161","id":311992143,"number":161,"title":"Failed to compile example from guide: unresolved import `actix_web::App`","user":{"login":"davechallis","id":208316,"avatar_url":"https://avatars3.githubusercontent.com/u/208316?v=4","gravatar_id":"","url":"https://api.github.com/users/davechallis","html_url":"https://github.com/davechallis","followers_url":"https://api.github.com/users/davechallis/followers","following_url":"https://api.github.com/users/davechallis/following{/other_user}","gists_url":"https://api.github.com/users/davechallis/gists{/gist_id}","starred_url":"https://api.github.com/users/davechallis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davechallis/subscriptions","organizations_url":"https://api.github.com/users/davechallis/orgs","repos_url":"https://api.github.com/users/davechallis/repos","events_url":"https://api.github.com/users/davechallis/events{/privacy}","received_events_url":"https://api.github.com/users/davechallis/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-06T14:14:19Z","updated_at":"2018-04-06T14:51:11Z","closed_at":"2018-04-06T14:51:10Z","author_association":"NONE","body":"The example in the guide at https://actix.github.io/actix-web/guide/qs_2.html doesn't compile against the version of actix-web specified on that page (`actix-web = \"0.4\"`), failing with:\r\n\r\n```\r\nerror[E0432]: unresolved import `actix_web::App`\r\n --> src/main.rs:2:17\r\n  |\r\n2 | use actix_web::{App, HttpRequest, HttpResponse, HttpServer};\r\n  |                 ^^^ no `App` in the root\r\n```\r\n\r\nIt looks like `App` is going to be in version 0.5 though, so I expect this error will go away once the guide is updated for 0.5 (but if that release is a long way off, could be helpful to newcomers to fix the guide).","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/159","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/159/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/159/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/159/events","html_url":"https://github.com/actix/actix-web/issues/159","id":311617642,"number":159,"title":"Add private cookie sessions","user":{"login":"adwhit","id":3189554,"avatar_url":"https://avatars3.githubusercontent.com/u/3189554?v=4","gravatar_id":"","url":"https://api.github.com/users/adwhit","html_url":"https://github.com/adwhit","followers_url":"https://api.github.com/users/adwhit/followers","following_url":"https://api.github.com/users/adwhit/following{/other_user}","gists_url":"https://api.github.com/users/adwhit/gists{/gist_id}","starred_url":"https://api.github.com/users/adwhit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adwhit/subscriptions","organizations_url":"https://api.github.com/users/adwhit/orgs","repos_url":"https://api.github.com/users/adwhit/repos","events_url":"https://api.github.com/users/adwhit/events{/privacy}","received_events_url":"https://api.github.com/users/adwhit/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-05T13:47:18Z","updated_at":"2018-04-09T19:54:16Z","closed_at":"2018-04-09T19:54:16Z","author_association":"CONTRIBUTOR","body":"At the moment, cookie-based sessions are secure but not private. This means that the client is able to view the session data, but not alter it.\r\n\r\nWhile this is usually good enough, it would be nice to enable private cookies (a feature which already exists in [cookie-rs](https://github.com/alexcrichton/cookie-rs)) so that the user can neither read nor alter session cookies.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/158","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/158/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/158/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/158/events","html_url":"https://github.com/actix/actix-web/issues/158","id":311138643,"number":158,"title":"Timeout when proxying a large request","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"
8000
assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-04T08:48:39Z","updated_at":"2018-04-05T03:25:08Z","closed_at":"2018-04-05T03:25:08Z","author_association":"NONE","body":"Not sure how to solve this one.  We're proxying a large file upload to a backend service through actix-web, and it's hitting some implicit timer somewhere:\r\n\r\n```\r\n ERROR actix_web::pipeline           > Error occured during request handling: Timeout out while waiting for response\r\n```\r\n\r\nThe client is still uploading a file at this point, so it shouldn't be timing out as the connection is still streaming through\r\n\r\nUsing the following as the `proxy` implementation:\r\n\r\n```\r\n        let mut builder = client::ClientRequest::build();\r\n\r\n        for (key, value) in req.headers() {\r\n            if key != header::CONNECTION {\r\n                builder.header(key.clone(), value.clone());\r\n            }\r\n        }\r\n\r\n        builder\r\n            .uri(&url)\r\n            .method(req.method().clone())\r\n            .body(Body::Streaming(Box::new(req.from_err())))\r\n            .unwrap()\r\n            .send()\r\n            .from_err()\r\n            .and_then(|resp| {\r\n                let mut client_response = HttpResponse::build(resp.status());\r\n\r\n                for (key, value) in resp.headers() {\r\n                    if key != header::CONTENT_LENGTH {\r\n                        client_response.header(key.clone(), value.clone());\r\n                    }\r\n                }\r\n\r\n                client_response.body(Body::Streaming(Box::new(resp.from_err())))\r\n                    .map_err(|e| e.into()) // HttpOk::build() mayb return HttpError, we need to convert it to a Error\r\n            })\r\n            .responder()\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/152","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/152/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/152/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/152/events","html_url":"https://github.com/actix/actix-web/issues/152","id":310525106,"number":152,"title":"Request time is doubled in Logger middleware","user":{"login":"bwasty","id":1647415,"avatar_url":"https://avatars3.githubusercontent.com/u/1647415?v=4","gravatar_id":"","url":"https://api.github.com/users/bwasty","html_url":"https://github.com/bwasty","followers_url":"https://api.github.com/users/bwasty/followers","following_url":"https://api.github.com/users/bwasty/following{/other_user}","gists_url":"https://api.github.com/users/bwasty/gists{/gist_id}","starred_url":"https://api.github.com/users/bwasty/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bwasty/subscriptions","organizations_url":"https://api.github.com/users/bwasty/orgs","repos_url":"https://api.github.com/users/bwasty/repos","events_url":"https://api.github.com/users/bwasty/events{/privacy}","received_events_url":"https://api.github.com/users/bwasty/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-02T16:01:45Z","updated_at":"2018-04-02T18:10:16Z","closed_at":"2018-04-02T18:10:16Z","author_association":"CONTRIBUTOR","body":"The `%T` at the end of the standard format for the logger middleware always prints twice the amount of time passed (tested with some `thread::sleep` calls).\r\n\r\nThe culprit seems to be here:\r\nhttps://github.com/actix/actix-web/blob/74d0656d27e6afd87c6a0b805eb88e581410fb38/src/middleware/logger.rs#L235-L236\r\n\r\n-> `num_nanoseconds` is the whole duration (in contrast to `std::time::Duration::subsec_nanos`).","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/151","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/151/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/151/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/151/events","html_url":"https://github.com/actix/actix-web/issues/151","id":310434653,"number":151,"title":"HttpRequest.resource() always returns a default resource in middleware","user":{"login":"lyptt","id":346710,"avatar_url":"https://avatars0.githubusercontent.com/u/346710?v=4","gravatar_id":"","url":"https://api.github.com/users/lyptt","html_url":"https://github.com/lyptt","followers_url":"https://api.github.com/users/lyptt/followers","following_url":"https://api.github.com/users/lyptt/following{/other_user}","gists_url":"https://api.github.com/users/lyptt/gists{/gist_id}","starred_url":"https://api.github.com/users/lyptt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lyptt/subscriptions","organizations_url":"https://api.github.com/users/lyptt/orgs","repos_url":"https://api.github.com/users/lyptt/repos","events_url":"https://api.github.com/users/lyptt/events{/privacy}","received_events_url":"https://api.github.com/users/lyptt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-02T09:03:14Z","updated_at":"2018-04-02T18:20:18Z","closed_at":"2018-04-02T18:20:18Z","author_association":"NONE","body":"In `HttpRequest`, when calling its `.resource()` method within middleware, it never actually finds the resource object. Instead returning a static default resource:\r\n\r\n```rust\r\n    pub fn resource(&self) -> &Resource {\r\n        let idx = self.as_ref().resource;\r\n        if idx >= 0 {\r\n            if let Some(ref router) = self.2 {\r\n                return router.get_resource(idx as usize)\r\n            }\r\n        }\r\n        &*RESOURCE // <-- always called\r\n    }\r\n```\r\n\r\nThis is with a fairly basic code sample:\r\n\r\n```rust\r\nstruct Headers;\r\nimpl<S> Middleware<S> for Headers {\r\n  fn start(&self, req: &mut HttpRequest<S>) -> Result<Started, Error> {\r\n    let resource = req.resource(); // <-- returns static resource\r\n    Ok(Started::Done)\r\n  }\r\n}\r\n\r\nfn index(req: HttpRequest) -> FutureResult<HttpResponse, Error> {\r\n  let resource = req.resource(); // <-- returns actual resource\r\n  result(Ok(HttpResponse::Ok().body(\"Hello world\")))\r\n}\r\n\r\nfn main() {\r\n  HttpServer::new(\r\n    || App::new()\r\n      .prefix(\"/api\")\r\n      .middleware(Headers)\r\n      .resource(\"/\", |r| r.method(http::Method::GET).a(index))\r\n  )\r\n    .keep_alive(30)\r\n    .bind(\"0.0.0.0:30000\")\r\n    .unwrap()\r\n    .run();\r\n}\r\n```\r\n\r\nI've verified this by debugging through the actix_web code, and also by forking the repo and hardcoding the static resource name to be something other than an empty string, then comparing the `.name()` calls between the middleware and the handler.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/149","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/149/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/149/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/149/events","html_url":"https://github.com/actix/actix-web/issues/149","id":310347945,"number":149,"title":"Configurable body size with JSON extractor","user":{"login":"tazjin","id":1552853,"avatar_url":"https://avatars1.githubusercontent.com/u/1552853?v=4","gravatar_id":"","url":"https://api.github.com/users/tazjin","html_url":"https://github.com/tazjin","followers_url":"https://api.github.com/users/tazjin/followers","following_url":"https://api.github.com/users/tazjin/following{/other_user}","gists_url":"https://api.github.com/users/tazjin/gists{/gist_id}","starred_url":"https://api.github.com/users/tazjin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tazjin/subscriptions","organizations_url":"https://api.github.com/users/tazjin/orgs","repos_url":"https://api.github.com/users/tazjin/repos","events_url":"https://api.github.com/users/tazjin/events{/privacy}","received_events_url":"https://api.github.com/users/tazjin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-04-01T19:35:15Z","updated_at":"2018-04-04T19:25:33Z","closed_at":"2018-04-04T05:28:43Z","author_association":"CONTRIBUTOR","body":"Hey,\r\n\r\nI'm playing with the new extractors on `master` and am currently a bit confused about whether it's possible to change the maximum request body size (seems to be hardcoded to 256kb) for extractor-decoded JSON bodies.\r\n\r\nIt seems like there's a [limit function](https://github.com/actix/actix-web/blob/b2e771df2cb4130889a5e45cfff97a76772639ce/src/json.rs#L175) for a related purpose, but the instance of `JsonBody` used by specifying a `Json<T>` extractor doesn't seem available to the user.\r\n\r\nIs this supported atm?\r\n\r\nThanks!","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/148","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/148/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/148/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/148/events","html_url":"https://github.com/actix/actix-web/issues/148","id":310337573,"number":148,"title":"How to ask a server to stop from a handler?","user":{"login":"artemshein","id":21080520,"avatar_url":"https://avatars3.githubusercontent.com/u/21080520?v=4","gravatar_id":"","url":"https://api.github.com/users/artemshein","html_url":"https://github.com/artemshein","followers_url":"https://api.github.com/users/artemshein/followers","following_url":"https://api.github.com/users/artemshein/following{/other_user}","gists_url":"https://api.github.com/users/artemshein/gists{/gist_id}","starred_url":"https://api.github.com/users/artemshein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/artemshein/subscriptions","organizations_url":"https://api.github.com/users/artemshein/orgs","repos_url":"https://api.github.com/users/artemshein/repos","events_url":"https://api.github.com/users/artemshein/events{/privacy}","received_events_url":"https://api.github.com/users/artemshein/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-01T16:54:11Z","updated_at":"2018-04-01T18:28:44Z","closed_at":"2018-04-01T18:28:44Z","author_association":"NONE","body":"And how to get a server actix System from a handler?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/146","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/146/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/146/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/146/events","html_url":"https://github.com/actix/actix-web/issues/146","id":310228242,"number":146,"title":"Determining which route is which from middleware","user":{"login":"lyptt","id":346710,"avatar_url":"https://avatars0.githubusercontent.com/u/346710?v=4","gravatar_id":"","url":"https://api.github.com/users/lyptt","html_url":"https://github.com/lyptt","followers_url":"https://api.github.com/users/lyptt/followers","following_url":"https://api.github.com/users/lyptt/following{/other_user}","gists_url":"https://api.github.com/users/lyptt/gists{/gist_id}","starred_url":"https://api.github.com/users/lyptt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lyptt/subscriptions","organizations_url":"https://api.github.com/users/lyptt/orgs","repos_url":"https://api.github.com/users/lyptt/repos","events_url":"https://api.github.com/users/lyptt/events{/privacy}","received_events_url":"https://api.github.com/users/lyptt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-31T09:47:45Z","updated_at":"2018-04-02T00:57:43Z","closed_at":"2018-04-02T00:57:43Z","author_association":"NONE","body":"Is it possible to identify the current route from middleware? For example some kind of identifier for the route which can be used to apply rules / handle caching / etc.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/145","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/145/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/145/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/145/events","html_url":"https://github.com/actix/actix-web/issues/145","id":310219385,"number":145,"title":"0.5 release","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-03-31T07:15:45Z","updated_at":"2018-04-10T19:17:16Z","closed_at":"2018-04-10T19:17:16Z","author_association":"COLLABORATOR","body":"new:\r\n\r\n* type-safe information extraction\r\n\r\nbreaking changes:\r\n\r\n* `HttpResponseBuilder::body()`, `.finish()`, `.json()` now returns `HttpResponse` instead of `Result`\r\n* `Method` and `StatusCode` moved to `actix_web::http` module\r\n* `NormalizePath` moved to `http` module as well\r\n* `actix_web::header` moved to a `actix_web::http::header`\r\n* `DefaultHeaders` got simplified\r\n* `StaticFiles` got simplified\r\n* `CookieSessionBackend` got simplified\r\n* `httpcodes` module is deprecated, `HttpResponse::Ok()` and other fn should be used instead\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/144","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/144/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/144/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/144/events","html_url":"https://github.com/actix/actix-web/issues/144","id":310218445,"number":144,"title":"Juniper exampe - cannot find function `new` in module `server`","user":{"login":"rofrol","id":28787,"avatar_url":"https://avatars2.githubusercontent.com/u/28787?v=4","gravatar_id":"","url":"https://api.github.com/users/rofrol","html_url":"https://github.com/rofrol","followers_url":"https://api.github.com/users/rofrol/followers","following_url":"https://api.github.com/users/rofrol/following{/other_user}","gists_url":"https://api.github.com/users/rofrol/gists{/gist_id}","starred_url":"https://api.github.com/users/rofrol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rofrol/subscriptions","organizations_url":"https://api.github.com/users/rofrol/orgs","repos_url":"https://api.github.com/users/rofrol/repos","events_url":"https://api.github.com/users/rofrol/events{/privacy}","received_events_url":"https://api.github.com/users/rofrol/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-31T06:58:01Z","updated_at":"2018-03-31T07:06:55Z","closed_at":"2018-03-31T07:06:55Z","author_association":"CONTRIBUTOR","body":"I made a copy of `example/juniper`, modified `Cargo.toml` to not depend of `actix-web` repo and run:\r\n\r\n```bash\r\n~/personal_projects/jakrom-shop/server (master)$ cargo run\r\n   Compiling juniper-example v0.1.0 (file:///Users/romanfrolow/personal_projects/jakrom-shop/server)\r\nerror[E0425]: cannot find function `new` in module `server`\r\n   --> src/main.rs:101:21\r\n    |\r\n101 |     let _ = server::new(move || {\r\n    |                     ^^^ not found in `server`\r\n\r\nerror[E0603]: module `http` is private\r\n  --> src/main.rs:16:29\r\n   |\r\n16 | use actix_web::{middleware, http, server,\r\n   |                             ^^^^\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `juniper-example`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/143","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/143/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/143/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/143/events","html_url":"https://github.com/actix/actix-web/issues/143","id":310218328,"number":143,"title":"Juniper example - no method named `unwrap` found for type `actix_web::HttpResponse`","user":{"login":"rofrol","id":28787,"avatar_url":"https://avatars2.githubusercontent.com/u/28787?v=4","gravatar_id":"","url":"https://api.github.com/users/rofrol","html_url":"https://github.com/rofrol","followers_url":"https://api.github.com/users/rofrol/followers","following_url":"https://api.github.com/users/rofrol/following{/other_user}","gists_url":"https://api.github.com/users/rofrol/gists{/gist_id}","starred_url":"https://api.github.com/users/rofrol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rofrol/subscriptions","organizations_url":"https://api.github.com/users/rofrol/orgs","repos_url":"https://api.github.com/users/rofrol/repos","events_url":"https://api.github.com/users/rofrol/events{/privacy}","received_events_url":"https://api.github.com/users/rofrol/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-03-31T06:55:19Z","updated_at":"2018-03-31T07:07:07Z","closed_at":"2018-03-31T07:07:07Z","author_association":"CONTRIBUTOR","body":"```bash\r\n~/personal_projects/rust/vendor/actix-web/examples/juniper (master)$ cargo run\r\n Downloading serde_urlencoded v0.5.1\r\n Downloading itoa v0.3.4\r\n   Compiling juniper-example v0.1.0 (file:///Users/romanfrolow/personal_projects/rust/vendor/actix-web/examples/juniper)\r\nerror[E0599]: no method named `unwrap` found for type `actix_web::HttpResponse` in the current scope\r\n  --> examples/juniper/src/main.rs:70:21\r\n   |\r\n70 |         .body(html).unwrap())\r\n   |                     ^^^^^^\r\n\r\nerror[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\r\n  --> examples/juniper/src/main.rs:82:40\r\n   |\r\n82 |                         Ok(user) => Ok(HttpResponse::Ok().body(user)?),\r\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `actix_web::HttpResponse`\r\n   |\r\n   = help: the trait `std::ops::Try` is not implemented for `actix_web::HttpResponse`\r\n   = note: required by `std::ops::Try::into_result`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `juniper-example`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/142","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/142/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/142/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/142/events","html_url":"https://github.com/actix/actix-web/issues/142","id":310213408,"number":142,"title":"Renderers for error pages","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-31T05:07:22Z","updated_at":"2018-04-03T05:07:06Z","closed_at":"2018-04-03T05:07:05Z","author_association":"COLLABORATOR","body":"i think this should something like:\r\n\r\n```rust\r\n\r\nfn render_500(req: HttpRequest, resp: HttpResponse) -> HttpResponse {\r\n    unimplemented!()\r\n}\r\n\r\nApplication()\r\n     .error_renderer(StatusCode::INTERNAL_SERVER_ERROR, render_500)\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/139","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/139/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/139/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/139/events","html_url":"https://github.com/actix/actix-web/issues/139","id":309730995,"number":139,"title":" update the diesel example to use diesel::r2d2 feature.","user":{"login":"krircc","id":18028295,"avatar_url":"https://avatars0.githubusercontent.com/u/18028295?v=4","gravatar_id":"","url":"https://api.github.com/users/krircc","html_url":"https://github.com/krircc","followers_url":"https://api.github.com/users/krircc/followers","following_url":"https://api.github.com/users/krircc/following{/other_user}","gists_url":"https://api.github.com/users/krircc/gists{/gist_id}","starred_url":"https://api.github.com/users/krircc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krircc/subscriptions","organizations_url":"https://api.github.com/users/krircc/orgs","repos_url":"https://api.github.com/users/krircc/repos","events_url":"https://api.github.com/users/krircc/events{/privacy}","received_events_url":"https://api.github.com/users/krircc/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-29T12:13:53Z","updated_at":"2018-04-01T15:21:23Z","closed_at":"2018-04-01T15:21:22Z","author_association":"CONTRIBUTOR","body":"diesel  also Merged r2d2-diesel into itself, The diesel example should update to use the diesel::r2d2 feature.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/137","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/137/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/137/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/137/events","html_url":"https://github.com/actix/actix-web/issues/137","id":309394937,"number":137,"title":"Router cannot parse  Non-ASCII characters in URL","user":{"login":"erasin","id":716514,"avatar_url":"https://avatars0.githubusercontent.com/u/716514?v=4","gravatar_id":"","url":"https://api.github.com/users/erasin","html_url":"https://github.com/erasin","followers_url":"https://api.github.com/users/erasin/followers","following_url":"https://api.github.com/users/erasin/following{/other_user}","gists_url":"https://api.github.com/users/erasin/gists{/gist_id}","starred_url":"https://api.github.com/users/erasin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erasin/subscriptions","organizations_url":"https://api.github.com/users/erasin/orgs","repos_url":"https://api.github.com/users/erasin/repos","events_url":"https://api.github.com/users/erasin/events{/privacy}","received_events_url":"https://api.github.com/users/erasin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-28T14:36:12Z","updated_at":"2018-03-28T23:11:20Z","closed_at":"2018-03-28T23:11:19Z","author_association":"NONE","body":"Router cannot parse  Non-ASCII characters in URL on\r\n\r\n```\r\n   //   `http://localhost:3000/中文/Cargo.toml` \r\n\r\n   // work \r\n   Application::new().handler(\"/\", fs::StaticFiles::new(\".\", true).index_file(\"index.html\"))\r\n            .resource(r\"/%E4%B8%AD%E6%96%87/{tail:.*}\", |r| r.method(Method::GET).f(index)),\r\n\r\n  //  not work\r\n   Application::new().handler(\"/\", fs::StaticFiles::new(\".\", true).index_file(\"index.html\"))\r\n            .resource(r\"/中文/{tail:.*}\", |r| r.method(Method::GET).f(index)),\r\n \r\n  // not support chinese characters \r\n \"/%E4%B8%AD%E6%96%87.html\"  ---> \"/中文\" \r\n \"/%E4%B8%AD%E6%96%87/%E6%96%87%E4%BB%B6.html\" --->\"/中文/文件.html\" \r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/135","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/135/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/135/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/135/events","html_url":"https://github.com/actix/actix-web/issues/135","id":308361553,"number":135,"title":"Quickstart guide error: wait() from trait can only be used if the trait is in scope","user":{"login":"ZelphirKaltstahl","id":11130348,"avatar_url":"https://avatars2.githubusercontent.com/u/11130348?v=4","gravatar_id":"","url":"https://api.github.com/users/ZelphirKaltstahl","html_url":"https://github.com/ZelphirKaltstahl","followers_url":"https://api.github.com/users/ZelphirKaltstahl/followers","following_url":"https://api.github.com/users/ZelphirKaltstahl/following{/other_user}","gists_url":"https://api.github.com/users/ZelphirKaltstahl/gists{/gist_id}","starred_url":"https://api.github.com/users/ZelphirKaltstahl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ZelphirKaltstahl/subscriptions","organizations_url":"https://api.github.com/users/ZelphirKaltstahl/orgs","repos_url":"https://api.github.com/users/ZelphirKaltstahl/repos","events_url":"https://api.github.com/users/ZelphirKaltstahl/events{/privacy}","received_events_url":"https://api.github.com/users/ZelphirKaltstahl/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-25T16:03:01Z","updated_at":"2018-03-26T15:33:50Z","closed_at":"2018-03-26T15:33:50Z","author_association":"NONE","body":"I am looking at the quickstart guide at <https://actix.github.io/actix-web/guide/qs_3_5.html>. There at the example code for spawning another actix system using a `Thread` with `spawn()`.\r\n\r\nI have the following code:\r\n\r\n``` rust\r\n// actix-web the server framework we are using.\r\nextern crate actix;\r\nextern crate actix_web;\r\nuse actix::*;\r\nuse actix_web::*;\r\n\r\nuse std::thread;\r\nuse std::sync::mpsc;\r\n\r\nmod model;\r\nuse model::*;\r\n\r\n// Globals are declared outside all other scopes.\r\nstatic PORT: u32 = 8000;\r\n\r\n// A request handler is a function that accepts a HttpRequest instance as its only parameter\r\n// and returns a type that can be converted into HttpResponse:\r\nfn index(_req: HttpRequest) -> String {\r\n    String::from(\"Hello World!\")\r\n}\r\n\r\n\r\nfn main() {\r\n    let (tx, rx) = mpsc::channel();\r\n\r\n    // Start stuff in a new thread.\r\n    thread::spawn(move || {\r\n        // HttpServer is an actix actor.\r\n        // It has to be initialized within properly configured actix system.\r\n        // Here we initialize such a system.\r\n        let sys = actix::System::new(\"rugi\");\r\n\r\n        println!(\"Trying to start on localhost:{}.\", PORT.to_string());\r\n        // run a new server on some port\r\n        let addr = HttpServer::new(\r\n            // make a new application\r\n            // apparently here a lambda expression is needed\r\n            // This is what the guide calls \"Application factory\",\r\n            // because you get a new Application object when you call this procedure.\r\n            || Application::new()\r\n                .prefix(\"/\")\r\n                .resource(\"/index\", |req| req.f(index)))\r\n            .bind(format!(\"localhost:{}\", PORT)).expect(&format!(\"Could not bind to port {}\", PORT))\r\n            .shutdown_timeout(60)\r\n            .start();  // <- use start_tls() for TLS\r\n\r\n        let _ = tx.send(addr);\r\n        let _ = sys.run();\r\n    });\r\n\r\n    // Receive the address of the started server from the channel.\r\n    let addr = rx.recv().unwrap();\r\n    // Send a stop message to the server's address.\r\n    let _ = addr.send(server::StopServer{graceful:true}).wait();\r\n}\r\n```\r\n\r\nEverything seems to work, except that `wait` is apparently not working:\r\n\r\n```\r\nitems from traits can only be used if the trait is in scope [E0599]\r\n\r\nthe method `wait` exists but the following trait bounds were not satisfied:\r\n`actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer> : actix::ContextFutureSpawner<_>`\r\n`&actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer> : actix::ContextFutureSpawner<_>`\r\n`&mut actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer> : actix::ContextFutureSpawner<_>` [E0599]\r\n\r\nno method named `wait` found for type `actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer>` in the current scope [E0599]\r\n```\r\n\r\nNow I am unsure how to go on.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/134","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/134/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/134/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/134/events","html_url":"https://github.com/actix/actix-web/issues/134","id":308324735,"number":134,"title":"Segmentation fault on release mode in nightly","user":{"login":"JordiPolo","id":21734,"avatar_url":"https://avatars2.githubusercontent.com/u/21734?v=4","gravatar_id":"","url":"https://api.github.com/users/JordiPolo","html_url":"https://github.com/JordiPolo","followers_url":"https://api.github.com/users/JordiPolo/followers","following_url":"https://api.github.com/users/JordiPolo/following{/other_user}","gists_url":"https://api.github.com/users/JordiPolo/gists{/gist_id}","starred_url":"https://api.github.com/users/JordiPolo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JordiPolo/subscriptions","organizations_url":"https://api.github.com/users/JordiPolo/orgs","repos_url":"https://api.github.com/users/JordiPolo/repos","events_url":"https://api.github.com/users/JordiPolo/events{/privacy}","received_events_url":"https://api.github.com/
1bf9
users/JordiPolo/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-25T05:53:59Z","updated_at":"2018-03-28T15:02:46Z","closed_at":"2018-03-28T15:02:46Z","author_association":"NONE","body":"I'm testing out Actix, with a very simple setup. \r\nThe following works well in debug and release mode in the stable compiler 1.24.1\r\nWorks in debug mode but fails with a segmentation fault right away when started with nightly compiler (March 24th, have not tried with previous)\r\n\r\nMy very simple setup, Cargo.toml:\r\n```\r\n[dependencies]\r\nfutures = \"*\"\r\nenv_logger = \"0.5\"\r\nactix = \"0.5\"\r\nactix-web = \"0.4\"\r\n```\r\n(actix-web 0.4.10 , actix 0.5.5)\r\n\r\nsrc/main.rs\r\n```\r\nextern crate actix;\r\nextern crate actix_web;\r\nextern crate env_logger;\r\n\r\nuse std::env;\r\nuse actix_web::*;\r\n\r\nfn main() {\r\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\r\n    env::set_var(\"RUST_BACKTRACE\", \"1\");\r\n    env_logger::init();\r\n    let sys = actix::System::new(\"basic-example\");\r\n\r\n    let _addr = HttpServer::new(\r\n        || Application::new()\r\n            // enable logger\r\n            .middleware(middleware::Logger::default())\r\n                        // register favicon\r\n         //   .resource(\"/favicon.ico\", |r| r.f(favicon))\r\n                        // static files\r\n            .handler(\"/\", fs::StaticFiles::new(\"static/\", true)))\r\n        .bind(\"127.0.0.1:8080\").expect(\"Can not bind to 127.0.0.1:8080\")\r\n        .shutdown_timeout(0)    // <- Set shutdown timeout to 0 seconds (default 60s)\r\n        .start();\r\n\r\n    println!(\"Starting http server: 127.0.0.1:8080\");\r\n    let _ = sys.run();\r\n}\r\n```\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/133","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/133/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/133/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/133/events","html_url":"https://github.com/actix/actix-web/issues/133","id":308288586,"number":133,"title":"Websocket handling don't allow throttling of outgoing requests","user":{"login":"uzytkownik","id":5706,"avatar_url":"https://avatars3.githubusercontent.com/u/5706?v=4","gravatar_id":"","url":"https://api.github.com/users/uzytkownik","html_url":"https://github.com/uzytkownik","followers_url":"https://api.github.com/users/uzytkownik/followers","following_url":"https://api.github.com/users/uzytkownik/following{/other_user}","gists_url":"https://api.github.com/users/uzytkownik/gists{/gist_id}","starred_url":"https://api.github.com/users/uzytkownik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uzytkownik/subscriptions","organizations_url":"https://api.github.com/users/uzytkownik/orgs","repos_url":"https://api.github.com/users/uzytkownik/repos","events_url":"https://api.github.com/users/uzytkownik/events{/privacy}","received_events_url":"https://api.github.com/users/uzytkownik/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-24T18:48:02Z","updated_at":"2018-03-27T15:02:49Z","closed_at":"2018-03-27T15:02:49Z","author_association":"NONE","body":"Currently there is no way of detecting throttling of the outgoing data. This means that if data is generated by outside source (for example other clients) and connection was throttled so client does not consume data fast enough the upstream producer doesn't have a way of knowing it.\r\n\r\nIdeally there would be a way to ensure that `WebsocketContext` `stream` (and any buffering that happens below this level) does not happens out of bound.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/131","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/131/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/131/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/131/events","html_url":"https://github.com/actix/actix-web/issues/131","id":307869529,"number":131,"title":"Active ClientRequests sometimes segfaults on exit","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-23T01:27:04Z","updated_at":"2018-03-23T03:02:28Z","closed_at":"2018-03-23T03:02:28Z","author_association":"NONE","body":"Not sure how to reduce this one down to an example to replicate, but it appears to be an issue when there are active Client Requests, and you try to shut down the actix system.\r\n\r\nI have a few endpoints that are proxy to other webservices.\r\n\r\nIf a browser is making requests to the actix web service, and you try to shut it down, then the following is displayed in the logs:\r\n\r\n```\r\nSIGINT received, exiting\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Shutting down http worker, 0 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Shutting down http worker, 0 connections\r\nSegmentation fault: 11\r\n```\r\n\r\nI can see that there are active connections to the proxy locations, even though the client has closed connection with actix.  I.e, they are sticking around for a bit.  Eventually (after like 5 seconds?) these connections close off.\r\n\r\nI.e, `client -> actix` is closed, but `actix -> service` is open.\r\n\r\nIt might be to do with something when the `ClientRequest` connections are finally destroyed","score":1.0}]}
0

