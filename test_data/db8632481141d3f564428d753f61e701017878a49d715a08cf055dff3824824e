HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Mon, 09 Apr 2018 00:16:01 GMT
Link: <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=3>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: D791:54B9:14DF19F:29F9E27:5ACAB0C0
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 24
X-Ratelimit-Reset: 1523233020
X-Runtime-Rack: 0.453690
X-Xss-Protection: 1; mode=block

8000
{"total_count":87,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/actix/actix-web/issues/167","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/167/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/167/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/167/events","html_url":"https://github.com/actix/actix-web/issues/167","id":312314465,"number":167,"title":"Expose `max_age` for `CookieSessionBackendBuilder`","user":{"login":"brandur","id":96890,"avatar_url":"https://avatars1.githubusercontent.com/u/96890?v=4","gravatar_id":"","url":"https://api.github.com/users/brandur","html_url":"https://github.com/brandur","followers_url":"https://api.github.com/users/brandur/followers","following_url":"https://api.github.com/users/brandur/following{/other_user}","gists_url":"https://api.github.com/users/brandur/gists{/gist_id}","starred_url":"https://api.github.com/users/brandur/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brandur/subscriptions","organizations_url":"https://api.github.com/users/brandur/orgs","repos_url":"https://api.github.com/users/brandur/repos","events_url":"https://api.github.com/users/brandur/events{/privacy}","received_events_url":"https://api.github.com/users/brandur/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-08T15:26:13Z","updated_at":"2018-04-08T18:46:05Z","closed_at":"2018-04-08T18:45:52Z","author_association":"NONE","body":"Currently, cookies created with `actix-web`'s built-in middleware have an invalid expiry date showing up in the distant past:\r\n\r\n![image](https://user-images.githubusercontent.com/96890/38469249-58e1dc0e-3b06-11e8-86a2-924dda76176a.png)\r\n\r\nThis should be fixed by exposing a `max_age` option for `CookieSessionBackendBuilder`. [`set_max_age`](https://docs.rs/cookie/0.10.1/cookie/struct.Cookie.html#method.set_max_age) is exposed by the underlying `cookie` Crate, so this should be fairly easy to do.\r\n\r\nBTW, @fafhrd91 any thoughts on getting a `rustfmt.toml` in place? I was going to just contribute this feature myself, but after running into some pretty nasty diffs caused by `rustfmt` save hooks activating automatically, I just opened this issue instead :)","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/166","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/166/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/166/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/166/events","html_url":"https://github.com/actix/actix-web/issues/166","id":312252963,"number":166,"title":"Getting mutable state reference when using HttpRequest::json()?","user":{"login":"spease","id":2825204,"avatar_url":"https://avatars1.githubusercontent.com/u/2825204?v=4","gravatar_id":"","url":"https://api.github.com/users/spease","html_url":"https://github.com/spease","followers_url":"https://api.github.com/users/spease/followers","following_url":"https://api.github.com/users/spease/following{/other_user}","gists_url":"https://api.github.com/users/spease/gists{/gist_id}","starred_url":"https://api.github.com/users/spease/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spease/subscriptions","organizations_url":"https://api.github.com/users/spease/orgs","repos_url":"https://api.github.com/users/spease/repos","events_url":"https://api.github.com/users/spease/events{/privacy}","received_events_url":"https://api.github.com/users/spease/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-07T23:31:32Z","updated_at":"2018-04-07T23:40:02Z","closed_at":"2018-04-07T23:40:02Z","author_association":"NONE","body":"```\r\n    req.json()                   // <- get JsonBody future\r\n       .from_err()\r\n       .and_then(|val: MyObj| {  // <- deserialized value\r\n           println!(\"==== BODY ==== {:?}\", val);\r\n           Ok(httpcodes::HttpOk.into())\r\n       }).responder()\r\n```\r\n\r\nThe problem:\r\nI have state which is retrieved with req.state() that depends on the value of the serialized JSON. However, json consumes the request object. If I gain a mutable reference before calling json(), it prevents json(). If I try to gain a mutable reference during or after json(), the object has already been consumed.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/161","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/161/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/161/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/161/events","html_url":"https://github.com/actix/actix-web/issues/161","id":311992143,"number":161,"title":"Failed to compile example from guide: unresolved import `actix_web::App`","user":{"login":"davechallis","id":208316,"avatar_url":"https://avatars3.githubusercontent.com/u/208316?v=4","gravatar_id":"","url":"https://api.github.com/users/davechallis","html_url":"https://github.com/davechallis","followers_url":"https://api.github.com/users/davechallis/followers","following_url":"https://api.github.com/users/davechallis/following{/other_user}","gists_url":"https://api.github.com/users/davechallis/gists{/gist_id}","starred_url":"https://api.github.com/users/davechallis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davechallis/subscriptions","organizations_url":"https://api.github.com/users/davechallis/orgs","repos_url":"https://api.github.com/users/davechallis/repos","events_url":"https://api.github.com/users/davechallis/events{/privacy}","received_events_url":"https://api.github.com/users/davechallis/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-06T14:14:19Z","updated_at":"2018-04-06T14:51:11Z","closed_at":"2018-04-06T14:51:10Z","author_association":"NONE","body":"The example in the guide at https://actix.github.io/actix-web/guide/qs_2.html doesn't compile against the version of actix-web specified on that page (`actix-web = \"0.4\"`), failing with:\r\n\r\n```\r\nerror[E0432]: unresolved import `actix_web::App`\r\n --> src/main.rs:2:17\r\n  |\r\n2 | use actix_web::{App, HttpRequest, HttpResponse, HttpServer};\r\n  |                 ^^^ no `App` in the root\r\n```\r\n\r\nIt looks like `App` is going to be in version 0.5 though, so I expect this error will go away once the guide is updated for 0.5 (but if that release is a long way off, could be helpful to newcomers to fix the guide).","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/158","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/158/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/158/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/158/events","html_url":"https://github.com/actix/actix-web/issues/158","id":311138643,"number":158,"title":"Timeout when proxying a large request","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-04T08:48:39Z","updated_at":"2018-04-05T03:25:08Z","closed_at":"2018-04-05T03:25:08Z","author_association":"NONE","body":"Not sure how to solve this one.  We're proxying a large file upload to a backend service through actix-web, and it's hitting some implicit timer somewhere:\r\n\r\n```\r\n ERROR actix_web::pipeline           > Error occured during request handling: Timeout out while waiting for response\r\n```\r\n\r\nThe client is still uploading a file at this point, so it shouldn't be timing out as the connection is still streaming through\r\n\r\nUsing the following as the `proxy` implementation:\r\n\r\n```\r\n        let mut builder = client::ClientRequest::build();\r\n\r\n        for (key, value) in req.headers() {\r\n            if key != header::CONNECTION {\r\n                builder.header(key.clone(), value.clone());\r\n            }\r\n        }\r\n\r\n        builder\r\n            .uri(&url)\r\n            .method(req.method().clone())\r\n            .body(Body::Streaming(Box::new(req.from_err())))\r\n            .unwrap()\r\n            .send()\r\n            .from_err()\r\n            .and_then(|resp| {\r\n                let mut client_response = HttpResponse::build(resp.status());\r\n\r\n                for (key, value) in resp.headers() {\r\n                    if key != header::CONTENT_LENGTH {\r\n                        client_response.header(key.clone(), value.clone());\r\n                    }\r\n                }\r\n\r\n                client_response.body(Body::Streaming(Box::new(resp.from_err())))\r\n                    .map_err(|e| e.into()) // HttpOk::build() mayb return HttpError, we need to convert it to a Error\r\n            })\r\n            .responder()\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/152","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/152/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/152/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/152/events","html_url":"https://github.com/actix/actix-web/issues/152","id":310525106,"number":152,"title":"Request time is doubled in Logger middleware","user":{"login":"bwasty","id":1647415,"avatar_url":"https://avatars3.githubusercontent.com/u/1647415?v=4","gravatar_id":"","url":"https://api.github.com/users/bwasty","html_url":"https://github.com/bwasty","followers_url":"https://api.github.com/users/bwasty/followers","following_url":"https://api.github.com/users/bwasty/following{/other_user}","gists_url":"https://api.github.com/users/bwasty/gists{/gist_id}","starred_url":"https://api.github.com/users/bwasty/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bwasty/subscriptions","organizations_url":"https://api.github.com/users/bwasty/orgs","repos_url":"https://api.github.com/users/bwasty/repos","events_url":"https://api.github.com/users/bwasty/events{/privacy}","received_events_url":"https://api.github.com/users/bwasty/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-02T16:01:45Z","updated_at":"2018-04-02T18:10:16Z","closed_at":"2018-04-02T18:10:16Z","author_association":"CONTRIBUTOR","body":"The `%T` at the end of the standard format for the logger middleware always prints twice the amount of time passed (tested with some `thread::sleep` calls).\r\n\r\nThe culprit seems to be here:\r\nhttps://github.com/actix/actix-web/blob/74d0656d27e6afd87c6a0b805eb88e581410fb38/src/middleware/logger.rs#L235-L236\r\n\r\n-> `num_nanoseconds` is the whole duration (in contrast to `std::time::Duration::subsec_nanos`).","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/151","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/151/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/151/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/151/events","html_url":"https://github.com/actix/actix-web/issues/151","id":310434653,"number":151,"title":"HttpRequest.resource() always returns a default resource in middleware","user":{"login":"lyptt","id":346710,"avatar_url":"https://avatars0.githubusercontent.com/u/346710?v=4","gravatar_id":"","url":"https://api.github.com/users/lyptt","html_url":"https://github.com/lyptt","followers_url":"https://api.github.com/users/lyptt/followers","following_url":"https://api.github.com/users/lyptt/following{/other_user}","gists_url":"https://api.github.com/users/lyptt/gists{/gist_id}","starred_url":"https://api.github.com/users/lyptt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lyptt/subscriptions","organizations_url":"https://api.github.com/users/lyptt/orgs","repos_url":"https://api.github.com/users/lyptt/repos","events_url":"https://api.github.com/users/lyptt/events{/privacy}","received_events_url":"https://api.github.com/users/lyptt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-02T09:03:14Z","updated_at":"2018-04-02T18:20:18Z","closed_at":"2018-04-02T18:20:18Z","author_association":"NONE","body":"In `HttpRequest`, when calling its `.resource()` method within middleware, it never actually finds the resource object. Instead returning a static default resource:\r\n\r\n```rust\r\n    pub fn resource(&self) -> &Resource {\r\n        let idx = self.as_ref().resource;\r\n        if idx >= 0 {\r\n            if let Some(ref router) = self.2 {\r\n                return router.get_resource(idx as usize)\r\n            }\r\n        }\r\n        &*RESOURCE // <-- always called\r\n    }\r\n```\r\n\r\nThis is with a fairly basic code sample:\r\n\r\n```rust\r\nstruct Headers;\r\nimpl<S> Middleware<S> for Headers {\r\n  fn start(&self, req: &mut HttpRequest<S>) -> Result<Started, Error> {\r\n    let resource = req.resource(); // <-- returns static resource\r\n    Ok(Started::Done)\r\n  }\r\n}\r\n\r\nfn index(req: HttpRequest) -> FutureResult<HttpResponse, Error> {\r\n  let resource = req.resource(); // <-- returns actual resource\r\n  result(Ok(HttpResponse::Ok().body(\"Hello world\")))\r\n}\r\n\r\nfn main() {\r\n  HttpServer::new(\r\n    || App::new()\r\n      .prefix(\"/api\")\r\n      .middleware(Headers)\r\n      .resource(\"/\", |r| r.method(http::Method::GET).a(index))\r\n  )\r\n    .keep_alive(30)\r\n    .bind(\"0.0.0.0:30000\")\r\n    .unwrap()\r\n    .run();\r\n}\r\n```\r\n\r\nI've verified this by debugging through the actix_web code, and also by forking the repo and hardcoding the static resource name to be something other than an empty string, then comparing the `.name()` calls between the middleware and the handler.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/149","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/149/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/149/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/149/events","html_url":"https://github.com/actix/actix-web/issues/149","id":310347945,"number":149,"title":"Configurable body size with JSON extractor","user":{"login":"tazjin","id":1552853,"avatar_url":"https://avatars1.githubusercontent.com/u/1552853?v=4","gravatar_id":"","url":"https://api.github.com/users/tazjin","html_url":"https://github.com/tazjin","followers_url":"https://api.github.com/users/tazjin/followers","following_url":"https://api.github.com/users/tazjin/following{/other_user}","gists_url":"https://api.github.com/users/tazjin/gists{/gist_id}","starred_url":"https://api.github.com/users/tazjin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tazjin/subscriptions","organizations_url":"https://api.github.com/users/tazjin/orgs","repos_url":"https://api.github.com/users/tazjin/repos","events_url":"https://api.github.com/users/tazjin/events{/privacy}","received_events_url":"https://api.github.com/users/tazjin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-04-01T19:35:15Z","updated_at":"2018-04-04T19:25:33Z","closed_at":"2018-04-04T05:28:43Z","author_association":"CONTRIBUTOR","body":"Hey,\r\n\r\nI'm playing with the new extractors on `master` and am currently a bit confused about whether it's possible to change the maximum request body size (seems to be hardcoded to 256kb) for extractor-decoded JSON bodies.\r\n\r\nIt seems like there's a [limit function](https://github.com/actix/actix-web/blob/b2e771df2cb4130889a5e45cfff97a76772639ce/src/json.rs#L175) for a related purpose, but the instance of `JsonBody` used by specifying a `Json<T>` extractor doesn't seem available to the user.\r\n\r\nIs this supported atm?\r\n\r\nThanks!","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/148","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/148/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/148/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/148/events","html_url":"https://github.com/actix/actix-web/issues/148","id":310337573,"number":148,"title":"How to ask a server to stop from a handler?","user":{"login":"artemshein","id":21080520,"avatar_url":"https://avatars3.githubusercontent.com/u/21080520?v=4","gravatar_id":"","url":"https://api.github.com/users/artemshein","html_url":"https://github.com/artemshein","followers_url":"https://api.github.com/users/artemshein/followers","following_url":"https://api.github.com/users/artemshein/following{/other_user}","gists_url":"https://api.github.com/users/artemshein/gists{/gist_id}","starred_url":"https://api.github.com/users/artemshein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/artemshein/subscriptions","organizations_url":"https://api.github.com/users/artemshein/orgs","repos_url":"https://api.github.com/users/artemshein/repos","events_url":"https://api.github.com/users/artemshein/events{/privacy}","received_events_url":"https://api.github.com/users/artemshein/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-01T16:54:11Z","updated_at":"2018-04-01T18:28:44Z","closed_at":"2018-04-01T18:28:44Z","author_association":"NONE","body":"And how to get a server actix System from a handler?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/146","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/146/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/146/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/146/events","html_url":"https://github.com/actix/actix-web/issues/146","id":310228242,"number":146,"title":"Determining which route is which from middleware","user":{"login":"lyptt","id":346710,"avatar_url":"https://avatars0.githubusercontent.com/u/346710?v=4","gravatar_id":"","url":"https://api.github.com/users/lyptt","html_url":"https://github.com/lyptt","followers_url":"https://api.github.com/users/lyptt/followers","following_url":"https://api.github.com/users/lyptt/following{/other_user}","gists_url":"https://api.github.com/users/lyptt/gists{/gist_id}","starred_url":"https://api.github.com/users/lyptt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lyptt/subscriptions","organizations_url":"https://api.github.com/users/lyptt/orgs","repos_url":"https://api.github.com/users/lyptt/repos","events_url":"https://api.github.com/users/lyptt/events{/privacy}","received_events_url":"https://api.github.com/users/lyptt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-31T09:47:45Z","updated_at":"2018-04-02T00:57:43Z","closed_at":"2018-04-02T00:57:43Z","author_association":"NONE","body":"Is it possible to identify the current route from middleware? For example some kind of identifier for the route which can be used to apply rules / handle caching / etc.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/144","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/144/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/144/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/144/events","html_url":"https://github.com/actix/actix-web/issues/144","id":310218445,"number":144,"title":"Juniper exampe - cannot find function `new` in module `server`","user":{"login":"rofrol","id":28787,"avatar_url":"https://avatars2.githubusercontent.com/u/28787?v=4","gravatar_id":"","url":"https://api.github.com/users/rofrol","html_url":"https://github.com/rofrol","followers_url":"https://api.github.com/users/rofrol/followers","following_url":"https://api.github.com/users/rofrol/following{/other_user}","gists_url":"https://api.github.com/users/rofrol/gists{/gist_id}","starred_url":"https://api.github.com/users/rofrol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rofrol/subscriptions","organizations_url":"https://api.github.com/users/rofrol/orgs","repos_url":"https://api.github.com/users/rofrol/repos","events_url":"https://api.github.com/users/rofrol/events{/privacy}","received_events_url":"https://api.github.com/users/rofrol/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-31T06:58:01Z","updated_at":"2018-03-31T07:06:55Z","closed_at":"2018-03-31T07:06:55Z","author_association":"CONTRIBUTOR","body":"I made a copy of `example/juniper`, modified `Cargo.toml` to not depend of `actix-web` repo and run:\r\n\r\n```bash\r\n~/personal_projects/jakrom-shop/server (master)$ cargo run\r\n   Compiling juniper-example v0.1.0 (file:///Users/romanfrolow/personal_projects/jakrom-shop/server)\r\nerror[E0425]: cannot find function `new` in module `server`\r\n   --> src/main.rs:101:21\r\n    |\r\n101 |     let _ = server::new(move || {\r\n    |                     ^^^ not found in `server`\r\n\r\nerror[E0603]: module `http` is private\r\n  --> src/main.rs:16:29\r\n   |\r\n16 | use actix_web::{middleware, http, server,\r\n   |                             ^^^^\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `juniper-example`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/143","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/143/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/143/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/143/events","html_url":"https://github.com/actix/actix-web/issues/143","id":310218328,"number":143,"title":"Juniper example - no method named `unwrap` found for type `actix_web::HttpResponse`","user":{"login":"rofrol","id":28787,"avatar_url":"https://avatars2.githubusercontent.com/u/28787?v=4","gravatar_id":"","url":"https://api.github.com/users/rofrol","html_url":"https://github.com/rofrol","followers_url":"https://api.github.com/users/rofrol/followers","following_url":"https://api.github.com/users/rofrol/following{/other_user}","gists_url":"https://api.github.com/users/rofrol/gists{/gist_id}","starred_url":"https://api.github.com/users/rofrol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rofrol/subscriptions","organizations_url":"https://api.github.com/users/rofrol/orgs","repos_url":"https://api.github.com/users/rofrol/repos","events_url":"https://api.github.com/users/rofrol/events{/privacy}","received_events_url":"https://api.github.com/users/rofrol/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-03-31T06:55:19Z","updated_at":"2018-03-31T07:07:07Z","closed_at":"2018-03-31T07:07:07Z","author_association":"CONTRIBUTOR","body":"```bash\r\n~/personal_projects/rust/vendor/actix-web/examples/juniper (master)$ cargo run\r\n Downloading serde_urlencoded v0.5.1\r\n Downloading itoa v0.3.4\r\n   Compiling juniper-example v0.1.0 (file:///Users/romanfrolow/personal_projects/rust/vendor/actix-web/examples/juniper)\r\nerror[E0599]: no method named `unwrap` found for type `actix_web::HttpResponse` in the current scope\r\n  --> examples/juniper/src/main.rs:70:21\r\n   |\r\n70 |         .body(html).unwrap())\r\n   |                     ^^^^^^\r\n\r\nerror[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\r\n  --> examples/juniper/src/main.rs:82:40\r\n   |\r\n82 |                         Ok(user) => Ok(HttpResponse::Ok().body(user)?),\r\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `actix_web::HttpResponse`\r\n   |\r\n   = help: the trait `std::ops::Try` is not implemented for `actix_web::HttpResponse`\r\n   = note: required by `std::ops::Try::into_result`\r\n\r\nerror: aborting due to 2 previous errors\r\n\r\nerror: Could not compile `juniper-example`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/142","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/142/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/142/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/142/events","html_url":"https://github.com/actix/actix-web/issues/142","id":310213408,"number":142,"title":"Renderers for error pages","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-31T05:07:22Z","updated_at":"2018-04-03T05:07:06Z","closed_at":"2018-04-03T05:07:05Z","author_association":"COLLABORATOR","body":"i think this should something like:\r\n\r\n```rust\r\n\r\nfn render_500(req: HttpRequest, resp: HttpResponse) -> HttpResponse {\r\n    unimplemented!()\r\n}\r\n\r\nApplication()\r\n     .error_renderer(StatusCode::INTERNAL_SERVER_ERROR, render_500)\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/139","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/139/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/139/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/139/events","html_url":"https://github.com/actix/actix-web/issues/139","id":309730995,"number":139,"title":" update the diesel example to use diesel::r2d2 feature.","user":{"login":"krircc","id":18028295,"avatar_url":"https://avatars0.githubusercontent.com/u/18028295?v=4","gravatar_id":"","url":"https://api.github.com/users/krircc","html_url":"https://github.com/krircc","followers_url":"https://api.github.com/users/krircc/followers","following_url":"https://api.github.com/users/krircc/following{/other_user}","gists_url":"https://api.github.com/users/krircc/gists{/gist_id}","starred_url":"https://api.github.com/users/krircc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krircc/subscriptions","organizations_url":"https://api.github.com/users/krircc/orgs","repos_url":"https://api.github.com/users/krircc/repos","events_url":"https://api.github.com/users/krircc/events{/privacy}","received_events_url":"https://api.github.com/users/krircc/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-29T12:13:53Z","updated_at":"2018-04-01T15:21:23Z","closed_at":"2018-04-01T15:21:22Z","author_association":"CONTRIBUTOR","body":"diesel  also Merged r2d2-diesel into itself, The diesel example should update to use the diesel::r2d2 feature.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/137","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/137/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/137/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/137/events","html_url":"https://github.com/actix/actix-web/issues/137","id":309394937,"number":137,"title":"Router cannot parse  Non-ASCII characters in URL","user":{"login":"erasin","id":716514,"avatar_url":"https://avatars0.githubusercontent.com/u/716514?v=4","gravatar_id":"","url":"https://api.github.com/users/erasin","html_url":"https://github.com/erasin","followers_url":"https://api.github.com/users/erasin/followers","following_url":"https://api.github.com/users/erasin/following{/other_user}","gists_url":"https://api.github.com/users/erasin/gists{/gist_id}","starred_url":"https://api.github.com/users/erasin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erasin/subscriptions","organizations_url":"https://api.github.com/users/erasin/orgs","repos_url":"https://api.github.com/users/erasin/repos","events_url":"https://api.github.com/users/erasin/events{/privacy}","received_events_url":"https://api.github.com/users/erasin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-28T14:36:12Z","updated_at":"2018-03-28T23:11:20Z","closed_at":"2018-03-28T23:11:19Z","author_association":"NONE","body":"Router cannot parse  Non-ASCII characters in URL on\r\n\r\n```\r\n   //   `http://localhost:3000/中文/Cargo.toml` \r\n\r\n   // work \r\n   Application::new().handler(\"/\", fs::StaticFiles::new(\".\", true).index_file(\"index.html\"))\r\n            .resource(r\"/%E4%B8%AD%E6%96%87/{tail:.*}\", |r| r.method(Method::GET).f(index)),\r\n\r\n  //  not work\r\n   Application::new().handler(\"/\", fs::StaticFiles::new(\".\", true).index_file(\"index.html\"))\r\n            .resource(r\"/中文/{tail:.*}\", |r| r.method(Method::GET).f(index)),\r\n \r\n  // not support chinese characters \r\n \"/%E4%B8%AD%E6%96%87.html\"  ---> \"/中文\" \r\n \"/%E4%B8%AD%E6%96%87/%E6%96%87%E4%BB%B6.html\" --->\"/中文/文件.html\" \r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/135
8000
","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/135/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/135/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/135/events","html_url":"https://github.com/actix/actix-web/issues/135","id":308361553,"number":135,"title":"Quickstart guide error: wait() from trait can only be used if the trait is in scope","user":{"login":"ZelphirKaltstahl","id":11130348,"avatar_url":"https://avatars2.githubusercontent.com/u/11130348?v=4","gravatar_id":"","url":"https://api.github.com/users/ZelphirKaltstahl","html_url":"https://github.com/ZelphirKaltstahl","followers_url":"https://api.github.com/users/ZelphirKaltstahl/followers","following_url":"https://api.github.com/users/ZelphirKaltstahl/following{/other_user}","gists_url":"https://api.github.com/users/ZelphirKaltstahl/gists{/gist_id}","starred_url":"https://api.github.com/users/ZelphirKaltstahl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ZelphirKaltstahl/subscriptions","organizations_url":"https://api.github.com/users/ZelphirKaltstahl/orgs","repos_url":"https://api.github.com/users/ZelphirKaltstahl/repos","events_url":"https://api.github.com/users/ZelphirKaltstahl/events{/privacy}","received_events_url":"https://api.github.com/users/ZelphirKaltstahl/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-25T16:03:01Z","updated_at":"2018-03-26T15:33:50Z","closed_at":"2018-03-26T15:33:50Z","author_association":"NONE","body":"I am looking at the quickstart guide at <https://actix.github.io/actix-web/guide/qs_3_5.html>. There at the example code for spawning another actix system using a `Thread` with `spawn()`.\r\n\r\nI have the following code:\r\n\r\n``` rust\r\n// actix-web the server framework we are using.\r\nextern crate actix;\r\nextern crate actix_web;\r\nuse actix::*;\r\nuse actix_web::*;\r\n\r\nuse std::thread;\r\nuse std::sync::mpsc;\r\n\r\nmod model;\r\nuse model::*;\r\n\r\n// Globals are declared outside all other scopes.\r\nstatic PORT: u32 = 8000;\r\n\r\n// A request handler is a function that accepts a HttpRequest instance as its only parameter\r\n// and returns a type that can be converted into HttpResponse:\r\nfn index(_req: HttpRequest) -> String {\r\n    String::from(\"Hello World!\")\r\n}\r\n\r\n\r\nfn main() {\r\n    let (tx, rx) = mpsc::channel();\r\n\r\n    // Start stuff in a new thread.\r\n    thread::spawn(move || {\r\n        // HttpServer is an actix actor.\r\n        // It has to be initialized within properly configured actix system.\r\n        // Here we initialize such a system.\r\n        let sys = actix::System::new(\"rugi\");\r\n\r\n        println!(\"Trying to start on localhost:{}.\", PORT.to_string());\r\n        // run a new server on some port\r\n        let addr = HttpServer::new(\r\n            // make a new application\r\n            // apparently here a lambda expression is needed\r\n            // This is what the guide calls \"Application factory\",\r\n            // because you get a new Application object when you call this procedure.\r\n            || Application::new()\r\n                .prefix(\"/\")\r\n                .resource(\"/index\", |req| req.f(index)))\r\n            .bind(format!(\"localhost:{}\", PORT)).expect(&format!(\"Could not bind to port {}\", PORT))\r\n            .shutdown_timeout(60)\r\n            .start();  // <- use start_tls() for TLS\r\n\r\n        let _ = tx.send(addr);\r\n        let _ = sys.run();\r\n    });\r\n\r\n    // Receive the address of the started server from the channel.\r\n    let addr = rx.recv().unwrap();\r\n    // Send a stop message to the server's address.\r\n    let _ = addr.send(server::StopServer{graceful:true}).wait();\r\n}\r\n```\r\n\r\nEverything seems to work, except that `wait` is apparently not working:\r\n\r\n```\r\nitems from traits can only be used if the trait is in scope [E0599]\r\n\r\nthe method `wait` exists but the following trait bounds were not satisfied:\r\n`actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer> : actix::ContextFutureSpawner<_>`\r\n`&actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer> : actix::ContextFutureSpawner<_>`\r\n`&mut actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer> : actix::ContextFutureSpawner<_>` [E0599]\r\n\r\nno method named `wait` found for type `actix::dev::Request<actix::Syn, actix_web::HttpServer<actix_web::application::HttpApplication>, actix_web::server::StopServer>` in the current scope [E0599]\r\n```\r\n\r\nNow I am unsure how to go on.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/134","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/134/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/134/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/134/events","html_url":"https://github.com/actix/actix-web/issues/134","id":308324735,"number":134,"title":"Segmentation fault on release mode in nightly","user":{"login":"JordiPolo","id":21734,"avatar_url":"https://avatars2.githubusercontent.com/u/21734?v=4","gravatar_id":"","url":"https://api.github.com/users/JordiPolo","html_url":"https://github.com/JordiPolo","followers_url":"https://api.github.com/users/JordiPolo/followers","following_url":"https://api.github.com/users/JordiPolo/following{/other_user}","gists_url":"https://api.github.com/users/JordiPolo/gists{/gist_id}","starred_url":"https://api.github.com/users/JordiPolo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JordiPolo/subscriptions","organizations_url":"https://api.github.com/users/JordiPolo/orgs","repos_url":"https://api.github.com/users/JordiPolo/repos","events_url":"https://api.github.com/users/JordiPolo/events{/privacy}","received_events_url":"https://api.github.com/users/JordiPolo/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-25T05:53:59Z","updated_at":"2018-03-28T15:02:46Z","closed_at":"2018-03-28T15:02:46Z","author_association":"NONE","body":"I'm testing out Actix, with a very simple setup. \r\nThe following works well in debug and release mode in the stable compiler 1.24.1\r\nWorks in debug mode but fails with a segmentation fault right away when started with nightly compiler (March 24th, have not tried with previous)\r\n\r\nMy very simple setup, Cargo.toml:\r\n```\r\n[dependencies]\r\nfutures = \"*\"\r\nenv_logger = \"0.5\"\r\nactix = \"0.5\"\r\nactix-web = \"0.4\"\r\n```\r\n(actix-web 0.4.10 , actix 0.5.5)\r\n\r\nsrc/main.rs\r\n```\r\nextern crate actix;\r\nextern crate actix_web;\r\nextern crate env_logger;\r\n\r\nuse std::env;\r\nuse actix_web::*;\r\n\r\nfn main() {\r\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\r\n    env::set_var(\"RUST_BACKTRACE\", \"1\");\r\n    env_logger::init();\r\n    let sys = actix::System::new(\"basic-example\");\r\n\r\n    let _addr = HttpServer::new(\r\n        || Application::new()\r\n            // enable logger\r\n            .middleware(middleware::Logger::default())\r\n                        // register favicon\r\n         //   .resource(\"/favicon.ico\", |r| r.f(favicon))\r\n                        // static files\r\n            .handler(\"/\", fs::StaticFiles::new(\"static/\", true)))\r\n        .bind(\"127.0.0.1:8080\").expect(\"Can not bind to 127.0.0.1:8080\")\r\n        .shutdown_timeout(0)    // <- Set shutdown timeout to 0 seconds (default 60s)\r\n        .start();\r\n\r\n    println!(\"Starting http server: 127.0.0.1:8080\");\r\n    let _ = sys.run();\r\n}\r\n```\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/133","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/133/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/133/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/133/events","html_url":"https://github.com/actix/actix-web/issues/133","id":308288586,"number":133,"title":"Websocket handling don't allow throttling of outgoing requests","user":{"login":"uzytkownik","id":5706,"avatar_url":"https://avatars3.githubusercontent.com/u/5706?v=4","gravatar_id":"","url":"https://api.github.com/users/uzytkownik","html_url":"https://github.com/uzytkownik","followers_url":"https://api.github.com/users/uzytkownik/followers","following_url":"https://api.github.com/users/uzytkownik/following{/other_user}","gists_url":"https://api.github.com/users/uzytkownik/gists{/gist_id}","starred_url":"https://api.github.com/users/uzytkownik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uzytkownik/subscriptions","organizations_url":"https://api.github.com/users/uzytkownik/orgs","repos_url":"https://api.github.com/users/uzytkownik/repos","events_url":"https://api.github.com/users/uzytkownik/events{/privacy}","received_events_url":"https://api.github.com/users/uzytkownik/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-24T18:48:02Z","updated_at":"2018-03-27T15:02:49Z","closed_at":"2018-03-27T15:02:49Z","author_association":"NONE","body":"Currently there is no way of detecting throttling of the outgoing data. This means that if data is generated by outside source (for example other clients) and connection was throttled so client does not consume data fast enough the upstream producer doesn't have a way of knowing it.\r\n\r\nIdeally there would be a way to ensure that `WebsocketContext` `stream` (and any buffering that happens below this level) does not happens out of bound.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/131","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/131/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/131/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/131/events","html_url":"https://github.com/actix/actix-web/issues/131","id":307869529,"number":131,"title":"Active ClientRequests sometimes segfaults on exit","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-23T01:27:04Z","updated_at":"2018-03-23T03:02:28Z","closed_at":"2018-03-23T03:02:28Z","author_association":"NONE","body":"Not sure how to reduce this one down to an example to replicate, but it appears to be an issue when there are active Client Requests, and you try to shut down the actix system.\r\n\r\nI have a few endpoints that are proxy to other webservices.\r\n\r\nIf a browser is making requests to the actix web service, and you try to shut it down, then the following is displayed in the logs:\r\n\r\n```\r\nSIGINT received, exiting\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Shutting down http worker, 0 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Force shutdown http worker, 1 connections\r\n INFO  actix_web::server::worker     > Shutting down http worker, 0 connections\r\nSegmentation fault: 11\r\n```\r\n\r\nI can see that there are active connections to the proxy locations, even though the client has closed connection with actix.  I.e, they are sticking around for a bit.  Eventually (after like 5 seconds?) these connections close off.\r\n\r\nI.e, `client -> actix` is closed, but `actix -> service` is open.\r\n\r\nIt might be to do with something when the `ClientRequest` connections are finally destroyed","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/130","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/130/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/130/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/130/events","html_url":"https://github.com/actix/actix-web/issues/130","id":307851859,"number":130,"title":"Panic on invalid URL characters","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-22T23:37:49Z","updated_at":"2018-03-23T01:11:07Z","closed_at":"2018-03-23T01:11:07Z","author_association":"NONE","body":"If you submit a request to an actix web server which doesn't include valid Uri characters, you will get a panic\r\n\r\nSteps to replicate:\r\n\r\n* Start up the `hello-world` example\r\n* Submit a request via curl with an invalid `^` character:\r\n\r\n```\r\ncurl 'http://localhost:8080/^'\r\n```\r\n\r\n* You will see the following:\r\n\r\n```\r\nStarting http server: 127.0.0.1:8080\r\nthread 'arbiter:\"b5cc4942-8c9d-4914-a620-15c02e8d0581\":\"actor\"' panicked at 'called `Result::unwrap()` on an `Err` value: InvalidUri(InvalidUriChar)', libcore/result.rs:945:5\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:207\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:223\r\n   4: std::panicking::begin_panic\r\n             at libstd/panicking.rs:402\r\n   5: std::panicking::try::do_call\r\n             at libstd/panicking.rs:349\r\n   6: std::panicking::try::do_call\r\n             at libstd/panicking.rs:325\r\n   7: core::ptr::drop_in_place\r\n             at libcore/panicking.rs:72\r\n   8: core::result::unwrap_failed\r\n             at /Users/travis/build/rust-lang/rust/src/libcore/macros.rs:26\r\n   9: <core::result::Result<T, E>>::unwrap\r\n             at /Users/travis/build/rust-lang/rust/src/libcore/result.rs:782\r\n  10: actix_web::server::h1::Reader::parse_message\r\n             at /Users/cetra/git/actix-web/src/server/h1.rs:507\r\n  11: actix_web::server::h1::Reader::parse\r\n             at /Users/cetra/git/actix-web/src/server/h1.rs:460\r\n  12: <actix_web::server::h1::Http1<T, H>>::poll_io\r\n             at /Users/cetra/git/actix-web/src/server/h1.rs:137\r\n  13: <actix_web::server::h1::Http1<T, H>>::poll\r\n             at /Users/cetra/git/actix-web/src/server/h1.rs:119\r\n  14: <actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll\r\n             at /Users/cetra/git/actix-web/src/server/channel.rs:88\r\n  15: <actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll\r\n             at /Users/cetra/git/actix-web/src/server/channel.rs:139\r\n  16: <alloc::boxed::Box<F> as futures::future::Future>::poll\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.19/src/future/mod.rs:113\r\n  17: <futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.19/src/task_impl/mod.rs:289\r\n  18: <futures::task_impl::Spawn<T>>::enter::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.19/src/task_impl/mod.rs:363\r\n  19: futures::task_impl::std::set\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.19/src/task_impl/std/mod.rs:78\r\n  20: <futures::task_impl::Spawn<T>>::enter\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.19/src/task_impl/mod.rs:363\r\n  21: <futures::task_impl::Spawn<T>>::poll_future_notify\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.19/src/task_impl/mod.rs:289\r\n  22: <tokio::executor::current_thread::scheduler::Scheduled<'a, U>>::tick\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/scheduler.rs:343\r\n  23: <tokio::executor::current_thread::scheduler::Scheduler<U>>::tick::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/scheduler.rs:323\r\n  24: <tokio::executor::current_thread::Borrow<'a, U>>::enter::{{closure}}::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/mod.rs:640\r\n  25: tokio::executor::current_thread::CurrentRunner::set_spawn\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/mod.rs:672\r\n  26: <tokio::executor::current_thread::Borrow<'a, U>>::enter::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/mod.rs:639\r\n  27: <std::thread::local::LocalKey<T>>::try_with\r\n             at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:290\r\n  28: <std::thread::local::LocalKey<T>>::with\r\n             at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:244\r\n  29: <tokio::executor::current_thread::Borrow<'a, U>>::enter\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/mod.rs:638\r\n  30: <tokio::executor::current_thread::scheduler::Scheduler<U>>::tick\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/scheduler.rs:323\r\n  31: <tokio::executor::current_thread::Entered<'a, P>>::tick\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/mod.rs:531\r\n  32: <tokio::executor::current_thread::Entered<'a, P>>::turn\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.3/src/executor/current_thread/mod.rs:473\r\n  33: tokio_core::reactor::Core::poll::{{closure}}::{{closure}}::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.15/src/reactor/mod.rs:326\r\n  34: <scoped_tls::ScopedKey<T>>::set\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.1/src/lib.rs:155\r\n  35: tokio_core::reactor::Core::poll::{{closure}}::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.15/src/reactor/mod.rs:325\r\n  36: tokio_executor::global::with_default::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.0/src/global.rs:147\r\n  37: <std::thread::local::LocalKey<T>>::try_with\r\n             at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:290\r\n  38: <std::thread::local::LocalKey<T>>::with\r\n             at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:244\r\n  39: tokio_executor::global::with_default\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.0/src/global.rs:121\r\n  40: tokio_core::reactor::Core::poll::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.15/src/reactor/mod.rs:289\r\n  41: tokio_reactor::with_default::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.0/src/lib.rs:193\r\n  42: <std::thread::local::LocalKey<T>>::try_with\r\n             at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:290\r\n  43: <std::thread::local::LocalKey<T>>::with\r\n             at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:244\r\n  44: tokio_reactor::with_default\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.0/src/lib.rs:185\r\n  45: futures::task_impl::Notify::clone_id\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.15/src/reactor/mod.rs:288\r\n  46: tokio_core::reactor::Core::run\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.15/src/reactor/mod.rs:264\r\n  47: actix::arbiter::Arbiter::new::{{closure}}\r\n             at /Users/cetra/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.5.5/src/arbiter.rs:89\r\n```\r\n\r\n### What I'd expect to happen\r\n\r\nMy suggestion would be that either the invalid characters are passed through and allowed, OR they are not allowed and a`400` is returned to the client.  \r\n\r\nIf this could be configurable, it would be awesome, as some legacy clients I deal with can't be changed.\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/129","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/129/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/129/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/129/events","html_url":"https://github.com/actix/actix-web/issues/129","id":307534715,"number":129,"title":"URL Requests are truncated via proxy","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-22T07:37:22Z","updated_at":"2018-03-22T14:44:44Z","closed_at":"2018-03-22T14:44:44Z","author_association":"NONE","body":"I'm seeing some weird stuff when trying to proxy requests with large URLs (around 400 characters), whereby it looks like the buffer is overriding the HTTP request headers.\r\n\r\nAs an example, if set up a proxy to a URL `/blah` and append the query params from the client. \r\n\r\nIf I have a small amount of characters, I see this in wireshark:\r\n```\r\nGET /blah?sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss= HTTP/1.1\r\nhost: 127.0.0.1\r\n....\r\n```\r\n\r\nIf I append more characters, to the request, then the URL is completely truncated out:\r\n\r\n```\r\nGET host: 127.0.0.1\r\n....\r\n```\r\n\r\nNot really sure what's happening here.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/128","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/128/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/128/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/128/events","html_url":"https://github.com/actix/actix-web/issues/128","id":307472112,"number":128,"title":"More ergonomic proxy support","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-03-22T01:15:55Z","updated_at":"2018-03-22T09:23:42Z","closed_at":"2018-03-22T09:23:42Z","author_association":"NONE","body":"Not sure if I'm doing things incorrectly, but using the http proxy example is fine if it's only a GET request, and you don't want to send the client headers or body.\r\n\r\nIt gets much more interesting if you want to copy over the headers, and stream out the request body:\r\n\r\n```\r\nlet mut builder = client::ClientRequest::build();\r\n\r\nfor (key, value) in req.headers() {\r\n    builder.header(key.clone(), value.clone());\r\n}\r\n\r\nbuilder\r\n    .uri(&url)\r\n    .method(req.method().clone())\r\n    .body(Body::Streaming(Box::new(req.from_err())))\r\n    .unwrap()\r\n    .send()\r\n    .map_err(error::Error::from)\r\n    .and_then(|resp| {\r\n        let mut client_response = HttpResponse::build(resp.status());\r\n\r\n        for (key, value) in resp.headers() {\r\n            client_response.header(key.clone(), value.clone());\r\n        }\r\n        client_response.body(Body::Streaming(Box::new(resp.from_err())))\r\n            .map_err(|e| e.into()) // HttpOk::build() mayb return HttpError, we need to convert it to a Error\r\n    })\r\n    .responder()\r\n```\r\n\r\nWhere `req` is a `HttpRequest<S>`\r\n\r\nOn top of having to iterate through all the headers, using the `header()` method, the state `<S>` has to be `'static` for this to allow the streaming boxed body.\r\n\r\nIs there a more ergonomic way of doing this without having to do so much handling?\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/127","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/127/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/127/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/127/events","html_url":"https://github.com/actix/actix-web/issues/127","id":307074494,"number":127,"title":"Connection pooling when using ClientRequest/ClientRequestBuilder","user":{"login":"dcastelltort","id":6246259,"avatar_url":"https://avatars1.githubusercontent.com/u/6246259?v=4","gravatar_id":"","url":"https://api.github.com/users/dcastelltort","html_url":"https://github.com/dcastelltort","followers_url":"https://api.github.com/users/dcastelltort/followers","following_url":"https://api.github.com/users/dcastelltort/following{/other_user}","gists_url":"https://api.github.com/users/dcastelltort/gists{/gist_id}","starred_url":"https://api.github.com/users/dcastelltort/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dcastelltort/subscriptions","organizations_url":"https://api.github.com/users/dcastelltort/orgs","repos_url":"https://api.github.com/users/dcastelltort/repos","events_url":"https://api.github.com/users/dcastelltort/events{/privacy}","received_events_url":"https://api.github.com/users/dcastelltort/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-03-20T23:26:45Z","updated_at":"2018-03-21T19:33:46Z","closed_at":"2018-03-21T19:33:46Z","author_association":"NONE","body":"Hi,\r\n\r\nFirst, thanks for actix/actix web, and all the work/time you put into it, the more I drill into it, the more I like it :)\r\n\r\nI'm currently expanding/building on top of the http_proxy example. (needing to build an application proxy at the app level, not the protocol). I'm trying to get as much throughput, and as low latency as possible. I've increased backlog, threads, removed all logging , but I'm still at 1/3 of the throughput of the service I want to proxy.\r\n\r\nI think I might spend too much time opening/closing HTTP connections when using client::clientRequest, and I'm thinking to pool connections and reuse them if possible. I noted there is with_connector() and [with_connection](https://docs.rs/actix-web/0.4.9/actix_web/client/struct.ClientRequestBuilder.html#method.with_connection)() on ClientRequestBuilder but I'm having a hardtime figuring out how/where to create such pool/connection and reuse these as I build those requests.\r\n\r\nI'm kindly asking for help, if you could share with me some hint/guidance as to where I could look for example/reference in the code to get myself booted, please ?\r\n\r\nThanks for any help you could provide.\r\nKind regards.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/126","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/126/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/126/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/126/events","html_url":"https://github.com/actix/actix-web/issues/126","id":306727714,"number":126,"title":"Can actix-web query a site?","user":{"login":"joshsleeper","id":849941,"avatar_url":"https://avatars1.githubusercontent.com/u/849941?v=4","gravatar_id":"","url":"https://api.github.com/users/joshsleeper","html_url":"https://github.com/joshsleeper","followers_url":"https://api.github.com/users/joshsleeper/followers","following_url":"https://api.github.com/users/joshsleeper/following{/other_user}","gists_url":"https://api.gith
64f5
ub.com/users/joshsleeper/gists{/gist_id}","starred_url":"https://api.github.com/users/joshsleeper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joshsleeper/subscriptions","organizations_url":"https://api.github.com/users/joshsleeper/orgs","repos_url":"https://api.github.com/users/joshsleeper/repos","events_url":"https://api.github.com/users/joshsleeper/events{/privacy}","received_events_url":"https://api.github.com/users/joshsleeper/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-20T04:42:54Z","updated_at":"2018-03-21T22:35:30Z","closed_at":"2018-03-21T22:35:18Z","author_association":"NONE","body":"That is, from everything I've read, it seems like `actix-web` is great at _responding_ to requests, but I can't find anything about _making_ requests to some URL.\r\n\r\ne.g. I want to query some external site and use that response data within my `actix-web` server.\r\n\r\nMaybe that's totally out of scope for the project, but I figured I'd ask.\r\nThanks!","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/125","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/125/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/125/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/125/events","html_url":"https://github.com/actix/actix-web/issues/125","id":306710963,"number":125,"title":"Guidance around unit testing where `SyncArbiter` is involved","user":{"login":"brandur","id":96890,"avatar_url":"https://avatars1.githubusercontent.com/u/96890?v=4","gravatar_id":"","url":"https://api.github.com/users/brandur","html_url":"https://github.com/brandur","followers_url":"https://api.github.com/users/brandur/followers","following_url":"https://api.github.com/users/brandur/following{/other_user}","gists_url":"https://api.github.com/users/brandur/gists{/gist_id}","starred_url":"https://api.github.com/users/brandur/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brandur/subscriptions","organizations_url":"https://api.github.com/users/brandur/orgs","repos_url":"https://api.github.com/users/brandur/repos","events_url":"https://api.github.com/users/brandur/events{/privacy}","received_events_url":"https://api.github.com/users/brandur/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2018-03-20T02:58:02Z","updated_at":"2018-03-30T02:24:40Z","closed_at":"2018-03-30T02:24:40Z","author_association":"NONE","body":"Hi there,\r\n\r\nI'm writing an `actix-web`-based application, and was trying to follow the [guide on building unit tests for endpoints](https://actix.github.io/actix-web/guide/qs_8.html#unit-tests). The complication though is that I'm using a `SyncArbiter` in my application [very much like the Diesel example](https://github.com/actix/actix-web/blob/master/examples/diesel/src/main.rs) that's part of this project.\r\n\r\nTesting endpoints that don't need a `SyncArbiter` worked fine, but when invoking one that did, I ran into a problem where messages to the arbiter would just hang. I assume that's because I don't have an `actix::System` running, but I've tried a variety of different ways to get this working, and so far have come up with nothing.\r\n\r\n`actix::System.run` blocks, so I tried spawning one in its own thread:\r\n\r\n``` rust\r\n        let _join = ::std::thread::spawn(move || {\r\n            let system = actix::System::new(\"podcore-api-test\");\r\n            system.run();\r\n        });\r\n```\r\n\r\nBut that still produces the message `Arbiter is not running` when I try to `start` a `SyncArbiter`. I tried something like this, but it had the same problem:\r\n\r\n``` rust\r\n        let _join = ::std::thread::spawn(move || {\r\n            let system = actix::System::new(\"podcore-api-test\");\r\n            let _ = actix::Arbiter::new(\"arbiter\");\r\n            system.run();\r\n        });\r\n```\r\n\r\nI tried `TestServer` and a few other things, but nothing with success.\r\n\r\nThe fundamental problem is that I don't really have a good understanding of what services I'm supposed to start myself, and how I'm supposed to run them (i.e., threaded or otherwise). I realized through trial and error that there's some kind of globals magic going on (and confirmed by the various `thread_local!` statics in the source), but I don't really get how it's all supposed to interact. I tried to look for prior art in the `actix-web` test suite, but so far haven't come up with anything usable.\r\n\r\nCould I get some guidance on what exactly I'm supposed to do to get this working? I've opened an issue because I think this could be a good addition to the user guide — the current state is the testing article is useful, but not complete, and I don't think I'll be the only person confused by this sort of thing. Thanks!\r\n\r\nI should also note that I know my implementation works fine already because I'm able to start it and use it with cURL. It's just the testing environment that I'm having trouble with.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/120","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/120/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/120/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/120/events","html_url":"https://github.com/actix/actix-web/issues/120","id":304893256,"number":120,"title":"Client Query Parameters not sent","user":{"login":"glademiller","id":2006148,"avatar_url":"https://avatars2.githubusercontent.com/u/2006148?v=4","gravatar_id":"","url":"https://api.github.com/users/glademiller","html_url":"https://github.com/glademiller","followers_url":"https://api.github.com/users/glademiller/followers","following_url":"https://api.github.com/users/glademiller/following{/other_user}","gists_url":"https://api.github.com/users/glademiller/gists{/gist_id}","starred_url":"https://api.github.com/users/glademiller/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glademiller/subscriptions","organizations_url":"https://api.github.com/users/glademiller/orgs","repos_url":"https://api.github.com/users/glademiller/repos","events_url":"https://api.github.com/users/glademiller/events{/privacy}","received_events_url":"https://api.github.com/users/glademiller/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-03-13T18:54:50Z","updated_at":"2018-03-13T20:15:37Z","closed_at":"2018-03-13T20:15:36Z","author_association":"CONTRIBUTOR","body":"When adding query parameters to the URI they are not sent through the client.\r\nI believe the issue is here https://github.com/actix/actix-web/blob/master/src/client/writer.rs#L115","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/117","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/117/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/117/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/117/events","html_url":"https://github.com/actix/actix-web/issues/117","id":304081587,"number":117,"title":"CORS problems","user":{"login":"pka","id":19007,"avatar_url":"https://avatars2.githubusercontent.com/u/19007?v=4","gravatar_id":"","url":"https://api.github.com/users/pka","html_url":"https://github.com/pka","followers_url":"https://api.github.com/users/pka/followers","following_url":"https://api.github.com/users/pka/following{/other_user}","gists_url":"https://api.github.com/users/pka/gists{/gist_id}","starred_url":"https://api.github.com/users/pka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pka/subscriptions","organizations_url":"https://api.github.com/users/pka/orgs","repos_url":"https://api.github.com/users/pka/repos","events_url":"https://api.github.com/users/pka/events{/privacy}","received_events_url":"https://api.github.com/users/pka/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-03-10T16:02:29Z","updated_at":"2018-03-11T17:45:52Z","closed_at":"2018-03-10T18:28:14Z","author_association":"NONE","body":"I've two problems with CORS headers.\r\n\r\nWhen addding CORS middleware with\r\n```\r\n.resource(\"/projects/{id}\", |r| {\r\n                 cors::Cors::build().finish().unwrap().register(r);\r\n```\r\nactix-web is panicking in requests without ORIGIN header.\r\nRequest:\r\n```\r\ncurl 'http://127.0.0.1:8000/projects/38'\r\n```\r\nServer:\r\n```\r\nthread 'arbiter:\"656c57b6-8b14-421b-8a5f-15a7fabef926\":\"actor\"' panicked at 'called `Option::unwrap()` on a `None` value', /checkout/src/libcore/option.rs:335:21\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:68\r\n             at /checkout/src/libstd/sys_common/backtrace.rs:57\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at /checkout/src/libstd/panicking.rs:381\r\n   3: std::panicking::default_hook\r\n             at /checkout/src/libstd/panicking.rs:397\r\n   4: std::panicking::rust_panic_with_hook\r\n             at /checkout/src/libstd/panicking.rs:577\r\n   5: std::panicking::begin_panic\r\n             at /checkout/src/libstd/panicking.rs:538\r\n   6: std::panicking::begin_panic_fmt\r\n             at /checkout/src/libstd/panicking.rs:522\r\n   7: rust_begin_unwind\r\n             at /checkout/src/libstd/panicking.rs:498\r\n   8: core::panicking::panic_fmt\r\n             at /checkout/src/libcore/panicking.rs:71\r\n   9: core::panicking::panic\r\n             at /checkout/src/libcore/panicking.rs:51\r\n  10: <core::option::Option<T>>::unwrap\r\n             at /checkout/src/libcore/macros.rs:20\r\n  11: <actix_web::middleware::cors::Cors as actix_web::middleware::Middleware<S>>::response\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/middleware/cors.rs:353\r\n  12: <actix_web::route::RunMiddlewares<S>>::init\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/route.rs:343\r\n  13: <actix_web::route::WaitingResponse<S>>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/route.rs:321\r\n  14: <actix_web::route::ComposeState<S>>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/route.rs:176\r\n  15: <actix_web::route::Compose<S> as futures::future::Future>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/route.rs:205\r\n  16: <alloc::boxed::Box<F> as futures::future::Future>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.18/src/future/mod.rs:113\r\n  17: <actix_web::pipeline::WaitingResponse<S, H>>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/pipeline.rs:315\r\n  18: <actix_web::pipeline::PipelineState<S, H>>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/pipeline.rs:53\r\n  19: <actix_web::pipeline::Pipeline<S, H> as actix_web::server::HttpHandlerTask>::poll_io\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/pipeline.rs:181\r\n  20: <actix_web::server::h1::Http1<T, H>>::poll_io\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/server/h1.rs:211\r\n  21: <actix_web::server::h1::Http1<T, H>>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/server/h1.rs:105\r\n  22: <actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.4.3/src/server/channel.rs:87\r\n  23: <alloc::boxed::Box<F> as futures::future::Future>::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.18/src/future/mod.rs:113\r\n  24: <futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.18/src/task_impl/mod.rs:289\r\n  25: <futures::task_impl::Spawn<T>>::enter::{{closure}}\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.18/src/task_impl/mod.rs:363\r\n  26: futures::task_impl::std::set\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.18/src/task_impl/std/mod.rs:78\r\n  27: <futures::task_impl::Spawn<T>>::enter\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.18/src/task_impl/mod.rs:363\r\n  28: <futures::task_impl::Spawn<T>>::poll_future_notify\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.18/src/task_impl/mod.rs:289\r\n  29: tokio_core::reactor::Core::dispatch_task::{{closure}}\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.12/src/reactor/mod.rs:359\r\n  30: <scoped_tls::ScopedKey<T>>::set\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.1/src/lib.rs:155\r\n  31: tokio_core::reactor::Core::dispatch_task\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.12/src/reactor/mod.rs:358\r\n  32: tokio_core::reactor::Core::dispatch\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.12/src/reactor/mod.rs:319\r\n  33: tokio_core::reactor::Core::poll\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.12/src/reactor/mod.rs:307\r\n  34: tokio_core::reactor::Core::run\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.12/src/reactor/mod.rs:241\r\n  35: actix::arbiter::Arbiter::new::{{closure}}\r\n             at /home/pi/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.5.1/src/arbiter.rs:89\r\n```\r\n\r\nA workaround is adding send_wildcard:\r\n```\r\ncors::Cors::build().send_wildcard().finish().unwrap().register(r)\r\n```\r\n\r\nAnd since 0.4.3 (resp. >0.4.0) I get a 400 Bad Request for PATCH requests:\r\n\r\n* OPTIONS Request: OK\r\n```\r\ncurl -v 'http://127.0.0.1:8000/projects/38' -X OPTIONS -H 'Access-Control-Request-Method: PATCH' -H 'Access-Control-Request-Headers: content-type' -H 'Origin: http://localhost:5000'\r\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\r\n> OPTIONS /projects/38 HTTP/1.1\r\n> User-Agent: curl/7.35.0\r\n> Host: 127.0.0.1:8000\r\n> Accept: */*\r\n> Access-Control-Request-Method: PATCH\r\n> Access-Control-Request-Headers: content-type\r\n> Origin: http://localhost:5000\r\n> \r\n< HTTP/1.1 200 OK\r\n< content-length: 0\r\n< access-control-allow-headers: content-type\r\n< access-control-allow-origin: *\r\n< access-control-allow-methods: PATCH,HEAD,POST,GET,DELETE,PUT,OPTIONS\r\n< vary: Origin\r\n< date: Sat, 10 Mar 2018 14:44:58 GMT\r\n```\r\n* PATCH Request: 400 Bad Request\r\n```\r\ncurl -v 'http://127.0.0.1:8000/projects/38' --data-binary @data.json -X PATCH -H 'Content-Type: application/vnd.api+json' -H 'Origin: http://localhost:5000'\r\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\r\n> PATCH /projects/38 HTTP/1.1\r\n> User-Agent: curl/7.35.0\r\n> Host: 127.0.0.1:8000\r\n> Accept: */*\r\n> Content-Type: application/vnd.api+json\r\n> Origin: http://localhost:5000\r\n> Content-Length: 105\r\n> \r\n* upload completely sent off: 105 out of 105 bytes\r\n< HTTP/1.1 400 Bad Request\r\n< content-length: 0\r\n< date: Sat, 10 Mar 2018 14:44:27 GMT\r\n< \r\n```\r\n\r\nSame request responds as expected with actix-web 5634e5794f:\r\n```\r\ncurl -v 'http://127.0.0.1:8000/projects/38' --data-binary @data.json -X PATCH -H 'Accept: application/vnd.api+json' -H 'Content-Type: application/vnd.api+json' -H 'Origin: http://localhost:5000'\r\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\r\n> PATCH /projects/38 HTTP/1.1\r\n> User-Agent: curl/7.35.0\r\n> Host: 127.0.0.1:8000\r\n> Accept: application/vnd.api+json\r\n> Content-Type: application/vnd.api+json\r\n> Origin: http://localhost:5000\r\n> Content-Length: 105\r\n> \r\n* upload completely sent off: 105 out of 105 bytes\r\n< HTTP/1.1 200 OK\r\n< content-length: 11\r\n< content-type: application/vnd.api+json\r\n< access-control-allow-origin: *\r\n< vary: Origin\r\n< date: Sat, 10 Mar 2018 14:55:05 GMT\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/107","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/107/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/107/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/107/events","html_url":"https://github.com/actix/actix-web/issues/107","id":302870536,"number":107,"title":"Getting the request state in a future that consumes the request","user":{"login":"niklasf","id":402777,"avatar_url":"https://avatars2.githubusercontent.com/u/402777?v=4","gravatar_id":"","url":"https://api.github.com/users/niklasf","html_url":"https://github.com/niklasf","followers_url":"https://api.github.com/users/niklasf/followers","following_url":"https://api.github.com/users/niklasf/following{/other_user}","gists_url":"https://api.github.com/users/niklasf/gists{/gist_id}","starred_url":"https://api.github.com/users/niklasf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/niklasf/subscriptions","organizations_url":"https://api.github.com/users/niklasf/orgs","repos_url":"https://api.github.com/users/niklasf/repos","events_url":"https://api.github.com/users/niklasf/events{/privacy}","received_events_url":"https://api.github.com/users/niklasf/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-06T21:21:46Z","updated_at":"2018-03-06T21:33:53Z","closed_at":"2018-03-06T21:33:53Z","author_association":"CONTRIBUTOR","body":"I basically want to do this in a handler:\r\n\r\n```rust\r\nreq.urlencoded()\r\n    .from_err()\r\n    .and_then(move |params| {\r\n        let state = req.state(); // req has been already moved into urlencoded :(\r\n    })\r\n    .responder()\r\n```\r\n\r\nFor the same reason I also can't borrow it in advance. Am I missing an elegant way?\r\n\r\nUsing this workaround for now:\r\n\r\n```rust\r\nimpl<S> HttpRequest<S> {\r\n    pub fn split_state(self) -> (HttpRequest<()>, Rc<S>) {\r\n        (HttpRequest(self.0, None, self.2), self.1.unwrap())\r\n    }\r\n}\r\n\r\n// [...]\r\n\r\nlet (req, state) = req.split_state();\r\n\r\nreq.urlencoded()\r\n    .from_err()\r\n    .and_then(move |params| {\r\n        let state = state; // yay!\r\n    })\r\n    .responder()\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/105","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/105/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/105/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/105/events","html_url":"https://github.com/actix/actix-web/issues/105","id":302725350,"number":105,"title":"Start server from RawFd","user":{"login":"ivegotasthma","id":2437675,"avatar_url":"https://avatars2.githubusercontent.com/u/2437675?v=4","gravatar_id":"","url":"https://api.github.com/users/ivegotasthma","html_url":"https://github.com/ivegotasthma","followers_url":"https://api.github.com/users/ivegotasthma/followers","following_url":"https://api.github.com/users/ivegotasthma/following{/other_user}","gists_url":"https://api.github.com/users/ivegotasthma/gists{/gist_id}","starred_url":"https://api.github.com/users/ivegotasthma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivegotasthma/subscriptions","organizations_url":"https://api.github.com/users/ivegotasthma/orgs","repos_url":"https://api.github.com/users/ivegotasthma/repos","events_url":"https://api.github.com/users/ivegotasthma/events{/privacy}","received_events_url":"https://api.github.com/users/ivegotasthma/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-06T14:36:55Z","updated_at":"2018-03-07T20:13:11Z","closed_at":"2018-03-07T20:13:11Z","author_association":"NONE","body":"Cargo watch does not work because the sometimes the socket that's running will not be closed in time. That's why catflap exists. The problem is that the actix-web server does not allow for servers to be created from a raw file descriptor.\r\n\r\nhttps://github.com/passcod/catflap  \r\n\r\nThere are integrations with hyper and iron but not with actix-web.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/104","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/104/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/104/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/104/events","html_url":"https://github.com/actix/actix-web/issues/104","id":302705160,"number":104,"title":"request with a large gzip body, response is BAD_REQUEST","user":{"login":"mockersf","id":8672791,"avatar_url":"https://avatars3.githubusercontent.com/u/8672791?v=4","gravatar_id":"","url":"https://api.github.com/users/mockersf","html_url":"https://github.com/mockersf","followers_url":"https://api.github.com/users/mockersf/followers","following_url":"https://api.github.com/users/mockersf/following{/other_user}","gists_url":"https://api.github.com/users/mockersf/gists{/gist_id}","starred_url":"https://api.github.com/users/mockersf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockersf/subscriptions","organizations_url":"https://api.github.com/users/mockersf/orgs","repos_url":"https://api.github.com/users/mockersf/repos","events_url":"https://api.github.com/users/mockersf/events{/privacy}","received_events_url":"https://api.github.com/users/mockersf/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-03-06T13:41:13Z","updated_at":"2018-03-06T19:02:30Z","closed_at":"2018-03-06T19:02:30Z","author_association":"CONTRIBUTOR","body":"when posting a request with a large gzipped body, the response is always BAD_REQUEST\r\n\r\nI added a test in tests/test_server.rs: test_gzip_encoding_large_random in #102\r\nwith a random string of 6000 characters, the response is an error (5000 random chars is OK, 6000 same chars is OK)","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/103","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/103/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/103/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/103/events","html_url":"https://github.com/actix/actix-web/issues/103","id":302702291,"number":103,"title":"gzipped response body is cut around 45kB of gzip","user":{"login":"mockersf","id":8672791,"avatar_url":"https://avatars3.githubusercontent.com/u/8672791?v=4","gravatar_id":"","url":"https://api.github.com/users/mockersf","html_url":"https://github.com/mockersf","followers_url":"https://api.github.com/users/mockersf/followers","following_url":"https://api.github.com/users/mockersf/following{/other_user}","gists_url":"https://api.github.com/users/mockersf/gists{/gist_id}","starred_url":"https://api.github.com/users/mockersf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockersf/subscriptions","organizations_url":"https://api.github.com/users/mockersf/orgs","repos_url":"https://api.github.com/users/mockersf/repos","events_url":"https://api.github.com/users/mockersf/events{/privacy}","received_events_url":"https://api.github.com/users/mockersf/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-03-06T13:32:58Z","updated_at":"2018-03-06T19:02:43Z","closed_at":"2018-03-06T19:02:43Z","author_association":"CONTRIBUTOR","body":"When getting a long gzip body, the compressed response is always around 45KB, which decompress to around 250KB of my expected json (it's full size is around 420KB)\r\n\r\nI added a test in tests/test_server.rs: test_body_gzip_large_random in #102\r\nwith a random string of 70000 characters, the response only contains 63747 chars (which makes a gzip of 47KB)","score":1.0}]}
0

