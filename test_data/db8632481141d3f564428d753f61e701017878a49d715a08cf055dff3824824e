HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 09 Jun 2018 08:05:45 GMT
Link: <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=6>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: C9B7:57C4:23B9429:50CF33B:5B1B8A57
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 26
X-Ratelimit-Reset: 1528531604
X-Runtime-Rack: 0.394254
X-Xss-Protection: 1; mode=block

8000
{"total_count":157,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/actix/actix-web/issues/287","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/287/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/287/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/287/events","html_url":"https://github.com/actix/actix-web/issues/287","id":330449734,"node_id":"MDU6SXNzdWUzMzA0NDk3MzQ=","number":287,"title":"Route virtualhosts","user":{"login":"uncotion","id":39458402,"node_id":"MDQ6VXNlcjM5NDU4NDAy","avatar_url":"https://avatars2.githubusercontent.com/u/39458402?v=4","gravatar_id":"","url":"https://api.github.com/users/uncotion","html_url":"https://github.com/uncotion","followers_url":"https://api.github.com/users/uncotion/followers","following_url":"https://api.github.com/users/uncotion/following{/other_user}","gists_url":"https://api.github.com/users/uncotion/gists{/gist_id}","starred_url":"https://api.github.com/users/uncotion/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uncotion/subscriptions","organizations_url":"https://api.github.com/users/uncotion/orgs","repos_url":"https://api.github.com/users/uncotion/repos","events_url":"https://api.github.com/users/uncotion/events{/privacy}","received_events_url":"https://api.github.com/users/uncotion/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-07T21:55:06Z","updated_at":"2018-06-08T03:50:52Z","closed_at":"2018-06-08T03:50:52Z","author_association":"NONE","body":"Hi,\r\nIs it possible route app with Host header in actix-web (for multi hosting purpose)?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/282","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/282/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/282/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/282/events","html_url":"https://github.com/actix/actix-web/issues/282","id":329348543,"node_id":"MDU6SXNzdWUzMjkzNDg1NDM=","number":282,"title":"Multipart upload got \"Incomplete\" error","user":{"login":"ywzjackal","id":5779851,"node_id":"MDQ6VXNlcjU3Nzk4NTE=","avatar_url":"https://avatars2.githubusercontent.com/u/5779851?v=4","gravatar_id":"","url":"https://api.github.com/users/ywzjackal","html_url":"https://github.com/ywzjackal","followers_url":"https://api.github.com/users/ywzjackal/followers","following_url":"https://api.github.com/users/ywzjackal/following{/other_user}","gists_url":"https://api.github.com/users/ywzjackal/gists{/gist_id}","starred_url":"https://api.github.com/users/ywzjackal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywzjackal/subscriptions","organizations_url":"https://api.github.com/users/ywzjackal/orgs","repos_url":"https://api.github.com/users/ywzjackal/repos","events_url":"https://api.github.com/users/ywzjackal/events{/privacy}","received_events_url":"https://api.github.com/users/ywzjackal/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-06-05T08:19:39Z","updated_at":"2018-06-05T23:23:18Z","closed_at":"2018-06-05T15:54:49Z","author_association":"NONE","body":"Most files upload success, but others never success.\r\nI create an example for reproduceï¼š [https://github.com/ywzjackal/axtix-web-test.git](https://github.com/ywzjackal/axtix-web-test.git)\r\nImages in repository name starts with `\"success*.png\"` is ok, but `\"fail*.png\"` will got `Incomplete Error`\r\nEnviroment:\r\n```\r\nWindows 10\r\nstable-x86_64-pc-windows-msvc (default)\r\nrustc 1.26.0 (a77568041 2018-05-07)\r\nactix-web 0.6.10\r\n```\r\nSource: \r\n```rust\r\nextern crate actix;\r\nextern crate actix_web;\r\nextern crate futures;\r\n\r\nuse actix_web::*;\r\nuse actix_web::http::Method;\r\nuse futures::*;\r\n\r\npub fn handle_multipart_field(field: multipart::Field<HttpRequest>) -> Box<Future<Item=i64, Error=Error>> {\r\n    use std::fs;\r\n    use std::io::Write;\r\n    let file_path_string = \"upload.png\";\r\n    let mut file = match fs::File::create(file_path_string.clone()) {\r\n        Ok(file) => file,\r\n        Err(e) => return Box::new(future::err(error::ErrorInternalServerError(e)))\r\n    };\r\n    // debug!(\"handle_multipart_field...\");\r\n    Box::new(field.fold(0i64, move |acc, bytes| {\r\n        let rt = file.write_all(bytes.as_ref()).map(|_| {\r\n            acc + bytes.len() as i64\r\n        }).map_err(|e| { \r\n            println!(\"handle_multipart_field file.write_all failed: {:?}\", e);\r\n            error::MultipartError::Payload(error::PayloadError::Io(e))\r\n        });\r\n        future::result(rt)\r\n    }).map_err(|e|{\r\n        println!(\"handle_multipart_field failed, {:?}\", e);\r\n        error::ErrorInternalServerError(e)\r\n    }))\r\n}\r\n\r\npub fn handle_multipart_item(item: multipart::MultipartItem<HttpRequest>) -> Box<Stream<Item=i64, Error=Error>> {\r\n    // debug!(\"handle_multipart_item...\");\r\n    match item {\r\n        multipart::MultipartItem::Field(field) => {\r\n            // debug!(\"handle_multipart_item field\");\r\n            Box::new(handle_multipart_field(field).into_stream())\r\n        }\r\n        multipart::MultipartItem::Nested(mp) => {\r\n            // debug!(\"handle_multipart_item nested\");\r\n            handle_multipart(mp)\r\n        }\r\n    }\r\n}\r\n\r\npub fn handle_multipart(mp: multipart::Multipart<HttpRequest>) -> Box<Stream<Item=i64, Error=Error>> {\r\n    // debug!(\"handle_multipart ...\");\r\n    Box::new(mp.map_err(error::ErrorInternalServerError)\r\n        .map(move |item| handle_multipart_item(item)).flatten())\r\n}\r\n\r\npub fn upload(req: HttpRequest) -> Box<Future<Item=HttpResponse, Error=Error>> {\r\n    // debug!(\"upload handler...\");\r\n    Box::new(handle_multipart(req.clone().multipart()).collect().map(|sizes| {\r\n        HttpResponse::Ok().json(sizes)\r\n    }).map_err(|e| {\r\n        println!(\"{:?}\", e);\r\n        e\r\n    }))\r\n}\r\n\r\nfn index(_req: HttpRequest) -> Result<HttpResponse> {\r\n   let html = r#\"<html>\r\n        <head><title>Upload Test</title></head>\r\n        <body>\r\n            <form target=\"/\" method=\"post\" enctype=\"multipart/form-data\">\r\n                <input type=\"file\" name=\"file\"/>\r\n                <input type=\"submit\" value=\"Submit\"></button>\r\n            </form>\r\n        </body>\r\n    </html>\"#;\r\n\r\n    return Ok(HttpResponse::Ok().body(html))\r\n}\r\n\r\nfn main() {\r\n    let sys = actix::System::new(\"upload-test\");\r\n    server::HttpServer::new(\r\n        ||\r\n            {\r\n                vec![\r\n                    App::new()\r\n                        .middleware(actix_web::middleware::Logger::default())\r\n                        .resource(\"/\", |r| {\r\n                            r.method(Method::GET).with(index);\r\n                            r.method(Method::POST).with(upload);\r\n                        })\r\n                        .boxed()\r\n                ]\r\n            })\r\n        .bind(\"127.0.0.1:8080\").expect(\"Can not bind to 127.0.0.1:8080\")\r\n        .start();\r\n    let _ = sys.run();\r\n}\r\n```\r\nOutput when upload fail*.png:\r\n```\r\n   Finished dev [unoptimized + debuginfo] target(s) in 1m 22.11s\r\n     Running `target\\debug\\actix-web-test.exe`\r\nhandle_multipart_field failed, Incomplete\r\nIncomplete\r\n\r\nstack backtrace:\r\n   0:     0x7ff7b84b0345 - backtrace::backtrace::trace<closure>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.8\\src\\backtrace\\mod.rs:42\r\n   1:     0x7ff7b84aa344 - backtrace::capture::Backtrace::new_unresolved\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.8\\src\\capture.rs:88\r\n   2:     0x7ff7b848c250 - failure::backtrace::internal::InternalBacktrace::new\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\failure-0.1.1\\src\\backtrace\\internal.rs:44\r\n   3:     0x7ff7b848b73e - failure::backtrace::Backtrace::new\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\failure-0.1.1\\src\\backtrace\\mod.rs:98\r\n   4:     0x7ff7b8073cbc - actix_web::error::InternalError<actix_web::error::MultipartError>::new<actix_web::error::MultipartError>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\error.rs:576\r\n   5:     0x7ff7b8074cd3 - actix_web::error::ErrorInternalServerError<actix_web::error::MultipartError>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\error.rs:754\r\n   6:     0x7ff7b809300f - actix_web_test::handle_multipart_field::{{closure}}\r\n                        at D:\\Jackal\\Documents\\Workspace\\actix-web-test\\src\\main.rs:28\r\n   7:     0x7ff7b7f8ae75 - core::result::Result<futures::poll::Async<i64>, actix_web::error::MultipartError>::map_err<futures::poll::Async<i64>,actix_web::error::MultipartError,actix_web::error::Error,closure>\r\n                        at C:\\projects\\rust\\src\\libcore\\result.rs:500\r\n   8:     0x7ff7b80258cf - futures::future::map_err::{{impl}}::poll<actix_web::error::Error,futures::stream::fold::Fold<actix_web::multipart::Field<actix_web::httprequest::HttpRequest<()>>, closure, futures::future::result_::FutureResult<i64, actix_web::error::MultipartError>, i64>,closure>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\map_err.rs:34\r\n   9:     0x7ff7b801e7ee - futures::future::{{impl}}::poll<Future>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\mod.rs:114\r\n  10:     0x7ff7b807ea09 - futures::future::into_stream::{{impl}}::poll<alloc::boxed::Box<Future>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\into_stream.rs:27\r\n  11:     0x7ff7b801e8ae - futures::stream::{{impl}}::poll<Stream>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\stream\\mod.rs:140\r\n  12:     0x7ff7b8054804 - futures::stream::flatten::{{impl}}::poll<futures::stream::map::Map<futures::stream::map_err::MapErr<actix_web::multipart::Multipart<actix_web::httprequest::HttpRequest<()>>, fn(actix_web::error::MultipartError) -> actix_web::error::Error>, closure>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\stream\\flatten.rs:91\r\n  13:     0x7ff7b801e8ae - futures::stream::{{impl}}::poll<Stream>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\stream\\mod.rs:140\r\n  14:     0x7ff7b809bde9 - futures::stream::collect::{{impl}}::poll<alloc::boxed::Box<Stream>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\stream\\collect.rs:42\r\n  15:     0x7ff7b80587e4 - futures::future::map::{{impl}}::poll<actix_web::httpresponse::HttpResponse,futures::stream::collect::Collect<alloc::boxed::Box<Stream>>,closure>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\map.rs:31\r\n  16:     0x7ff7b80251a1 - futures::future::map_err::{{impl}}::poll<actix_web::error::Error,futures::future::map::Map<futures::stream::collect::Collect<alloc::boxed::Box<Stream>>, closure>,closure>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\map_err.rs:31\r\n  17:     0x7ff7b801e7ae - futures::future::{{impl}}::poll<Future>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\mod.rs:114\r\n  18:     0x7ff7b80253b1 - futures::future::map_err::{{impl}}::poll<actix_web::error::Error,alloc::boxed::Box<Future>,closure>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\map_err.rs:31\r\n  19:     0x7ff7b8025d9c - futures::future::chain::Chain<futures::future::map_err::MapErr<alloc::boxed::Box<Future>, closure>, futures::future::result_::FutureResult<actix_web::httpresponse::HttpResponse, actix_web::error::Error>, closure>::poll<futures::future::map_err::MapErr<alloc::boxed::Box<Future>, closure>,futures::future::result_::FutureResult<actix_web::httpresponse::HttpResponse, actix_web::error::Error>,closure,closure>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\chain.rs:26\r\n  20:     0x7ff7b8071e8b - futures::future::then::{{impl}}::poll<futures::future::map_err::MapErr<alloc::boxed::Box<Future>, closure>,futures::future::result_::FutureResult<actix_web::httpresponse::HttpResponse, actix_web::error::Error>,closure>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\then.rs:35\r\n  21:     0x7ff7b801e7ae - futures::future::{{impl}}::poll<Future>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\mod.rs:114\r\n  22:     0x7ff7b80aff21 - actix_web::with::{{impl}}::poll<actix_web::httprequest::HttpRequest<()>,(),fn(actix_web::httprequest::HttpRequest<()>) -> alloc::boxed::Box<Future>,alloc::boxed::Box<Future>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\with.rs:223\r\n  23:     0x7ff7b801e7ae - futures::future::{{impl}}::poll<Future>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\mod.rs:114\r\n  24:     0x7ff7b804a96a - actix_web::pipeline::WaitingResponse<(), actix_web::application::Inner<()>>::poll<(),actix_web::application::Inner<()>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\pipeline.rs:334\r\n  25:     0x7ff7b8044f37 - actix_web::pipeline::PipelineState<(), actix_web::application::Inner<()>>::poll<(),actix_web::application::Inner<()>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\pipeline.rs:60\r\n  26:     0x7ff7b8043b43 - actix_web::pipeline::{{impl}}::poll_io<(),actix_web::application::Inner<()>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\pipeline.rs:204\r\n  27:     0x7ff7b7fb800c - actix_web::server::h1::Http1<tokio_core::net::tcp::TcpStream, alloc::boxed::Box<HttpHandler>>::poll_handler<tokio_core::net::tcp::TcpStream,alloc::boxed::Box<HttpHandler>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\server\\h1.rs:198\r\n  28:     0x7ff7b7fba462 - actix_web::server::h1::Http1<tokio_core::net::tcp::TcpStream, alloc::boxed::Box<HttpHandler>>::poll<tokio_core::net::tcp::TcpStream,alloc::boxed::Box<HttpHandler>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\server\\h1.rs:135\r\n  29:     0x7ff7b8029a58 - actix_web::server::channel::{{impl}}::poll<tokio_core::net::tcp::TcpStream,alloc::boxed::Box<HttpHandler>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-web-0.6.10\\src\\server\\channel.rs:111\r\n  30:     0x7ff7b84fc875 - futures::future::{{impl}}::poll<Future>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\future\\mod.rs:113\r\n  31:     0x7ff7b84e57d3 - futures::task_impl::{{impl}}::poll_future_notify::{{closure}}<alloc::boxed::Box<Future>,tokio::executor::current_thread::scheduler::Notify<tokio_executor::park::UnparkThread>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\task_impl\\mod.rs:289\r\n  32:     0x7ff7b84e5c3d - futures::task_impl::{{impl}}::enter::{{closure}}<alloc::boxed::Box<Future>,closure,core::result::Result<futures::poll::Async<()>, ()>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\task_impl\\mod.rs:363\r\n  33:     0x7ff7b84f05d8 - futures::task_impl::std::set<closure,core::result::Result<futures::poll::Async<()>, ()>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\task_impl\\std\\mod.rs:78\r\n  34:     0x7ff7b84e5bc6 - futures::task_impl::Spawn<alloc::boxed::Box<Future>>::enter<alloc::boxed::Box<Future>,closure,core::result::Result<futures::poll::Async<()>, ()>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\task_impl\\mod.rs:363\r\n  35:     0x7ff7b84e56b7 - futures::task_impl::Spawn<alloc::boxed::Box<Future>>::poll_future_notify<alloc::boxed::Box<Future>,tokio::executor::current_thread::scheduler::Notify<tokio_executor::park::UnparkThread>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-0.1.21\\src\\task_impl\\mod.rs:289\r\n  36:     0x7ff7b84e91b4 - tokio::executor::current_thread::scheduler::Scheduled<tokio_executor::park::UnparkThread>::tick<tokio_executor::park::UnparkThread>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\scheduler.rs:352\r\n  37:     0x7ff7b84e90bd - tokio::executor::current_thread::scheduler::{{impl}}::tick::{{closure}}<tokio_executor::park::UnparkThread>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\scheduler.rs:332\r\n  38:     0x7ff7b84efccd - tokio::executor::current_thread::{{impl}}::enter::{{closure}}::{{closure}}<tokio_executor::park::UnparkThread,closure,bool>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\mod.rs:688\r\n  39:     0x7ff7b84ef7df - tokio::executor::current_thread::CurrentRunner::set_spawn<closure,bool>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\mod.rs:720\r\n  40:     0x7ff7b84efbd8 - tokio::executor::current_thread::{{impl}}::enter::{{closure}}<tokio_executor::park::UnparkThread,closure,bool>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\mod.rs:687\r\n  41:     0x7ff7b84f1a0a - std::thread::local::LocalKey<tokio::executor::current_thread::CurrentRunner>::try_with<tokio::executor::current_thread::CurrentRunner,closure,bool>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:294\r\n  42:     0x7ff7b84f0b27 - std::thread::local::LocalKey<tokio::executor::current_thread::CurrentRunner>::with<tokio::executor::current_thread::CurrentRunner,closure,bool>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:248\r\n  43:     0x7ff7b84efb00 - tokio::executor::current_thread::Borrow<tokio_executor::park::UnparkThread>::enter<tokio_executor::park::UnparkThread,closure,bool>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\mod.rs:686\r\n  44:     0x7ff7b84e8f49 - tokio::executor::current_thread::scheduler::Scheduler<tokio_executor::park::UnparkThread>::tick<tokio_executor::park::UnparkThread>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\scheduler.rs:332\r\n  45:     0x7ff7b84efd0e - tokio::executor::current_thread::Entered<tokio_timer::timer::Timer<tokio_executor::park::ParkThread, tokio_timer::timer::now::SystemNow>>::tick<tokio_timer::timer::Timer<tokio_executor::park::ParkThread, tokio_timer::timer::now::SystemNow>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\mod.rs:572\r\n  46:     0x7ff7b84efe19 - tokio::executor::current_thread::Entered<tokio_timer::timer::Timer<tokio_executor::park::ParkThread, tokio_timer::timer::now::SystemNow>>::turn<tokio_timer::timer::Timer<tokio_executor::park::ParkThread, tokio_timer::timer::now::SystemNow>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.1.6\\src\\executor\\current_thread\\mod.rs:515\r\n  47:     0x7ff7b84d6adc - tokio_core::reactor::{{impl}}::poll::{{closure}}::{{closure}}::{{closure}}::{{closure}}\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-core-0.1.17\\src\\reactor\\mod.rs:298\r\n  48:     0x7ff7b84ec9a5 - scoped_tls::ScopedKey<tokio_core::reactor::Core>::set<tokio_core::reactor::Core,closure,()>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\scoped-tls-0.1.2\\src\\lib.rs:155\r\n  49:     0x7ff7b84d6eef - tokio_core::reactor::{{impl}}::poll::{{closure}}::{{closure}}::{{closure}}\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-core-0.1.17\\src\\reactor\\mod.rs:304\r\n  50:     0x7ff7b84e4840 - tokio_timer::timer::handle::with_default::{{closure}}<closure,()>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-timer-0.2.3\\src\\timer\\handle.rs:64\r\n  51:     0x7ff7b84f1289 - std::thread::local::LocalKey<core::cell::RefCell<core::option::Option<tokio_timer::timer::handle::Handle>>>::try_with<core::cell::RefCell<core::option::Option<tokio_timer::timer::handle::Handle>>,closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:294\r\n  52:     0x7ff7b84f0cbe - std::thread::local::LocalKey<core::cell::RefCell<core::option::Option<tokio_timer::timer::handle::Handle>>>::with<core::cell::RefCell<core::option::Option<tokio_timer::timer::handle::Handle>>,closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:248\r\n  53:     0x7ff7b84e4702 - tokio_timer::timer::handle::with_default<closure,()>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-timer-0.2.3\\src\\timer\\handle.rs:56\r\n  54:     0x7ff7b84d772d - tokio_core::reactor::{{impl}}::poll::{{closure}}::{{closure}}\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-core-0.1.17\\src\\reactor\\mod.rs:310\r\n  55:     0x7ff7b84ea8a5 - tokio_executor::global::with_default::{{closure}}<tokio::runtime::task_executor::TaskExecutor,closure,()>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-executor-0.1.2\\src\\global.rs:176\r\n  56:     0x7ff7b84f10b1 - std::thread::local::LocalKey<core::cell::Cell<core::option::Option<mut Executor*>>>::try_with<core::cell::Cell<core::option::Option<mut Executor*>>,closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:294\r\n  57:     0x7ff7b84f0a6d - std::thread::local::LocalKey<core::cell::Cell<core::option::Option<mut Executor*>>>::with<core::cell::Cell<core::option::Option<mut Executor*>>,closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:248\r\n  58:     0x7ff7b84ea781 - tokio_executor::global::with_default<tokio::runtime::task_executor::TaskExecutor,closure,()>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-executor-0.1.2\\src\\global.rs:178\r\n  59:     0x7ff7b84d7784 - tokio_core::reactor::{{impl}}::poll::{{closure}}\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-core-0.1.17\\src\\reactor\\mod.rs:311\r\n  60:     0x7ff7b84e4b1b - tokio_reactor::with_default::{{closure}}<closure,()>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-reactor-0.1.1\\src\\lib.rs:207\r\n  61:     0x7ff7b84f1bf1 - std::thread::local::LocalKey<core::cell::RefCell<core::option::Option<tokio_reactor::Handle>>>::try_with<core::cell::RefCell<core::option::Option<tokio_reactor::Handle>>,closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:294\r\n  62:     0x7ff7b84f0b9d - std::thread::local::LocalKey<core::cell::RefCell<core::option::Option<tokio_reactor::Handle>>>::with<core::cell::RefCell<core::option::Option<tokio_reactor::Handle>>,closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\local.rs:248\r\n  63:     0x7ff7b84e49c1 - tokio_reactor::with_default<closure,()>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-reactor-0.1.1\\src\\lib.rs:199\r\n  64:     0x7ff7b84d68dd - tokio_core::reactor::Core::poll\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-core-0.1.17\\src\\reactor\\mod.rs:273\r\n  65:     0x7ff7b8443c72 - tokio_core::reactor::Core::run<futures::sync::oneshot::Receiver<i32>>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-core-0.1.17\\src\\reactor\\mod.rs:248\r\n  66:     0x7ff7b7f97bc8 - actix::arbiter::{{impl}}::new::{{closure}}<str*>\r\n                        at C:\\Users\\Jackal\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\actix-0.5.7\\src\\arbiter.rs:95\r\n  67:     0x7ff7b807e5a8 - std::sys_common::backtrace::__rust_begin_short_backtrace<closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\sys_common\\backtrace.rs:137\r\n  68:     0x7ff7b7fa581d - std::thread::{{impl}}::spawn::{{closure}}::{{closure}}<closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\mod.rs:410\r\n  69:     0x7ff7b8043168 - std::panic::{{impl}}::call_once<(),closure>\r\n                        at C:\\projects\\rust\\src\\libstd\\panic.rs:306\r\n  70:     0x7ff7b7ffce3b - std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure>,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\panicking.rs:310\r\n  71:     0x7ff7b85f91c2 - panic_unwind::__rust_maybe_catch_panic\r\n                        at C:\\projects\\rust\\src\\libpanic_unwind\\lib.rs:113\r\n  72:     0x7ff7b7ffcd07 - std::panicking::try<(),std::panic::AssertUnwindSafe<closure>>\r\n                        at C:\\projects\\rust\\src\\libstd\\panicking.rs:289\r\n  73:     0x7ff7b80431b8 - std::panic::catch_unwind<std::panic::AssertUnwindSafe<closure>,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\panic.rs:374\r\n  74:     0x7ff7b7fa5625 - std::thread::{{impl}}::spawn::{{closure}}<closure,()>\r\n                        at C:\\projects\\rust\\src\\libstd\\thread\\mod.rs:408\r\n  75:     0x7ff7b7fa5872 - alloc::boxed::{{impl}}::call_box<(),closure>\r\n                        at C:\\projects\\rust\\src\\liballoc\\boxed.rs:638\r\n  76:     0x7ff7b85f02a7 - std::sys_common::thread::start_thread\r\n                        at C:\\projects\\rust\\src\\libstd\\sys_common\\thread.rs:25\r\n  77:     0x7ff7b85e7be9 - std::sys::windows::thread::{{impl}}::new::thread_start\r\n                        at C:\\projects\\rust\\src\\libstd\\sys\\windows\\thread.rs:57\r\n  78:     0x7ff83aee3034 - BaseThreadInitThunk\r\n```\r\nMabe my bad, but gitter.im too slow from china, so i create this issue for help.\r\nThanks!","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/281","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/281/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/281/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/281/events","html_url":"https://github.com/actix/actix-web/issues/281","id":329332378,"node_id":"MDU6SXNzdWUzMjkzMzIzNzg=","number":281,"title":"The Javascript web client (Websocket) cannot receive anything","user":{"login":"sackery","id":3042843,"node_id":"MDQ6VXNlcjMwNDI4NDM=","avatar_url":"https://avatars2.githubusercontent.com/u/3042843?v=4","gravatar_id":"","url":"https://api.github.com/users/sackery","html_url":"https://github.com/sackery","followers_url":"https://api.github.com/users/sackery/followers","following_url":"https://api.github.com/users/sackery/following{/other_user}","gists_url":"https://api.github.com/users/sackery/gists{/gist_id}","starred_url":"https://api.github.com/users/sackery/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sackery/subscriptions","organizations_url":"https://api.github.com/users/sackery/orgs","repos_url":"https://api.github.com/users/sackery/repos","events_url":"https://api.github.com/users/sackery/events{/privacy}","received_events_url":"https://api.github.com/users/sackery/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-06-05T07:27:01Z","updated_at":"2018-06-05T16:42:02Z","closed_at":"2018-06-05T16:42:02Z","author_association":"NONE","body":"Server:\r\n```rust\r\nimpl StreamHandler<ws::Message, ws::ProtocolError> for SanMessageWebSocket {\r\n    fn handle(&mut self, msg: ws::Message, ctx: &mut Self::Context) {\r\n        ctx.send_text(\"hello\");\r\n\r\n       // but if the client send something firstly the server, then the client can received immediatly\r\n      // match msg {\r\n      //      ws::Message::Text(text) => {\r\n      //          ctx.send_text(\"hello world!\");\r\n      //          ctx.send_text(\"privet\");\r\n      //      }\r\n      //      ws::Message::Close(_) => {\r\n      //          ctx.stop();\r\n      //      }\r\n      //      _ => (),\r\n      //  }\r\n    }\r\n}\r\n```\r\nClient:\r\n```\r\nws.onopen = (ev: Event) => {\r\n  ws.send('hello'); // here, if the client send something firstly\r\n};\r\n\r\nws.onmessage = (ev: MessageEvent) => {\r\n  console.log(ev.data); // then received \"hello\" immediatly\r\n};\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/279","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/279/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/279/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/279/events","html_url":"https://github.com/actix/actix-web/issues/279","id":328854048,"node_id":"MDU6SXNzdWUzMjg4NTQwNDg=","number":279,"title":"File upload support","user":{"login":"axon-q","id":39885497,"node_id":"MDQ6VXNlcjM5ODg1NDk3","avatar_url":"https://avatars2.githubusercontent.com/u/39885497?v=4","gravatar_id":"","url":"https://api.github.com/users/axon-q","html_url":"https://github.com/axon-q","followers_url":"https://api.github.com/users/axon-q/followers","following_url":"https://api.github.com/users/axon-q/following{/other_user}","gists_url":"https://api.github.com/users/axon-q/gists{/gist_id}","starred_url":"https://api.github.com/users/axon-q/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/axon-q/subscriptions","organizations_url":"https://api.github.com/users/axon-q/orgs","repos_url":"https://api.github.com/users/axon-q/repos","events_url":"https://api.github.com/users/axon-q/events{/privacy}","received_events_url":"https://api.github.com/users
8000
/axon-q/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2018-06-03T19:14:28Z","updated_at":"2018-06-08T22:53:45Z","closed_at":"2018-06-08T22:53:45Z","author_association":"NONE","body":"Is there an easy way to process file uploads from a browser (multipart/form-data) in actix-web? I can see that there's some kind of multipart support in the API docs, but it doesn't have much explanation. I've looked at [examples/multipart](https://github.com/actix/examples/blob/master/multipart/src/main.rs), but it appears to be very low-level. Is there a better API or a more complete example somewhere?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/271","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/271/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/271/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/271/events","html_url":"https://github.com/actix/actix-web/issues/271","id":328771085,"node_id":"MDU6SXNzdWUzMjg3NzEwODU=","number":271,"title":"CORS middleware and requests without `Origin`","user":{"login":"theduke","id":241621,"node_id":"MDQ6VXNlcjI0MTYyMQ==","avatar_url":"https://avatars1.githubusercontent.com/u/241621?v=4","gravatar_id":"","url":"https://api.github.com/users/theduke","html_url":"https://github.com/theduke","followers_url":"https://api.github.com/users/theduke/followers","following_url":"https://api.github.com/users/theduke/following{/other_user}","gists_url":"https://api.github.com/users/theduke/gists{/gist_id}","starred_url":"https://api.github.com/users/theduke/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theduke/subscriptions","organizations_url":"https://api.github.com/users/theduke/orgs","repos_url":"https://api.github.com/users/theduke/repos","events_url":"https://api.github.com/users/theduke/events{/privacy}","received_events_url":"https://api.github.com/users/theduke/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-06-02T19:33:44Z","updated_at":"2018-06-05T14:43:27Z","closed_at":"2018-06-05T14:43:27Z","author_association":"NONE","body":"Currently, with the Cors middleware enabled, a regular request to a route without a `Origin` header will fail with the error `The HTTP request header `Origin` is required but was not provided`.\r\n\r\nIn my case, this breaks a CLI tool that fetches some data from a route.\r\n\r\nThis doesn't make too much sense for me.\r\nSee more discussion in the PR.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/265","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/265/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/265/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/265/events","html_url":"https://github.com/actix/actix-web/issues/265","id":328635569,"node_id":"MDU6SXNzdWUzMjg2MzU1Njk=","number":265,"title":"HttpRequest::url_for for a named route with no variables does not include the path","user":{"login":"Mange","id":1599,"node_id":"MDQ6VXNlcjE1OTk=","avatar_url":"https://avatars1.githubusercontent.com/u/1599?v=4","gravatar_id":"","url":"https://api.github.com/users/Mange","html_url":"https://github.com/Mange","followers_url":"https://api.github.com/users/Mange/followers","following_url":"https://api.github.com/users/Mange/following{/other_user}","gists_url":"https://api.github.com/users/Mange/gists{/gist_id}","starred_url":"https://api.github.com/users/Mange/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mange/subscriptions","organizations_url":"https://api.github.com/users/Mange/orgs","repos_url":"https://api.github.com/users/Mange/repos","events_url":"https://api.github.com/users/Mange/events{/privacy}","received_events_url":"https://api.github.com/users/Mange/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-06-01T19:33:01Z","updated_at":"2018-06-03T09:52:46Z","closed_at":"2018-06-02T18:47:23Z","author_association":"NONE","body":"I have an app with the following resources:\r\n\r\n```rust\r\n            .resource(\"/tasks\", |r| {\r\n                r.name(\"all_tasks\");\r\n                r.method(http::Method::GET).with(resources::tasks::index)\r\n            })\r\n            .resource(\"/tasks/{uuid}\", |r| {\r\n                r.name(\"show_task\");\r\n                r.method(http::Method::GET).with(resources::tasks::show)\r\n            })\r\n```\r\n\r\nIf I then generate URLs like this:\r\n\r\n```rust\r\nlet no_params: [&str; 0] = [];\r\nlet url1 = req.url_for(\"all_tasks\", &no_params)?.into_string();\r\nlet url2 = req.url_for(\"show_task\", &[\":task_uid\"])?.into_string();\r\n```\r\n\r\nThen the returned URLs looks like this:\r\n\r\n```rust\r\n\"http://localhost:8088/\"  // (url1, all_tasks)\r\n\"http://localhost:8088/tasks/:task_uuid\" // (url2, show_task)\r\n```\r\n\r\nIt looks like when there are no parameters, then the path is not constructed in the call. I've read the source code but I could not figure out why this would happen.\r\n\r\nDid I do something wrong here? Is `url_for` only for resources with variables? Is there some other way to generate the full URLs for a request?\r\n\r\n```\r\nâ€º rg \"\\\"actix[^ ]* \\d\" Cargo.lock\r\n6: \"actix_derive 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n28: \"actix 0.5.7 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n1119: \"actix-web 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/263","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/263/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/263/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/263/events","html_url":"https://github.com/actix/actix-web/issues/263","id":327925258,"node_id":"MDU6SXNzdWUzMjc5MjUyNTg=","number":263,"title":"Use `&mut self` instead of `&self` for Middleware trait","user":{"login":"fafhrd91","id":598990,"node_id":"MDQ6VXNlcjU5ODk5MA==","avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-05-30T22:43:03Z","updated_at":"2018-06-02T21:46:52Z","closed_at":"2018-06-02T15:54:57Z","author_association":"MEMBER","body":"i think we should switch to `&mut self` for Middleware trait, it is safe","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/262","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/262/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/262/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/262/events","html_url":"https://github.com/actix/actix-web/issues/262","id":327873514,"node_id":"MDU6SXNzdWUzMjc4NzM1MTQ=","number":262,"title":"Error occured during request handling: Can not decode chunked transfer encoding","user":{"login":"bbigras","id":24027,"node_id":"MDQ6VXNlcjI0MDI3","avatar_url":"https://avatars1.githubusercontent.com/u/24027?v=4","gravatar_id":"","url":"https://api.github.com/users/bbigras","html_url":"https://github.com/bbigras","followers_url":"https://api.github.com/users/bbigras/followers","following_url":"https://api.github.com/users/bbigras/following{/other_user}","gists_url":"https://api.github.com/users/bbigras/gists{/gist_id}","starred_url":"https://api.github.com/users/bbigras/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bbigras/subscriptions","organizations_url":"https://api.github.com/users/bbigras/orgs","repos_url":"https://api.github.com/users/bbigras/repos","events_url":"https://api.github.com/users/bbigras/events{/privacy}","received_events_url":"https://api.github.com/users/bbigras/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-05-30T19:47:28Z","updated_at":"2018-06-02T22:04:00Z","closed_at":"2018-06-02T22:04:00Z","author_association":"CONTRIBUTOR","body":"I'm trying to post a form from reqwest to actix-web. \r\n\r\nIt works if I use curl (which doesn't use `Transfer-Encoding: chunked`)\r\n\r\nThe request looks like this:\r\n```\r\nPOST /login HTTP/1.1\r\nHost: localhost:8080\r\nUser-Agent: reqwest/0.8.5\r\nAccept: */*\r\nContent-Type: application/x-www-form-urlencoded\r\nAccept-Encoding: gzip\r\nTransfer-Encoding: chunked\r\n\r\nusername=a&password=b&group=c\r\n```\r\n\r\nthe error is:\r\n```\r\nactix_web::pipeline: Error occured during request handling: Can not decode chunked transfer encoding\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/261","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/261/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/261/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/261/events","html_url":"https://github.com/actix/actix-web/issues/261","id":327843742,"node_id":"MDU6SXNzdWUzMjc4NDM3NDI=","number":261,"title":"Mysterious result-type mismatch in StaticFiles handler","user":{"login":"onelson","id":301388,"node_id":"MDQ6VXNlcjMwMTM4OA==","avatar_url":"https://avatars3.githubusercontent.com/u/301388?v=4","gravatar_id":"","url":"https://api.github.com/users/onelson","html_url":"https://github.com/onelson","followers_url":"https://api.github.com/users/onelson/followers","following_url":"https://api.github.com/users/onelson/following{/other_user}","gists_url":"https://api.github.com/users/onelson/gists{/gist_id}","starred_url":"https://api.github.com/users/onelson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/onelson/subscriptions","organizations_url":"https://api.github.com/users/onelson/orgs","repos_url":"https://api.github.com/users/onelson/repos","events_url":"https://api.github.com/users/onelson/events{/privacy}","received_events_url":"https://api.github.com/users/onelson/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-30T18:16:22Z","updated_at":"2018-05-31T18:31:33Z","closed_at":"2018-05-31T18:31:33Z","author_association":"NONE","body":"As per Keats/gutenberg#310 there's something odd going on (and I can't explain it). Instead, I'll share a [small project that reproduces the issue](onelson/actix-web-staticfiles-result-type-repro)!\r\n\r\nHere's the gist of the caper: a small web server with similar behavior to your standard issue \"simple http\" type server where files are served up with a guessed mime type, and directories will respond with an `index.html` when present, or optionally render a listing when absent. In our use case, we don't care about the listings at all, so our actix-web implementation hijacks `StaticFiles#files_listing_renderer` to achieve the goal.\r\n\r\nWhen I tried to combine `NamedFile` and `StaticFiles` to build out the desired behavior, the program looked like:\r\n\r\n```rust\r\nextern crate actix_web;\r\nuse actix_web::{fs, server, App, HttpRequest, HttpResponse, Responder};\r\nuse std::io;\r\nuse std::path::PathBuf;\r\n\r\nfn handle_directory<'a, 'b>(\r\n    dir: &'a fs::Directory,\r\n    req: &'b HttpRequest,\r\n) -> io::Result<HttpResponse> {\r\n    let mut path = PathBuf::from(&dir.base);\r\n    path.push(&dir.path);\r\n    path.push(\"index.html\");\r\n    fs::NamedFile::open(path).respond_to(req)\r\n}\r\n\r\nfn main() {\r\n    server::new(|| {\r\n        App::new().handler(\r\n            r\"/\",\r\n            fs::StaticFiles::new(\".\")\r\n                .show_files_listing()\r\n                .files_listing_renderer(handle_directory),\r\n        )\r\n    }).bind(\"127.0.0.1:8080\")\r\n        .unwrap()\r\n        .run();\r\n}\r\n```\r\nBased on the signatures for `respond_to` and the incoming callback specified by `files_listing_renderer`\r\n\r\n* https://github.com/actix/actix-web/blob/v0.6.10/src/fs.rs#L212\r\n* https://github.com/actix/actix-web/blob/v0.6.10/src/fs.rs#L605-L610\r\n\r\neverything appears to line up nicely.\r\n\r\nStill, `rustc` disagrees...\r\n\r\n```text\r\nerror[E0308]: mismatched types\r\n  --> src/main.rs:26:5\r\n   |\r\n9  | ) -> io::Result<HttpResponse> {\r\n   |      ------------------------ expected `std::result::Result<actix_web::HttpResponse, std::io::Error>` because of return type\r\n...\r\n26 |     fs::NamedFile::open(path).respond_to(req)\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::io::Error`, found struct `actix_web::Error`\r\n   |\r\n   = note: expected type `std::result::Result<_, std::io::Error>`\r\n              found type `std::result::Result<_, actix_web::Error>`\r\n```\r\n\r\nIn an effort to mitigate the issue, I was only able to (clumsily) map to `io::Error` by doing a little dance like the following:\r\n\r\n```rust\r\nresult.map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{}\", e)))\r\n```\r\n\r\nI might have been able to skip the call to `format!()` if i were to implement `std::error::Error` for `actix_web::error::Error` but I was feeling too lazy to do this.\r\n\r\n\r\nNot sure if this is a bug, but it's certainly a _gotcha_.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/260","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/260/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/260/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/260/events","html_url":"https://github.com/actix/actix-web/issues/260","id":327817702,"node_id":"MDU6SXNzdWUzMjc4MTc3MDI=","number":260,"title":"Re-export actix","user":{"login":"fafhrd91","id":598990,"node_id":"MDQ6VXNlcjU5ODk5MA==","avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-05-30T17:02:12Z","updated_at":"2018-05-31T17:43:16Z","closed_at":"2018-05-31T17:43:16Z","author_association":"MEMBER","body":"","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/257","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/257/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/257/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/257/events","html_url":"https://github.com/actix/actix-web/issues/257","id":327113787,"node_id":"MDU6SXNzdWUzMjcxMTM3ODc=","number":257,"title":"Shouldn't FormConfig::limit returns 413 instead of 500?","user":{"login":"bbigras","id":24027,"node_id":"MDQ6VXNlcjI0MDI3","avatar_url":"https://avatars1.githubusercontent.com/u/24027?v=4","gravatar_id":"","url":"https://api.github.com/users/bbigras","html_url":"https://github.com/bbigras","followers_url":"https://api.github.com/users/bbigras/followers","following_url":"https://api.github.com/users/bbigras/following{/other_user}","gists_url":"https://api.github.com/users/bbigras/gists{/gist_id}","starred_url":"https://api.github.com/users/bbigras/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bbigras/subscriptions","organizations_url":"https://api.github.com/users/bbigras/orgs","repos_url":"https://api.github.com/users/bbigras/repos","events_url":"https://api.github.com/users/bbigras/events{/privacy}","received_events_url":"https://api.github.com/users/bbigras/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-28T20:40:55Z","updated_at":"2018-06-02T22:06:56Z","closed_at":"2018-06-02T22:06:56Z","author_association":"CONTRIBUTOR","body":"Right now exceeding the limit set by [FormConfig::limit](https://docs.rs/actix-web/0.6.10/actix_web/dev/struct.FormConfig.html#method.limit) makes the request return [500 Internal Server Error](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500). Shouldn't it be better to use [413 Payload Too Large](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) or maybe [400 Bad Request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400)?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/256","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/256/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/256/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/256/events","html_url":"https://github.com/actix/actix-web/issues/256","id":327106143,"node_id":"MDU6SXNzdWUzMjcxMDYxNDM=","number":256,"title":"Misleading error on body size overflow with custom maximum size","user":{"login":"tazjin","id":1552853,"node_id":"MDQ6VXNlcjE1NTI4NTM=","avatar_url":"https://avatars1.githubusercontent.com/u/1552853?v=4","gravatar_id":"","url":"https://api.github.com/users/tazjin","html_url":"https://github.com/tazjin","followers_url":"https://api.github.com/users/tazjin/followers","following_url":"https://api.github.com/users/tazjin/following{/other_user}","gists_url":"https://api.github.com/users/tazjin/gists{/gist_id}","starred_url":"https://api.github.com/users/tazjin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tazjin/subscriptions","organizations_url":"https://api.github.com/users/tazjin/orgs","repos_url":"https://api.github.com/users/tazjin/repos","events_url":"https://api.github.com/users/tazjin/events{/privacy}","received_events_url":"https://api.github.com/users/tazjin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-28T19:50:40Z","updated_at":"2018-06-02T22:11:07Z","closed_at":"2018-06-02T22:11:07Z","author_association":"CONTRIBUTOR","body":"Hey!\r\n\r\nThis (sort of) relates to #149.\r\n\r\nIf a custom body size is set on a JSON extractor it seems like the error variant [`JsonPayloadError::Overflow`](https://github.com/actix/actix-web/blob/master/src/error.rs#L463) is still being displayed with the error message `\"Payload size is bigger than 256k\"`.\r\n\r\nThis can be slightly misleading and lead to us initially thinking the size change wasn't working, before looking at the error definition.\r\n\r\nI don't think it's necessary to generate the text entirely dynamically, but just writing something like `... bigger than allowed. (default: 256kB)` would indicate that the text is generic over configurations.\r\n\r\nCheers!","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/255","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/255/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/255/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/255/events","html_url":"https://github.com/actix/actix-web/issues/255","id":327098831,"node_id":"MDU6SXNzdWUzMjcwOTg4MzE=","number":255,"title":"Middleware `response` is not invoked if error result was returned by another middleware's `start` ","user":{"login":"mitskevich","id":1643475,"node_id":"MDQ6VXNlcjE2NDM0NzU=","avatar_url":"https://avatars0.githubusercontent.com/u/1643475?v=4","gravatar_id":"","url":"https://api.github.com/users/mitskevich","html_url":"https://github.com/mitskevich","followers_url":"https://api.github.com/users/mitskevich/followers","following_url":"https://api.github.com/users/mitskevich/following{/other_user}","gists_url":"https://api.github.com/users/mitskevich/gists{/gist_id}","starred_url":"https://api.github.com/users/mitskevich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitskevich/subscriptions","organizations_url":"https://api.github.com/users/mitskevich/orgs","repos_url":"https://api.github.com/users/mitskevich/repos","events_url":"https://api.github.com/users/mitskevich/events{/privacy}","received_events_url":"https://api.github.com/users/mitskevich/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-05-28T19:01:55Z","updated_at":"2018-06-04T21:00:40Z","closed_at":"2018-06-04T20:58:40Z","author_association":"NONE","body":"actix-web 0.6.10\r\n\r\nExample:\r\n\r\n```rust\r\nextern crate actix_web;\r\n\r\nuse actix_web as aw;\r\nuse actix_web::middleware::{Middleware, Response, Started};\r\n\r\nstruct MiddlewareOne;\r\n\r\nimpl<S> Middleware<S> for MiddlewareOne {\r\n    fn start(&self, _req: &mut aw::HttpRequest<S>) -> Result<Started, aw::Error> {\r\n        println!(\"middleware one - start\");\r\n        Err(aw::error::ErrorBadRequest(\"error msg\"))\r\n    }\r\n}\r\n\r\nstruct MiddlewareTwo;\r\n\r\nimpl<S> aw::middleware::Middleware<S> for MiddlewareTwo {\r\n    fn response(\r\n        &self,\r\n        _req: &mut aw::HttpRequest<S>,\r\n        resp: aw::HttpResponse,\r\n    ) -> Result<Response, aw::Error> {\r\n        println!(\"middleware two - response\");\r\n        Ok(Response::Done(resp))\r\n    }\r\n}\r\n\r\nfn index(_r: aw::Path<()>) -> String {\r\n    format!(\"hello\")\r\n}\r\n\r\nfn main() {\r\n    aw::server::new(|| {\r\n        aw::App::new()\r\n            .middleware(MiddlewareOne)\r\n            .middleware(MiddlewareTwo)\r\n            .resource(\"/index/\", |r| r.with(index))\r\n    }).bind(\"127.0.0.1:8080\")\r\n        .unwrap()\r\n        .run();\r\n}\r\n```\r\n\r\nHere I'm registering two middlewares. First one is throwing an error in its `start` method. Second one has `response` method that just prints to the console. \r\n\r\nI expect that `MiddlewareTwo::response` should always be invoked. When I call `curl -i http://localhost:8080/index/` I get correct `400` status code, but console output contains only one line:\r\n\r\n```\r\nmiddleware one - start\r\n```\r\n\r\nI assume that `response` was not invoked at all.\r\n\r\nBecause of that behaviour, middlewares like `ErrorHandlers` or `Logger` are not working correctly when any middleware's `start` method returns an error.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/253","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/253/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/253/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/253/events","html_url":"https://github.com/actix/actix-web/issues/253","id":326927368,"node_id":"MDU6SXNzdWUzMjY5MjczNjg=","number":253,"title":"How to unwrap the async future value?","user":{"login":"sackery","id":3042843,"node_id":"MDQ6VXNlcjMwNDI4NDM=","avatar_url":"https://avatars2.githubusercontent.com/u/3042843?v=4","gravatar_id":"","url":"https://api.github.com/users/sackery","html_url":"https://github.com/sackery","followers_url":"https://api.github.com/users/sackery/followers","following_url":"https://api.github.com/users/sackery/following{/other_user}","gists_url":"https://api.github.com/users/sackery/gists{/gist_id}","starred_url":"https://api.github.com/users/sackery/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sackery/subscriptions","organizations_url":"https://api.github.com/users/sackery/orgs","repos_url":"https://api.github.com/users/sackery/repos","events_url":"https://api.github.com/users/sackery/events{/privacy}","received_events_url":"https://api.github.com/users/sackery/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-28T07:35:17Z","updated_at":"2018-05-28T14:49:09Z","closed_at":"2018-05-28T14:49:09Z","author_association":"NONE","body":"```rust\r\nreq.state()\r\n            .db\r\n            .send(LoadQueries::LoadUserByName(t.uid))\r\n            .from_err()\r\n            .and_then(|res| res.map(|user| Ok(AuthorizedUser(user))))\r\n            ??? what's the result?\r\n```\r\nI want to get the query result, im using diesel.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/252","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/252/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/252/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/252/events","html_url":"https://github.com/actix/actix-web/issues/252","id":326900034,"node_id":"MDU6SXNzdWUzMjY5MDAwMzQ=","number":252,"title":"Can i unwrap PgConnection directly from HttpRequest::state()?","user":{"login":"sackery","id":3042843,"node_id":"MDQ6VXNlcjMwNDI4NDM=","avatar_url":"https://avatars2.githubusercontent.com/u/3042843?v=4","gravatar_id":"","url":"https://api.github.com/users/sackery","html_url":"https://github.com/sackery","followers_url":"https://api.github.com/users/sackery/followers","following_url":"https://api.github.com/users/sackery/following{/other_user}","gists_url":"https://api.github.com/users/sackery/gists{/gist_id}","starred_url":"https://api.github.com/users/sackery/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sackery/subscriptions","organizations_url":"https://api.github.com/users/sackery/orgs","repos_url":"https://api.github.com/users/sackery/repos","events_url":"https://api.github.com/users/sackery/events{/privacy}","received_events_url":"https://api.github.com/users/sackery/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-28T05:24:41Z","updated_at":"2018-05-28T07:35:40Z","closed_at":"2018-05-28T07:35:40Z","author_association":"NONE","body":"Can i unwrap PgConnection directly from HttpRequest::state()? and not use send sync Message to Actor.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/249","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/249/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/249/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/249/events","html_url":"https://github.com/actix/actix-web/issues/249","id":326787994,"node_id":"MDU6SXNzdWUzMjY3ODc5OTQ=","number":249,"title":"Can i use directly HttpRequest::state().db.get().unwrap() not use state().db.send(...)","user":{"login":"sackery","id":3042843,"node_id":"MDQ6VXNlcjMwNDI4NDM=","avatar_url":"https://avatars2.githubusercontent.com/u/3042843?v=4","gravatar_id":"","url":"https://api.github.com/users/sackery","html_url":"https://github.com/sackery","followers_url":"https://api.github.com/users/sackery/followers","following_url":"https://api.github.com/users/sackery/following{/other_user}","gists_url":"https://api.github.com/users/sackery/gists{/gist_id}","starred_url":"https://api.github.com/users/sackery/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sackery/subscriptions","organizations_url":"https://api.github.com/users/sackery/orgs","repos_url":"https://api.github.com/users/sackery/repos","events_url":"https://api.github.com/users/sackery/events{/privacy}","received_events_url":"https://api.github.com/users/sackery/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-27T05:08:49Z","updated_at":"2018-05-27T16:16:58Z","closed_at":"2018-05-27T16:16:58Z","author_association":"NONE","body":"```rust\r\nmatch verify_token(&token) {\r\n        Ok(_) => {\r\n            let conn = self.state().db.get().unwrap();\r\n            User::load_user_by_name(&token, &*db)\r\n                .map(|u| AuthorizedUser(u))\r\n                .map_err(|e| Err(GuardError::BadRequest))\r\n             }\r\n       Err(e) => Err(GuardError::BadRequest)\r\n      }\r\n}\r\n```\r\nNot ```self.state().db.send(UserInfo{user_id});```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/247","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/247/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/247/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/247/events","html_url":"https://github.com/actix/actix-web/issues/247","id":326646680,"node_id":"MDU6SXNzdWUzMjY2NDY2ODA=","number":247,"title":"CookieSessionBackend doesn't support same-site","user":{"login":"bbigras","id":24027,"node_id":"MDQ6VXNlcjI0MDI3","avatar_url":"https://avatars1.githubusercontent.com/u/24027?v=4","gravatar_id":"","url":"https://api.github.com/users/bbigras","html_url":"https://github.com/bbigras","followers_url":"https://api.github.com/users/bbigras/followers","following_url":"https://api.github.com/users/bbigras/following{/other_user}","gists_url":"https://api.github.com/users/bbigras/gists{/gist_id}","starred_url":"https://api.github.com/users/bbigras/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bbigras/subscriptions","organizations_url":"https://api.github.com/users/bbigras/orgs","repos_url":"https://api.github.com/users/bbigras/repos","events_url":"https://api.github.com/users/bbigras/events{/privacy}","received_events_url":"https://api.github.com/users/bbigras/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-25T20:01:11Z","updated_at":"2018-05-26T15:02:13Z","closed_at":"2018-05-26T15:02:13Z","author_association":"CONTRIBUTOR","body":"[CookieSessionBackend](https://docs.rs/actix-web/0.6.10/actix_web/middleware/session/struct.CookieSessionBackend.html) doesn't seem to support same-site","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/244","repository_url":"https://api.github.co
8000
m/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/244/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/244/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/244/events","html_url":"https://github.com/actix/actix-web/issues/244","id":326149891,"node_id":"MDU6SXNzdWUzMjYxNDk4OTE=","number":244,"title":"`client` fails with `io::ErrorKind::Other` on JSON request to Google API endpoint","user":{"login":"alexfedoseev","id":4244251,"node_id":"MDQ6VXNlcjQyNDQyNTE=","avatar_url":"https://avatars0.githubusercontent.com/u/4244251?v=4","gravatar_id":"","url":"https://api.github.com/users/alexfedoseev","html_url":"https://github.com/alexfedoseev","followers_url":"https://api.github.com/users/alexfedoseev/followers","following_url":"https://api.github.com/users/alexfedoseev/following{/other_user}","gists_url":"https://api.github.com/users/alexfedoseev/gists{/gist_id}","starred_url":"https://api.github.com/users/alexfedoseev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexfedoseev/subscriptions","organizations_url":"https://api.github.com/users/alexfedoseev/orgs","repos_url":"https://api.github.com/users/alexfedoseev/repos","events_url":"https://api.github.com/users/alexfedoseev/events{/privacy}","received_events_url":"https://api.github.com/users/alexfedoseev/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-24T14:32:46Z","updated_at":"2018-05-24T14:42:36Z","closed_at":"2018-05-24T14:42:35Z","author_association":"NONE","body":"When I make request to Google API endpoint using `client` module I get an error from `res.json()`:\r\n\r\n```\r\nError: Payload(Io(Kind(Other)))\r\n```\r\n\r\nI use same abstraction for 2 oauth providers (Google and Facebook) and Facebook works. Google fails w/ this error.\r\n\r\nThis is the code I use for request:\r\n\r\n```rust\r\nconst GOOGLE_PROFILE_URL: &'static str = \"https://www.googleapis.com/oauth2/v3/userinfo\";\r\nconst FACEBOOK_PROFILE_URL: &'static str = \"https://graph.facebook.com/v3.0/me?fields=id,email,first_name,last_name,locale\";\r\n\r\nclient::get(profile_url)\r\n  .header(\"Accept\", \"application/json\")\r\n  .header(\"Authorization\", format!(\"Bearer {}\", token.access_token().secret()))\r\n  .finish()\r\n  .unwrap()\r\n  .send()\r\n  .map_err(|_| OAuthError::new(Message::InternalServerError))\r\n  .and_then(move |res| {\r\n    res.json::<T>().map_err(|error| {\r\n      // BOOM!\r\n      OAuthError::new(Message::InternalServerError)\r\n    })\r\n  })\r\n```\r\n\r\nAnd responses:\r\n\r\n`Google`\r\n\r\n```\r\nClientResponse HTTP/1.1 200 OK\r\n  headers:\r\n    \"cache-control\": \"no-cache, no-store, max-age=0, must-revalidate\"\r\n    \"pragma\": \"no-cache\"\r\n    \"expires\": \"Mon, 01 Jan 1990 00:00:00 GMT\"\r\n    \"date\": \"Thu, 24 May 2018 14:05:12 GMT\"\r\n    \"vary\": \"Origin\"\r\n    \"vary\": \"X-Origin\"\r\n    \"content-type\": \"application/json; charset=UTF-8\"\r\n    \"content-encoding\": \"gzip\"\r\n    \"x-content-type-options\": \"nosniff\"\r\n    \"x-frame-options\": \"SAMEORIGIN\"\r\n    \"x-xss-protection\": \"1; mode=block\"\r\n    \"server\": \"GSE\"\r\n    \"alt-svc\": \"hq=\\\":443\\\"; ma=2592000; quic=51303433; quic=51303432; quic=51303431; quic=51303339; quic=51303335,quic=\\\":443\\\"; ma=2592000; v=\\\"43,42,41,39,35\\\"\"\r\n    \"transfer-encoding\": \"chunked\"\r\n```\r\n\r\n`Facebook`\r\n\r\n```\r\nClientResponse HTTP/1.1 200 OK\r\n  headers:\r\n    \"etag\": \"\\\"cd602138207ab0ec7a996b3ac4cde060873d1856\\\"\"\r\n    \"strict-transport-security\": \"max-age=15552000; preload\"\r\n    \"x-fb-trace-id\": \"G4+nJCJDJSR\"\r\n    \"x-fb-rev\": \"3940446\"\r\n    \"expires\": \"Sat, 01 Jan 2000 00:00:00 GMT\"\r\n    \"content-type\": \"application/json\"\r\n    \"facebook-api-version\": \"v3.0\"\r\n    \"cache-control\": \"private, no-cache, no-store, must-revalidate\"\r\n    \"pragma\": \"no-cache\"\r\n    \"access-control-allow-origin\": \"*\"\r\n    \"x-fb-debug\": \"31+QV4NvWSHd/kQwmQ4wjL/V+wina9XusD0LWPyCQu53vjhM2Xn3jO9YNGl8kzdV+ms4DwMBn0vFEOJyRpi2Bw==\"\r\n    \"date\": \"Thu, 24 May 2018 14:06:35 GMT\"\r\n    \"connection\": \"keep-alive\"\r\n    \"content-length\": \"118\"\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/243","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/243/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/243/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/243/events","html_url":"https://github.com/actix/actix-web/issues/243","id":326024528,"node_id":"MDU6SXNzdWUzMjYwMjQ1Mjg=","number":243,"title":"Feature Request: Ability to split the .ressources definitions in multiple files.","user":{"login":"Nurrl","id":15341887,"node_id":"MDQ6VXNlcjE1MzQxODg3","avatar_url":"https://avatars2.githubusercontent.com/u/15341887?v=4","gravatar_id":"","url":"https://api.github.com/users/Nurrl","html_url":"https://github.com/Nurrl","followers_url":"https://api.github.com/users/Nurrl/followers","following_url":"https://api.github.com/users/Nurrl/following{/other_user}","gists_url":"https://api.github.com/users/Nurrl/gists{/gist_id}","starred_url":"https://api.github.com/users/Nurrl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nurrl/subscriptions","organizations_url":"https://api.github.com/users/Nurrl/orgs","repos_url":"https://api.github.com/users/Nurrl/repos","events_url":"https://api.github.com/users/Nurrl/events{/privacy}","received_events_url":"https://api.github.com/users/Nurrl/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2018-05-24T08:53:59Z","updated_at":"2018-05-24T16:03:03Z","closed_at":"2018-05-24T09:04:05Z","author_association":"NONE","body":"I would be great to be able to make different modules for larger APIs with a basepath like:\r\n```rust\r\nApp::new()\r\n  .base(\"v1\", v1mod)\r\n  .ressource(...)\r\n  .finish();\r\n```\r\n\r\nAnd the v1 will be accessed like `localhost:port/v1/...` with all the definitions in the *v1mod* module.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/241","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/241/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/241/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/241/events","html_url":"https://github.com/actix/actix-web/issues/241","id":325801669,"node_id":"MDU6SXNzdWUzMjU4MDE2Njk=","number":241,"title":"Auto-appending trailing slash not working with scoped routes","user":{"login":"Dowwie","id":2601236,"node_id":"MDQ6VXNlcjI2MDEyMzY=","avatar_url":"https://avatars0.githubusercontent.com/u/2601236?v=4","gravatar_id":"","url":"https://api.github.com/users/Dowwie","html_url":"https://github.com/Dowwie","followers_url":"https://api.github.com/users/Dowwie/followers","following_url":"https://api.github.com/users/Dowwie/following{/other_user}","gists_url":"https://api.github.com/users/Dowwie/gists{/gist_id}","starred_url":"https://api.github.com/users/Dowwie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dowwie/subscriptions","organizations_url":"https://api.github.com/users/Dowwie/orgs","repos_url":"https://api.github.com/users/Dowwie/repos","events_url":"https://api.github.com/users/Dowwie/events{/privacy}","received_events_url":"https://api.github.com/users/Dowwie/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-23T17:23:45Z","updated_at":"2018-05-24T04:14:10Z","closed_at":"2018-05-24T04:14:10Z","author_association":"CONTRIBUTOR","body":"Actix-web automatically appends trailing slashes for routes.  However, it doesn't for scoped routes.\r\n\r\n[Example](https://github.com/actix/actix-website/issues/4)\r\n\r\nGET .../project  fails where as GET .../project/ doesn't\r\nGET .../project/{project_id}/task fails where as GET .../project/{project_id}/task/ doesn't\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/238","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/238/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/238/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/238/events","html_url":"https://github.com/actix/actix-web/issues/238","id":325557397,"node_id":"MDU6SXNzdWUzMjU1NTczOTc=","number":238,"title":"NamedFile partial ranges not working correctly with Chrome","user":{"login":"cetra3","id":6415435,"node_id":"MDQ6VXNlcjY0MTU0MzU=","avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-23T05:47:52Z","updated_at":"2018-05-23T12:39:55Z","closed_at":"2018-05-23T12:39:21Z","author_association":"NONE","body":"Appears to be introduced by https://github.com/actix/actix-web/pull/227\r\n\r\nRunning Version `0.6.8`, appears as though NamedFile's partial ranges is causing a number of errors when trying to serve static files.\r\n\r\nI have a handler for defined like so for a SPA:\r\n\r\n```rust\r\npub struct FrontHandler {\r\n    //front end assets\r\n    front: String,\r\n}\r\n\r\n\r\nimpl<S: 'static> Handler<S> for FrontHandler {\r\n    type Result = Result<fs::NamedFile>;\r\n\r\n    fn handle(&mut self, req: HttpRequest<S>) -> Self::Result {\r\n        let mut relative_path = req.uri().path().replacen(\"/\", \"\", 1);\r\n\r\n        if relative_path == \"\" || relative_path.ends_with(\"/\") {\r\n            relative_path.push_str(\"index.html\");\r\n        }\r\n\r\n        let final_path = format!(\"{}{}\", self.front, relative_path);\r\n        let path = PathBuf::from(final_path);\r\n\r\n        debug!(\"Path:{:?}, exists:{}\", path, path.exists());\r\n\r\n        Ok(fs::NamedFile::open(&path)?)\r\n    }\r\n}\r\n```\r\n\r\nUsing this with `0.6.8` I'm seeing the following errors in the logs:\r\n\r\n\r\n``` \r\nERROR actix_web::pipeline           > Error occurred during request handling: Last payload item, but eof is not reached\r\nERROR actix_web::server::h1         > Unhandled error: Last payload item, but eof is not reached\r\n```\r\n\r\nAnd I am seeing these errors like this in Chrome `66.0.3359.181` (after caching the files the first time):\r\n\r\n![screen shot 2018-05-23 at 3 13 40 pm](https://user-images.githubusercontent.com/6415435/40405476-eee24a32-5e9b-11e8-9956-4e115db55f7e.png)\r\n\r\n\r\nWhat chrome appears to be doing is sending a 0 length range request:\r\n\r\n```\r\nRange: bytes=53395-53395\r\n```\r\n\r\nAnd Actix is responding with in turn with the following:\r\n\r\n```\r\ncontent-length: 1\r\ncontent-range: bytes 53395-53395/290992\r\n```\r\n\r\nBut I believe the content length should be 0 in this case\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/237","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/237/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/237/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/237/events","html_url":"https://github.com/actix/actix-web/issues/237","id":325462234,"node_id":"MDU6SXNzdWUzMjU0NjIyMzQ=","number":237,"title":"How to delegate handling of request to actix actor? -> Box<Future<Item...","user":{"login":"DancingBard","id":26351327,"node_id":"MDQ6VXNlcjI2MzUxMzI3","avatar_url":"https://avatars0.githubusercontent.com/u/26351327?v=4","gravatar_id":"","url":"https://api.github.com/users/DancingBard","html_url":"https://github.com/DancingBard","followers_url":"https://api.github.com/users/DancingBard/followers","following_url":"https://api.github.com/users/DancingBard/following{/other_user}","gists_url":"https://api.github.com/users/DancingBard/gists{/gist_id}","starred_url":"https://api.github.com/users/DancingBard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DancingBard/subscriptions","organizations_url":"https://api.github.com/users/DancingBard/orgs","repos_url":"https://api.github.com/users/DancingBard/repos","events_url":"https://api.github.com/users/DancingBard/events{/privacy}","received_events_url":"https://api.github.com/users/DancingBard/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2018-05-22T21:03:04Z","updated_at":"2018-05-23T19:05:50Z","closed_at":"2018-05-23T16:51:22Z","author_association":"CONTRIBUTOR","body":"I would like to have different APIs e.g. one for json, one for binary etc. I can configure different endpoints just fine.\r\n\r\nBut now I would like to delegate the actual work to an actor that in turn uses actors to fulfill all the parts that are necessary in order to respond to the caller.\r\n\r\nSo I have this:\r\n\r\nMy actor:\r\n\r\n    pub struct ProtocolWrapper {\r\n        pub message: protocol::Message,\r\n    }\r\n\r\n    pub struct MyActor;\r\n\r\n    impl Actor for MyActor {\r\n        type Context = Context<Self>;\r\n    }\r\n\r\n    impl Handler<ProtocolWrapper> for MyActor {\r\n        type Result = Result<ProtocolWrapper, ProtocolError>;\r\n\r\n        fn handle(&mut self, msg: ProtocolWrapper, ctx: &mut Context<Self>) -> Self::Result {\r\n            match msg.message {\r\n                _ => unimplemented!(\"Handling of request not yet implemented!\")\r\n            }\r\n        }\r\n    }\r\n\r\n    enum ProtocolError {\r\n        Unhandled\r\n    }\r\n\r\n    impl Message for ProtocolWrapper {\r\n        type Result = Result<ProtocolWrapper, ProtocolError>;\r\n    }\r\n\r\nAnd a handler:\r\n\r\n    pub struct JsonHandler {\r\n        actor: Addr<Unsync, MyActor>,\r\n    }\r\n\r\n    impl JsonHandler {\r\n        pub fn new(actor: Addr<Unsync, MyActor>) -> Self {\r\n            JsonHandler {\r\n                actor,\r\n            }\r\n        }\r\n\r\n        pub fn handle(&self, request: Json<serde_json::Value>) -> Box<Future<Item=String, Error=Error>> {\r\n            let message: protocol::Message = serde_json::from_str(&request.to_string()).expect(\"Couldn't deserialize json\");\r\n            let actor_request = self.actor.send(ProtocolWrapper { message });\r\n\r\n            Box::new(Arbiter::handle().spawn(\r\n                actor_request.map(|res| {\r\n                    match res {\r\n                        Ok(result) => Ok(format! {\"Response was created!\"}),\r\n                        Err(err) => Err(format! {\"Something went wrong! :(\"})\r\n                    }\r\n                })\r\n                .map_err(|e| {})\r\n            ))\r\n        }\r\n    }\r\n\r\nAnd the glue:\r\n\r\n    fn main() -> () {\r\n        let url = \"localhost:8000\";\r\n\r\n        let sys = actix::System::new(\"test\");\r\n\r\n        Server::new(|| {\r\n            let my_actor: Addr<Unsync, MyActor> = MyActor.start();\r\n            let json_handler = JsonHandler::new(my_actor);\r\n\r\n            App::new()\r\n                .resource(\"api/json\", move |r| r.method(http::Method::POST).with(move |req| json_handler.handle(req)))\r\n        })\r\n            .bind(url).expect(&format!(\"Cannot bind to {}\", url))\r\n            .run();\r\n    }\r\n\r\nBut running it gives me:\r\n\r\n> error[E0271]: type mismatch resolving `<futures::MapErr<futures::Map<actix::dev::Request<actix::Unsync, my_actor::MyActor, my_actor::ProtocolWrapper>, [closure@src/request_handlers/json.rs:35:31: 40:14]>, [closure@src/request_handlers/json.rs:41:26: 41:32]> as futures::Future>::Item == ()`\r\n  --> src/request_handlers/json.rs:34:36\r\n   |\r\n34 |         Box::new(Arbiter::handle().spawn(\r\n   |                                    ^^^^^ expected enum `std::result::Result`, found ()\r\n   |\r\n   = note: expected type `std::result::Result<std::string::String, std::string::String>`\r\n              found type `()`\r\n\r\n> error[E0277]: the trait bound `(): futures::Future` is not satisfied\r\n  --> src/request_handlers/json.rs:34:9\r\n   |\r\n34 | /         Box::new(Arbiter::handle().spawn(\r\n35 | |             actor_request.map(|res| {\r\n36 | |                 match res {\r\n37 | |                     Ok(result) => Ok(format! {\"Response was created!\"}),\r\n...  |\r\n41 | |                 .map_err(|e| {})\r\n42 | |         ))\r\n   | |__________^ the trait `futures::Future` is not implemented for `()`\r\n   |\r\n\r\nI can't seem to find any example how to go about this.\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/236","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/236/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/236/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/236/events","html_url":"https://github.com/actix/actix-web/issues/236","id":324832773,"node_id":"MDU6SXNzdWUzMjQ4MzI3NzM=","number":236,"title":"Halting on Keep-Alive Sessions","user":{"login":"cetra3","id":6415435,"node_id":"MDQ6VXNlcjY0MTU0MzU=","avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2018-05-21T08:35:58Z","updated_at":"2018-05-22T03:05:37Z","closed_at":"2018-05-22T02:10:24Z","author_association":"NONE","body":"This one is a hard one to troubleshoot, as it might be an error somewhere in my code.  It appears as though there is some blocking happening somewhere with keepalive sessions after a few requests on the same tcp stream.\r\n\r\nUnfortunately I'm seeing this in a pretty deep-seeded project, and I can try to extract the relevant parts.\r\n\r\n## Versions tested:\r\n\r\nActix Web `0.6.7` & `0.6.8`\r\n\r\n## Steps to Replicate\r\n\r\n* Clients connect to actix-web server using Keep-Alive\r\n* A number of initial HTTP requests/responses work OK\r\n* Client sends a HTTP Request header & body which is appropriately formatted as confirmed by Wireshark\r\n\r\n### Expected Result\r\n\r\n* Client receives http response\r\n\r\n### Actual Result\r\n\r\n* No Response is received by the client on the wire\r\n* No log entry for the request is seen by `middleware::logger`\r\n* Client times out and resets connection, creating a new tcp session\r\n\r\nAlso: shutting down actix-web shows that there are active workers, even if the sockets are closed on the client side","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/235","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/235/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/235/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/235/events","html_url":"https://github.com/actix/actix-web/issues/235","id":324781773,"node_id":"MDU6SXNzdWUzMjQ3ODE3NzM=","number":235,"title":"Add documentation on how to generate key.pem and cert.pem for tls example","user":{"login":"greenpdx","id":4604678,"node_id":"MDQ6VXNlcjQ2MDQ2Nzg=","avatar_url":"https://avatars3.githubusercontent.com/u/4604678?v=4","gravatar_id":"","url":"https://api.github.com/users/greenpdx","html_url":"https://github.com/greenpdx","followers_url":"https://api.github.com/users/greenpdx/followers","following_url":"https://api.github.com/users/greenpdx/following{/other_user}","gists_url":"https://api.github.com/users/greenpdx/gists{/gist_id}","starred_url":"https://api.github.com/users/greenpdx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/greenpdx/subscriptions","organizations_url":"https://api.github.com/users/greenpdx/orgs","repos_url":"https://api.github.com/users/greenpdx/repos","events_url":"https://api.github.com/users/greenpdx/events{/privacy}","received_events_url":"https://api.github.com/users/greenpdx/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-21T04:10:40Z","updated_at":"2018-05-21T04:35:42Z","closed_at":"2018-05-21T04:34:51Z","author_association":"NONE","body":"Openssl is tricky, there are many formats and ways to create crypto material. A list of steps to create a self signed ca and key would be great. ","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/234","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/234/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/234/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/234/events","html_url":"https://github.com/actix/actix-web/issues/234","id":324720029,"node_id":"MDU6SXNzdWUzMjQ3MjAwMjk=","number":234,"title":"Scope resource path extractor doesn't seem to work","user":{"login":"jakedeichert","id":1631044,"node_id":"MDQ6VXNlcjE2MzEwNDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1631044?v=4","gravatar_id":"","url":"https://api.github.com/users/jakedeichert","html_url":"https://github.com/jakedeichert","followers_url":"https://api.github.com/users/jakedeichert/followers","following_url":"https://api.github.com/users/jakedeichert/following{/other_user}","gists_url":"https://api.github.com/users/jakedeichert/gists{/gist_id}","starred_url":"https://api.github.com/users/jakedeichert/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakedeichert/subscriptions","organizations_url":"https://api.github.com/users/jakedeichert/orgs","repos_url":"https://api.github.com/users/jakedeichert/repos","events_url":"https://api.github.com/users/jakedeichert/events{/privacy}","received_events_url":"https://api.github.com/users/jakedeichert/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-20T16:01:18Z","updated_at":"2018-05-22T03:56:21Z","closed_at":"2018-05-21T00:07:04Z","author_association":"NONE","body":"It seems that `scope.resource()` is behaving a little differently with path extractors than `app.resource()`.\r\n\r\nIf I have this extractor function:\r\n\r\n```rust\r\nfn example_extractor(path: Path<(u32, String)>) -> HttpResponse {\r\n    println!(\"info {} {}\", path.0, path.1);\r\n    HttpResponse::Ok().finish()\r\n}\r\n```\r\n\r\nUsing `app.resource()` works:\r\n\r\n```rust\r\napp = app.resource(\"/users/{id}/{name}\", |r| {\r\n    r.method(Method::GET).with(example_extractor)\r\n});\r\n// => info 32 jake\r\n```\r\n\r\nBut using `scope.resource()` does not work:\r\n\r\n```rust\r\napp = app.scope(\"/users\", |scope| {\r\n    scope.resource(\"/{id}/{name}\", |r| {\r\n        r.method(Method::GET).with(example_extractor)\r\n    })\r\n});\r\n\r\n// => WARN 2018-05-20T15:50:52Z: actix_web::pipeline: Error occured during request handling: can not parse \"/32/jake\" to a u32\r\n// => DEBUG 2018-05-20T15:50:52Z: actix_web::pipeline: Error { err: \"can not parse \\\"/32/jake\\\" to a u32\" }\r\n```\r\n\r\nAm I doing something wrong here? I would really like to use scopes to group top-level endpoints like this. It seems I won't be able to if these path extractors don't work at the scope level.\r\n\r\nI'm using v0.6.7. If there's any more details I should provide, let me know!","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/232","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/232/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/232/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/232/events","html_url":"https://github.com/actix/actix-web/issues/232","id":324670027,"node_id":"MDU6SXNzdWUzMjQ2NzAwMjc=","number":232,"title":"What's up with data update performance?","user":{"login":"mkpankov","id":393741,"node_id":"MDQ6VXNlcjM5Mzc0MQ==","avatar_url":"https://avatars0.githubusercontent.com/u/393741?v=4","gravatar_id":"","url":"https://api.github.com/users/mkpankov","html_url":"https://github.com/mkpankov","followers_url":"https://api.github.com/users/mkpankov/followers","following_url":"https://api.github.com/users/mkpankov/following{/other_user}","gists_url":"https://api.github.com/users/mkpankov/gists{/gist_id}","starred_url":"https://api.github.com/users/mkpankov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkpankov/subscriptions","organizations_url":"https://api.github.com/users/mkpankov/orgs","repos_url":"https://api.github.com/users/mkpankov/repos","events_url":"https://api.github.com/users/mkpankov/events{/privacy}","received_events_url":"https://api.github.com/users/mkpankov/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-05-20T00:02:09Z","updated_at":"2018-05-31T05:15:25Z","closed_at":"2018-05-21T11:26:06Z","author_association":"NONE","body":"Website claims Actix is blazingly fast. However, in [data update benchmark](https://www.techempower.com/benchmarks/#section=data-r15&hw=ph&test=update) it has performance of 26.6% of the top solution. Why is that?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/229","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/229/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/229/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/229/events","html_url":"https://github.com/actix/actix-web/issues/229","id":323780023,"node_id":"MDU6SXNzdWUzMjM3ODAwMjM=","number":229,"title":"Json::extract() not working as expected after calling String::extract() for the same request","user":{"login":"mitskevich","id":1643475,"node_id":"MDQ6VXNlcjE2NDM0NzU=","avatar_url":"https://avatars0.githubusercontent.com/u/1643475?v=4","gravatar_id":"","url":"https://api.github.com/users/mitskevich","html_url":"https://github.com/mitskevich","followers_url":"https://api.github.com/users/mitskevich/followers","following_url":"https://api.github.com/users/mitskevich/following{/other_user}","gists_url":"https://api.github.com/users/mitskevich/gists{/gist_id}","starred_url":"https://api.github.com/users/mitskevich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitskevich/subscriptions","organizations_url":"https://api.github.com/users/mitskevich/orgs","repos_url":"https://api.github.com/users/mitskevich/repos","events_url":"https://api.github.com/users/mitskevich/events{/privacy}","received_events_url":"https://api.github.com/users/mitskevich/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-16T20:45:22Z","updated_at":"2018-05-16T21:59:12Z","closed_at":"2018-05-16T21:59:12Z","author_association":"NONE","body":"It appears that `FromRequest::extract(&req)` call somehow changes the internal state of the request data, despite `req` reference not being marked as mutable.\r\n\r\nExample:\r\n\r\n```rust\r\nextern crate actix_web;\r\nextern crate failure;\r\nextern crate futures;\r\n\r\nuse actix_web as aw;\r\nuse actix_web::FromRequest;\r\nuse futures::Future;\r\n\r\nfn str_then_json(req: aw::HttpRequest) -> Box<Future<Item = String, Error = aw::Error>> {\r\n    let fut = <String>::extract(&req).unwrap().and_then(move |body_str| {\r\n        println!(\"parsed body: {}\", body_str);\r\n        <aw::Json<()>>::extract(&req)\r\n            .and_then(move |body_json| {\r\n                Ok(format!(\r\n                    \"request body was: {}\\ndecoded json: {:?}\",\r\n                    body_str, body_json\r\n                ))\r\n            })\r\n            .or_else(|e| {\r\n                println!(\"error parsing json: {}\", e);\r\n                Err(e)\r\n            })\r\n    });\r\n    Box::new(fut)\r\n}\r\n\r\nfn just_json(req: aw::HttpRequest) -> Box<Future<Item = String, Error = aw::Error>> {\r\n    let fut = <aw::Json<()>>::extract(&req)\r\n        .and_then(move |body_json| Ok(format!(\"decoded json: {:?}\", body_json)));\r\n    Box::new(fut)\r\n}\r\n\r\nfn main() {\r\n    aw::server::new(|| {\r\n        aw::App::new()\r\n            .resource(\"str-then-json\", |r| r.with(str_then_json))\r\n            .resource(\"json\", |r| r.with(just_json))\r\n    }).bind(\"0.0.0.0:8080\")\r\n        .unwrap()\r\n        .run();\r\n}\r\n```\r\n\r\nHandler that only uses `Json::extract()` call returns the result I expect:\r\n\r\n```bash\r\n$ curl -i -H \"Content-Type: application/json\" -d 'null' \"localhost:8080/json\"\r\nHTTP/1.1 200 OK\r\ncontent-length: 22\r\ncontent-type: text/plain; charset=utf-8\r\ndate: Wed, 16 May 2018 20:31:56 GMT\r\n\r\ndecoded json: Json: ()\r\n```\r\n\r\nBut handler, that uses `String::extract()` and then `Json::extract()` returns status code `400`:\r\n\r\n```bash\r\n$ curl -i -H \"Content-Type: application/json\" -d 'null' \"localhost:8080/str-then-json\"\r\nHTTP/1.1 400 Bad Request\r\ncontent-length: 0\r\ndate: Wed, 16 May 2018 20:30:15 GMT\r\n```\r\n\r\nIt fails during JSON parsing (error: `Json deserialize error: EOF while parsing a value at line 1 column 0`).\r\n\r\nIs this the correct behaviour of `FromRequest::extract()`? If so, shouldn't its signature better be `fn extract(req: &mut HttpRequest<S>) -> ...`?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/226","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/226/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/226/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/226/events","html_url":"https://github.com/actix/actix-web/issues/226","id":323697640,"node_id":"MDU6SXNzdWUzMjM2OTc2NDA=","number":226,"title":"Asynchronous middleware that runs after synchronous middleware panics during execution.","user":{"login":"mitskevich","id":1643475,"node_id":"MDQ6VXNlcjE2NDM0NzU=","avatar_url":"https://avatars0.githubusercontent.com/u/1643475?v=4","gravatar_id":"","url":"https://api.github.com/users/mitskevich","html_url":"https://github.com/mitskevich","followers_url":"https://api.github.com/u
57b1
sers/mitskevich/followers","following_url":"https://api.github.com/users/mitskevich/following{/other_user}","gists_url":"https://api.github.com/users/mitskevich/gists{/gist_id}","starred_url":"https://api.github.com/users/mitskevich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitskevich/subscriptions","organizations_url":"https://api.github.com/users/mitskevich/orgs","repos_url":"https://api.github.com/users/mitskevich/repos","events_url":"https://api.github.com/users/mitskevich/events{/privacy}","received_events_url":"https://api.github.com/users/mitskevich/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-16T16:32:48Z","updated_at":"2018-05-16T18:41:39Z","closed_at":"2018-05-16T18:01:07Z","author_association":"NONE","body":"Asynchronous middleware that runs after synchronous middleware panics during execution.\r\n\r\nExample:\r\n\r\n```rust\r\nextern crate actix_web;\r\nextern crate futures;\r\n\r\nuse actix_web as aw;\r\nuse actix_web::middleware::{Middleware, Started};\r\nuse futures::future;\r\n\r\nstruct AsyncMiddleware;\r\n\r\nimpl<S> Middleware<S> for AsyncMiddleware {\r\n    fn start(&self, _req: &mut aw::HttpRequest<S>) -> Result<Started, aw::Error> {\r\n        Ok(Started::Future(Box::new(future::ok(None))))\r\n    }\r\n}\r\n\r\nstruct SyncMiddleware;\r\n\r\nimpl<S> Middleware<S> for SyncMiddleware {\r\n    fn start(&self, _req: &mut aw::HttpRequest<S>) -> Result<Started, aw::Error> {\r\n        Ok(Started::Done)\r\n    }\r\n}\r\n\r\nfn index(_info: aw::Path<()>) -> String {\r\n   format!(\"Hello!\")\r\n}\r\n\r\nfn main() {\r\n    aw::server::new(\r\n        || aw::App::new()\r\n            .middleware(AsyncMiddleware)\r\n            .middleware(SyncMiddleware)\r\n            .resource(\"index\", |r| r.with(index)))\r\n        .bind(\"0.0.0.0:8080\").unwrap()\r\n        .run();\r\n}\r\n```\r\n\r\nRunning this code and opening `http://localhost:8080/index` results in the following panic:\r\n\r\n```\r\nthread 'arbiter:\"0bb027f8-ed1c-4c82-b536-abc9c30b705d\":\"actor\"' panicked at 'index out of bounds: the len is 2 but the index is 2', /Users/travis/build/rust-lang/rust/src/libcore/slice/mod.rs:865:10\r\nstack backtrace:\r\n   0:        0x1026258db - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h971d95e9e3db308e\r\n                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1:        0x1026173cb - std::sys_common::backtrace::print::h4029c802e44d6cdd\r\n                               at libstd/sys_common/backtrace.rs:71\r\n                               at libstd/sys_common/backtrace.rs:59\r\n   2:        0x1026211bd - std::panicking::default_hook::{{closure}}::h1ecea4a975914b6f\r\n                               at libstd/panicking.rs:207\r\n   3:        0x102620f1a - std::panicking::default_hook::h7cf0c6fc3b540dfe\r\n                               at libstd/panicking.rs:223\r\n   4:        0x102621636 - std::panicking::begin_panic::h922abe9fce293715\r\n                               at libstd/panicking.rs:402\r\n   5:        0x10262146a - std::panicking::try::do_call::hc7b9e6190a1d9f3e\r\n                               at libstd/panicking.rs:349\r\n   6:        0x102621362 - std::panicking::try::do_call::hc7b9e6190a1d9f3e\r\n                               at libstd/panicking.rs:325\r\n   7:        0x102661575 - core::ptr::drop_in_place::h4855c6c9f0f14c94\r\n                               at libcore/panicking.rs:72\r\n   8:        0x1026614f3 - core::ptr::drop_in_place::h4855c6c9f0f14c94\r\n                               at libcore/panicking.rs:58\r\n   9:        0x101f53d15 - <usize as core::slice::SliceIndex<[T]>>::index::h65242a3d74408fb7\r\n                               at /Users/travis/build/rust-lang/rust/src/libcore/slice/mod.rs:865\r\n  10:        0x101f2f334 - core::slice::<impl core::ops::index::Index<I> for [T]>::index::h4771d63dafe842e7\r\n                               at /Users/travis/build/rust-lang/rust/src/libcore/slice/mod.rs:767\r\n  11:        0x101e8a7ea - <alloc::vec::Vec<T> as core::ops::index::Index<I>>::index::h148e8edf9156cdb3\r\n                               at /Users/travis/build/rust-lang/rust/src/liballoc/vec.rs:1648\r\n  12:        0x101f66de0 - <actix_web::pipeline::StartMiddlewares<S, H>>::poll::h8dbf65eb80373ad0\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.6.5/src/pipeline.rs:284\r\n  13:        0x101f60265 - <actix_web::pipeline::PipelineState<S, H>>::poll::h94d1068e59e6d6aa\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.6.5/src/pipeline.rs:59\r\n  14:        0x101f5ee3a - <actix_web::pipeline::Pipeline<S, H> as actix_web::server::HttpHandlerTask>::poll_io::ha1b83b1d3dc5f24f\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.6.5/src/pipeline.rs:200\r\n  15:        0x101ea0fac - <actix_web::server::h1::Http1<T, H>>::poll_handler::h1d42c3d1c715bad5\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.6.5/src/server/h1.rs:199\r\n  16:        0x101ea3476 - <actix_web::server::h1::Http1<T, H>>::poll::h5cf9f117ca970540\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.6.5/src/server/h1.rs:137\r\n  17:        0x101f3b7a0 - <actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll::h7795c34ab56584b0\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.6.5/src/server/channel.rs:111\r\n  18:        0x101f3c407 - <actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll::h7795c34ab56584b0\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.6.5/src/server/channel.rs:174\r\n  19:        0x10229a274 - <alloc::boxed::Box<F> as futures::future::Future>::poll::hfb90946feb121de7\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/future/mod.rs:113\r\n  20:        0x1022b0a94 - <futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}::h0ab248a8acc874a7\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:289\r\n  21:        0x1022b0ffa - <futures::task_impl::Spawn<T>>::enter::{{closure}}::h378861c2d8ce9bbe\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:363\r\n  22:        0x1022bb128 - futures::task_impl::std::set::h1cd05e2c61fbfbab\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/std/mod.rs:78\r\n  23:        0x1022b0f97 - <futures::task_impl::Spawn<T>>::enter::ha7556f74fe7acea8\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:363\r\n  24:        0x1022b09f9 - <futures::task_impl::Spawn<T>>::poll_future_notify::h3e4b82b3edec8f97\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:289\r\n  25:        0x10229b383 - <tokio::executor::current_thread::scheduler::Scheduled<'a, U>>::tick::hf4d7705cfaaac095\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/scheduler.rs:352\r\n  26:        0x10229acdc - <tokio::executor::current_thread::scheduler::Scheduler<U>>::tick::{{closure}}::h54b27a570e90e7d7\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/scheduler.rs:332\r\n  27:        0x1022c34bc - <tokio::executor::current_thread::Borrow<'a, U>>::enter::{{closure}}::{{closure}}::hcc48ee3e1e05705d\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:688\r\n  28:        0x1022c2d6f - tokio::executor::current_thread::CurrentRunner::set_spawn::h5eab5b4f89b049e8\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:720\r\n  29:        0x1022c33ec - <tokio::executor::current_thread::Borrow<'a, U>>::enter::{{closure}}::h5b0a8090014ab294\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:687\r\n  30:        0x1022b2381 - <std::thread::local::LocalKey<T>>::try_with::h6eac37f2b399eb01\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:290\r\n  31:        0x1022b1514 - <std::thread::local::LocalKey<T>>::with::h48e37f282f2a48b6\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:244\r\n  32:        0x1022c332a - <tokio::executor::current_thread::Borrow<'a, U>>::enter::h9bb7cb1c04e96277\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:686\r\n  33:        0x10229abbf - <tokio::executor::current_thread::scheduler::Scheduler<U>>::tick::hdf3e3edf251b14da\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/scheduler.rs:332\r\n  34:        0x1022c356d - <tokio::executor::current_thread::Entered<'a, P>>::tick::hf2ce776f23d6e9f1\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:572\r\n  35:        0x1022c3691 - <tokio::executor::current_thread::Entered<'a, P>>::turn::h098087970c1bc3dd\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:515\r\n  36:        0x1022a6cdd - tokio_core::reactor::Core::poll::{{closure}}::{{closure}}::{{closure}}::{{closure}}::h33e5fa7e46c5a682\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:298\r\n  37:        0x102298007 - <scoped_tls::ScopedKey<T>>::set::hfa9a95fef5045c68\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.2/src/lib.rs:155\r\n  38:        0x1022a711a - tokio_core::reactor::Core::poll::{{closure}}::{{closure}}::{{closure}}::h42571aba03f224ff\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:297\r\n  39:        0x1022a84c8 - tokio_timer::timer::handle::with_default::{{closure}}::h34d5970264624e4e\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-timer-0.2.3/src/timer/handle.rs:64\r\n  40:        0x1022b2199 - <std::thread::local::LocalKey<T>>::try_with::h6bf160a5f49a28a2\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:290\r\n  41:        0x1022b16ea - <std::thread::local::LocalKey<T>>::with::h8fe86ca64da5039b\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:244\r\n  42:        0x1022a8387 - tokio_timer::timer::handle::with_default::hdf7a2a19ef6726a1\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-timer-0.2.3/src/timer/handle.rs:56\r\n  43:        0x1022a79f9 - tokio_core::reactor::Core::poll::{{closure}}::{{closure}}::h9d1943f005388064\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:275\r\n  44:        0x102297921 - tokio_executor::global::with_default::{{closure}}::hb31d8ad1952323c9\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.2/src/global.rs:176\r\n  45:        0x1022b1977 - <std::thread::local::LocalKey<T>>::try_with::h1d43a4b456a9b01b\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:290\r\n  46:        0x1022b174a - <std::thread::local::LocalKey<T>>::with::hc84c37348d7f17ff\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:244\r\n  47:        0x1022977d4 - tokio_executor::global::with_default::he4512017f4c16ebb\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.2/src/global.rs:150\r\n  48:        0x1022a7a40 - tokio_core::reactor::Core::poll::{{closure}}::hf9c10016dde5429a\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:274\r\n  49:        0x1022975af - tokio_reactor::with_default::{{closure}}::h851436993f0de63c\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.1/src/lib.rs:207\r\n  50:        0x1022b1b98 - <std::thread::local::LocalKey<T>>::try_with::h3e3b5136f28eb7c8\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:290\r\n  51:        0x1022b163a - <std::thread::local::LocalKey<T>>::with::h7d717bc221b61945\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:244\r\n  52:        0x102297431 - tokio_reactor::with_default::h57d4fb425d294470\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.1/src/lib.rs:199\r\n  53:        0x1022a6b12 - tokio_core::net::tcp::TcpStream::poll_write::{{closure}}::h7b0504d07a6d3801\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:273\r\n  54:        0x101ef8ca3 - tokio_core::reactor::Core::run::h3a5d350b0de0ba6a\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:248\r\n  55:        0x101e6bf65 - actix::arbiter::Arbiter::new::{{closure}}::had3987d0ed46d665\r\n                               at /Users/sam/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.5.6/src/arbiter.rs:95\r\n  56:        0x101fb41c4 - std::sys_common::backtrace::__rust_begin_short_backtrace::he0fc35969dfa5a36\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/sys_common/backtrace.rs:136\r\n  57:        0x101e80d3b - std::thread::Builder::spawn::{{closure}}::{{closure}}::hda4c96cf2dbdf8bd\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/mod.rs:406\r\n  58:        0x101f5e134 - <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once::h8a44cb7fb0a738b5\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/panic.rs:296\r\n  59:        0x101ef4e24 - std::panicking::try::do_call::h4d1e09151299fc37\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/panicking.rs:306\r\n  60:        0x1026342fe - panic_unwind::dwarf::eh::read_encoded_pointer::h607d3e9cb67c5e89\r\n                               at libpanic_unwind/lib.rs:102\r\n  61:        0x101ef4cf9 - std::panicking::try::hfec658bf10bc3c1c\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/panicking.rs:285\r\n  62:        0x101f5e244 - std::panic::catch_unwind::ha236733e8fd897c4\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/panic.rs:361\r\n  63:        0x101e807e8 - std::thread::Builder::spawn::{{closure}}::h43dba51c39ebe748\r\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/mod.rs:405\r\n  64:        0x101e80e85 - <F as alloc::boxed::FnBox<A>>::call_box::h916bed859c234b40\r\n                               at /Users/travis/build/rust-lang/rust/src/liballoc/boxed.rs:784\r\n  65:        0x102627c67 - std::sys_common::thread::start_thread::hffc3810a6e03b74d\r\n                               at /Users/travis/build/rust-lang/rust/src/liballoc/boxed.rs:794\r\n                               at libstd/sys_common/thread.rs:24\r\n  66:        0x102616198 - std::sys::unix::thread::Thread::new::thread_start::hbd2eb72915a2a86e\r\n                               at libstd/sys/unix/thread.rs:90\r\n  67:     0x7fffaac2793a - _pthread_body\r\n  68:     0x7fffaac27886 - _pthread_start\r\n```\r\n\r\nAlso, an interesting point: if I append synchronous middleware first, everything works. This code is working without panic:\r\n\r\n```rust\r\nfn main() {\r\n    aw::server::new(\r\n        || aw::App::new()\r\n            .middleware(SyncMiddleware)\r\n            .middleware(AsyncMiddleware)\r\n            .resource(\"index\", |r| r.with(index)))\r\n        .bind(\"0.0.0.0:8080\").unwrap()\r\n        .run();\r\n}\r\n```\r\n\r\nUsing:\r\nMacOS Sierra, rust 1.26.0, actix-web 0.6.5","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/223","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/223/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/223/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/223/events","html_url":"https://github.com/actix/actix-web/issues/223","id":323201330,"node_id":"MDU6SXNzdWUzMjMyMDEzMzA=","number":223,"title":"Reintroduce something like request.query()","user":{"login":"mitsuhiko","id":7396,"node_id":"MDQ6VXNlcjczOTY=","avatar_url":"https://avatars1.githubusercontent.com/u/7396?v=4","gravatar_id":"","url":"https://api.github.com/users/mitsuhiko","html_url":"https://github.com/mitsuhiko","followers_url":"https://api.github.com/users/mitsuhiko/followers","following_url":"https://api.github.com/users/mitsuhiko/following{/other_user}","gists_url":"https://api.github.com/users/mitsuhiko/gists{/gist_id}","starred_url":"https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitsuhiko/subscriptions","organizations_url":"https://api.github.com/users/mitsuhiko/orgs","repos_url":"https://api.github.com/users/mitsuhiko/repos","events_url":"https://api.github.com/users/mitsuhiko/events{/privacy}","received_events_url":"https://api.github.com/users/mitsuhiko/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-15T12:44:37Z","updated_at":"2018-05-15T17:45:04Z","closed_at":"2018-05-15T17:45:04Z","author_association":"MEMBER","body":"Query was recently deprecated in favor of using the `Query<T>` extractor which is typed. That's fine for a lot of cases but many others need something like a key/value iterator over the raw query parameters. I would propose to either add a helper method again that returns a pair iterator for the query or alternatively to provide a helper function to parse a query string into such an iterator.\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/222","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/222/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/222/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/222/events","html_url":"https://github.com/actix/actix-web/issues/222","id":322953723,"node_id":"MDU6SXNzdWUzMjI5NTM3MjM=","number":222,"title":"actix-web hanging after a few hours","user":{"login":"pka","id":19007,"node_id":"MDQ6VXNlcjE5MDA3","avatar_url":"https://avatars2.githubusercontent.com/u/19007?v=4","gravatar_id":"","url":"https://api.github.com/users/pka","html_url":"https://github.com/pka","followers_url":"https://api.github.com/users/pka/followers","following_url":"https://api.github.com/users/pka/following{/other_user}","gists_url":"https://api.github.com/users/pka/gists{/gist_id}","starred_url":"https://api.github.com/users/pka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pka/subscriptions","organizations_url":"https://api.github.com/users/pka/orgs","repos_url":"https://api.github.com/users/pka/repos","events_url":"https://api.github.com/users/pka/events{/privacy}","received_events_url":"https://api.github.com/users/pka/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-05-14T19:43:08Z","updated_at":"2018-05-15T17:45:21Z","closed_at":"2018-05-15T17:45:21Z","author_association":"NONE","body":"After a few hours, my actix-web application is hanging. HTTP request are hanging and SIGTERM has no effect. It's serving an iCal document using diesel/MySQL/r2d2 the same way as the diesel/sqlite example. It was only reproducable with Thunderbird as client which differs from a curl request:\r\n\r\ncurl request:\r\n```\r\nDEBUG 2018-05-14T15:29:34Z: tokio_reactor: loop process - 1 events, 0.000s\r\n INFO 2018-05-14T15:29:34Z: actix_web::middleware::logger: xx.xxx.xx.xx:52600 [14/May/2018:17:29:34 +0200] \"GET /ics?user_id=3 HTTP/1.1\" 200 5452 \"-\" \"curl/7.47.0\" 0.071867\r\nDEBUG 2018-05-14T15:29:34Z: tokio_reactor: loop process - 1 events, 0.000s\r\nDEBUG 2018-05-14T15:29:34Z: tokio_reactor: dropping I/O source: 0\r\n```\r\n\r\nThunderbird request:\r\n```\r\nDEBUG 2018-05-14T06:40:27Z: tokio_reactor: loop process - 1 events, 0.000s\r\n INFO 2018-05-14T06:40:27Z: actix_web::middleware::logger: xx.xxx.xx.xx:45230 [14/May/2018:08:40:27 +0200] \"GET /ics?user_id=3 HTTP/1.1\" 200 5276 \"-\" \"Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Thunderbird/52.7.0 Lightning/5.4.7\" 0.101101\r\nDEBUG 2018-05-14T06:41:27Z: tokio_reactor: loop process - 1 events, 0.000s\r\n```\r\n\r\nVersions:\r\n* actix-web 0.6.4\r\n* actix 0.5.6\r\n\r\n[Backtrace](https://github.com/actix/actix-web/files/2002288/backtrace.txt)","score":1.0}]}
0

