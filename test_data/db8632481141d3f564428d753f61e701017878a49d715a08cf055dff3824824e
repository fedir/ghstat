HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sun, 13 May 2018 13:07:07 GMT
Link: <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Aactix%2Factix-web+type%3Aissue+state%3Aclosed&page=5>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CFE8:4F42:44EAB51:8ADA758:5AF8387A
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 12
X-Ratelimit-Reset: 1526216865
X-Runtime-Rack: 0.496600
X-Xss-Protection: 1; mode=block

8000
{"total_count":124,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/actix/actix-web/issues/217","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/217/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/217/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/217/events","html_url":"https://github.com/actix/actix-web/issues/217","id":321439732,"number":217,"title":"Could not document `trust-dns-resolver`.","user":{"login":"adals","id":169691,"avatar_url":"https://avatars2.githubusercontent.com/u/169691?v=4","gravatar_id":"","url":"https://api.github.com/users/adals","html_url":"https://github.com/adals","followers_url":"https://api.github.com/users/adals/followers","following_url":"https://api.github.com/users/adals/following{/other_user}","gists_url":"https://api.github.com/users/adals/gists{/gist_id}","starred_url":"https://api.github.com/users/adals/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adals/subscriptions","organizations_url":"https://api.github.com/users/adals/orgs","repos_url":"https://api.github.com/users/adals/repos","events_url":"https://api.github.com/users/adals/events{/privacy}","received_events_url":"https://api.github.com/users/adals/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2018-05-09T05:53:51Z","updated_at":"2018-05-09T14:46:12Z","closed_at":"2018-05-09T13:55:04Z","author_association":"NONE","body":"[dependencies]\r\nactix-web=\"0.6.1\"\r\n\r\ncargo doc then\r\n\r\nerror[E0658]: access to extern crates through prelude is experimental (see issue #44660)\r\n  |\r\n  = help: add #![feature(extern_prelude)] to the crate attributes to enable\r\n\r\nwarning: [trust_dns_proto::SecureClientHandle] cannot be resolved, ignoring it...\r\n\r\nerror: Could not document `trust-dns-resolver`.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/215","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/215/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/215/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/215/events","html_url":"https://github.com/actix/actix-web/issues/215","id":321359106,"number":215,"title":"examples/json does not work with http/2","user":{"login":"Lingli05","id":31961055,"avatar_url":"https://avatars1.githubusercontent.com/u/31961055?v=4","gravatar_id":"","url":"https://api.github.com/users/Lingli05","html_url":"https://github.com/Lingli05","followers_url":"https://api.github.com/users/Lingli05/followers","following_url":"https://api.github.com/users/Lingli05/following{/other_user}","gists_url":"https://api.github.com/users/Lingli05/gists{/gist_id}","starred_url":"https://api.github.com/users/Lingli05/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Lingli05/subscriptions","organizations_url":"https://api.github.com/users/Lingli05/orgs","repos_url":"https://api.github.com/users/Lingli05/repos","events_url":"https://api.github.com/users/Lingli05/events{/privacy}","received_events_url":"https://api.github.com/users/Lingli05/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-08T21:49:43Z","updated_at":"2018-05-09T14:30:28Z","closed_at":"2018-05-09T01:30:28Z","author_association":"NONE","body":"**Tested the examples/json using the following curl commands:**\r\n\r\n1. curl --verbose -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/\r\n\r\n2. curl --verbose -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/mjsonrust\r\n\r\n3. curl --verbose -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/manual\r\n\r\n4. curl --verbose -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/extractor\r\n\r\n**Everything worked as expected. However adding --http2-prior-knowledge to the above commands would trigger failure:**\r\n1. curl --verbose --http2-prior-knowledge -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/>\r\n\r\n2. curl --verbose --http2-prior-knowledge -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/mjsonrust\r\n\r\n3. curl --verbose --http2-prior-knowledge -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/manual\r\n\r\n4. curl --verbose --http2-prior-knowledge -d '{\"name\":\"value1\", \"number\":100}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/extractor\r\n\r\n**I was hoping index_mjsonrust() and index_manual() would work with http/2, but saw the following after dumping req in each function:**\r\n\r\nindex_jsonrust_\r\nHttpRequest HTTP/2.0 POST:/mjsonrust\r\n  headers:\r\n    \"user-agent\": \"curl/7.58.0\"\r\n    \"accept\": \"*/*\"\r\n    \"content-type\": \"application/json\"\r\n    \"content-length\": \"31\"\r\n\r\nERROR 2018-05-08T21:12:31Z: actix_web::pipeline: Error occured during request handling: user error: release capacity too big\r\n INFO 2018-05-08T21:12:31Z: actix_web::middleware::logger: 127.0.0.1:37984 [08/May/2018:17:12:31 -0400] \"POST /mjsonrust HTTP/2.0\" 500 0 \"-\" \"curl/7.58.0\" 0.000642\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/213","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/213/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/213/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/213/events","html_url":"https://github.com/actix/actix-web/issues/213","id":321142484,"number":213,"title":"Stream not polled after Async::NotReady","user":{"login":"estin","id":520814,"avatar_url":"https://avatars3.githubusercontent.com/u/520814?v=4","gravatar_id":"","url":"https://api.github.com/users/estin","html_url":"https://github.com/estin","followers_url":"https://api.github.com/users/estin/followers","following_url":"https://api.github.com/users/estin/following{/other_user}","gists_url":"https://api.github.com/users/estin/gists{/gist_id}","starred_url":"https://api.github.com/users/estin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/estin/subscriptions","organizations_url":"https://api.github.com/users/estin/orgs","repos_url":"https://api.github.com/users/estin/repos","events_url":"https://api.github.com/users/estin/events{/privacy}","received_events_url":"https://api.github.com/users/estin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-05-08T11:10:34Z","updated_at":"2018-05-08T21:52:19Z","closed_at":"2018-05-08T20:42:16Z","author_association":"NONE","body":"Hello.\r\nI'm new in actix, async story and rust at all )\r\n\r\nI want to implement simplest Server Sent Event with actix-web streaming feature.\r\nI checkout out some examples from #186 and ws implementation, but they are so complicated for me and overhead in my app.\r\n\r\nMy goal is to push messages from server to client.\r\nWhere is my mistake?\r\n\r\n### Versions\r\n```bash\r\n$ rustc --version\r\nrustc 1.27.0-nightly (565235ee7 2018-05-07)\r\n$ cargo --version\r\ncargo 1.27.0-nightly (af3f1cd29 2018-05-03)\r\n```\r\n### Dependencies\r\n```toml\r\nbytes = \"0.4.7\"\r\nfutures = \"0.1\"\r\nactix = \"0.5.6\"\r\nactix-web = \"0.5.6\"\r\n```\r\n\r\n### Source\r\n```rust\r\nextern crate bytes;\r\nextern crate futures;\r\nextern crate actix_web;\r\n\r\nuse bytes::{Bytes};\r\nuse futures::{Async, Poll, Stream};\r\nuse actix_web::{server, App, HttpRequest, HttpResponse, Error};\r\n\r\nstruct Sse {\r\n    counter: usize,\r\n}\r\n\r\nimpl Stream for Sse {\r\n    type Item = Bytes;\r\n    type Error = Error;\r\n\r\n    fn poll(&mut self) -> Poll<Option<Bytes>, Error> {\r\n        self.counter += 1;\r\n        println!(\"poll - {}\", self.counter);\r\n        match self.counter {\r\n            1 => Ok(Async::Ready(Some(Bytes::from(&b\"data: hello\\n\"[..])))),\r\n            100 => {\r\n                self.counter = 0;\r\n                Ok(Async::Ready(Some(Bytes::from(&b\"data: ping\\n\"[..]))))\r\n            },\r\n            _ => {\r\n                Ok(Async::NotReady)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfn index(_req: HttpRequest) -> HttpResponse {\r\n    HttpResponse::Ok()\r\n        .content_type(\"text/event-stream\")\r\n        .streaming(Sse {counter: 0})\r\n}\r\n\r\nfn main() {\r\n    server::new(\r\n        || App::new()\r\n            .resource(\"/\", |r| r.f(index)))\r\n        .bind(\"127.0.0.1:8088\").expect(\"Can not bind to 127.0.0.1:8088\")\r\n        .run();\r\n}\r\n```\r\n\r\n### Test\r\n```bash\r\n$ cargo run\r\n   Compiling actix-web-simplest-sse v0.1.0 (file:///home/user/prj/actix-web-simplest-sse)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 4.84s\r\n     Running `target/debug/actix-web-simplest-sse`\r\npoll - 1\r\npoll - 2\r\n```\r\n\r\n```bash\r\n$ curl -v http://127.0.0.1:8088\r\n* Rebuilt URL to: http://127.0.0.1:8088/\r\n*   Trying 127.0.0.1...\r\n* TCP_NODELAY set\r\n* Connected to 127.0.0.1 (127.0.0.1) port 8088 (#0)\r\n> GET / HTTP/1.1\r\n> Host: 127.0.0.1:8088\r\n> User-Agent: curl/7.59.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< content-type: text/event-stream\r\n< transfer-encoding: chunked\r\n< date: Tue, 08 May 2018 10:54:22 GMT\r\n<\r\ndata: hello\r\n```\r\n\r\n### Expect\r\n`Sse` stream must be polled infinitely\r\n\r\nP.S. Sorry for my poor English\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/212","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/212/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/212/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/212/events","html_url":"https://github.com/actix/actix-web/issues/212","id":321010107,"number":212,"title":"Connection pool using client::get(uri).with_connector(...) is not respecting keep-alive","user":{"login":"parasyte","id":456942,"avatar_url":"https://avatars0.githubusercontent.com/u/456942?v=4","gravatar_id":"","url":"https://api.github.com/users/parasyte","html_url":"https://github.com/parasyte","followers_url":"https://api.github.com/users/parasyte/followers","following_url":"https://api.github.com/users/parasyte/following{/other_user}","gists_url":"https://api.github.com/users/parasyte/gists{/gist_id}","starred_url":"https://api.github.com/users/parasyte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/parasyte/subscriptions","organizations_url":"https://api.github.com/users/parasyte/orgs","repos_url":"https://api.github.com/users/parasyte/repos","events_url":"https://api.github.com/users/parasyte/events{/privacy}","received_events_url":"https://api.github.com/users/parasyte/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2018-05-08T01:16:16Z","updated_at":"2018-05-08T20:41:41Z","closed_at":"2018-05-08T20:41:41Z","author_association":"NONE","body":"I hacked together a quick proxy which is very similar to the [proxy example](https://github.com/actix/examples/blob/master/http-proxy/src/main.rs), except I'm using `ClientRequestBuilder.with_connector()` trying to utilize the built-in connection pooling.\r\n\r\n```rust\r\n#![feature(proc_macro, generators)]\r\n\r\nextern crate actix;\r\nextern crate actix_web;\r\nextern crate futures_await as futures;\r\n\r\nuse actix::{Actor, Addr, Unsync};\r\nuse actix_web::{client, server, App, Path, State};\r\nuse actix_web::http::Method;\r\nuse futures::prelude::*;\r\n\r\nstruct AppState {\r\n    conn: Addr<Unsync, client::ClientConnector>,\r\n}\r\n\r\n#[async(boxed)]\r\nfn index(info: Path<(u32, String)>, state: State<AppState>) -> Result<String, actix_web::error::Error> {\r\n    let uri = format!(\"http://127.0.0.1:8081/{}/{}/index.html\", info.0, info.1);\r\n\r\n    let resp = await!(client::get(uri)\r\n        .with_connector(state.conn.clone())\r\n        .no_default_headers()\r\n        .upgrade()\r\n        .finish()?\r\n        .send()\r\n    )?;\r\n\r\n    let body = await!(resp.into_future())\r\n        .unwrap()\r\n        .0\r\n        .unwrap();\r\n\r\n    Ok(std::str::from_utf8(&body)?.to_owned())\r\n}\r\n\r\nfn main() {\r\n    let addr = \"127.0.0.1:8080\";\r\n    println!(\"Listening on http://{}\", addr);\r\n\r\n    server::new(|| {\r\n        let conn: Addr<Unsync, _> = client::ClientConnector::default().start();\r\n        App::with_state(AppState{conn})\r\n            .resource(\"/{id}/{name}/index.html\", |r| r.method(Method::GET).with2(index))\r\n    }).bind(addr)\r\n        .unwrap()\r\n        .run();\r\n}\r\n```\r\n\r\nThe proxy functionality works (using the [basic hello-world example](https://github.com/actix/actix-web#example) as an upstream on port 8081), but keep-alive is not working, as you can see from tcpdump:\r\n\r\n```\r\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\r\nlistening on lo0, link-type NULL (BSD loopback), capture size 262144 bytes\r\n18:05:42.542170 IP 127.0.0.1.58422 > 127.0.0.1.8080: Flags [S], seq 1194112351, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 1218386738 ecr 0,sackOK,eol], length 0\r\n18:05:42.542279 IP 127.0.0.1.8080 > 127.0.0.1.58422: Flags [S.], seq 3083285766, ack 1194112352, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 1218386738 ecr 1218386738,sackOK,eol], length 0\r\n18:05:42.542301 IP 127.0.0.1.58422 > 127.0.0.1.8080: Flags [.], ack 1, win 12759, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.542322 IP 127.0.0.1.8080 > 127.0.0.1.58422: Flags [.], ack 1, win 12759, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.542350 IP 127.0.0.1.58422 > 127.0.0.1.8080: Flags [P.], seq 1:154, ack 1, win 12759, options [nop,nop,TS val 1218386738 ecr 1218386738], length 153: HTTP: GET /123/jay/index.html HTTP/1.1\r\n18:05:42.542367 IP 127.0.0.1.8080 > 127.0.0.1.58422: Flags [.], ack 154, win 12754, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.542567 IP 127.0.0.1.58423 > 127.0.0.1.8081: Flags [S], seq 1266615293, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 1218386738 ecr 0,sackOK,eol], length 0\r\n18:05:42.542637 IP 127.0.0.1.8081 > 127.0.0.1.58423: Flags [S.], seq 2134870156, ack 1266615294, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 1218386738 ecr 1218386738,sackOK,eol], length 0\r\n18:05:42.542647 IP 127.0.0.1.58423 > 127.0.0.1.8081: Flags [.], ack 1, win 12759, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.542658 IP 127.0.0.1.8081 > 127.0.0.1.58423: Flags [.], ack 1, win 12759, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.542708 IP 127.0.0.1.58423 > 127.0.0.1.8081: Flags [P.], seq 1:91, ack 1, win 12759, options [nop,nop,TS val 1218386738 ecr 1218386738], length 90\r\n18:05:42.542726 IP 127.0.0.1.8081 > 127.0.0.1.58423: Flags [.], ack 91, win 12756, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.542810 IP 127.0.0.1.8081 > 127.0.0.1.58423: Flags [P.], seq 1:135, ack 91, win 12756, options [nop,nop,TS val 1218386738 ecr 1218386738], length 134\r\n18:05:42.542827 IP 127.0.0.1.58423 > 127.0.0.1.8081: Flags [.], ack 135, win 12755, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.542908 IP 127.0.0.1.8080 > 127.0.0.1.58422: Flags [P.], seq 1:135, ack 154, win 12754, options [nop,nop,TS val 1218386738 ecr 1218386738], length 134: HTTP: HTTP/1.1 200 OK\r\n18:05:42.542935 IP 127.0.0.1.58422 > 127.0.0.1.8080: Flags [.], ack 135, win 12755, options [nop,nop,TS val 1218386738 ecr 1218386738], length 0\r\n18:05:42.546016 IP 127.0.0.1.58422 > 127.0.0.1.8080: Flags [F.], seq 154, ack 135, win 12755, options [nop,nop,TS val 1218386741 ecr 1218386738], length 0\r\n18:05:42.546051 IP 127.0.0.1.8080 > 127.0.0.1.58422: Flags [.], ack 155, win 12754, options [nop,nop,TS val 1218386741 ecr 1218386741], length 0\r\n18:05:42.546107 IP 127.0.0.1.8080 > 127.0.0.1.58422: Flags [F.], seq 135, ack 155, win 12754, options [nop,nop,TS val 1218386741 ecr 1218386741], length 0\r\n18:05:42.546137 IP 127.0.0.1.58422 > 127.0.0.1.8080: Flags [.], ack 136, win 12755, options [nop,nop,TS val 1218386741 ecr 1218386741], length 0\r\n18:05:43.200008 IP 127.0.0.1.58423 > 127.0.0.1.8081: Flags [F.], seq 91, ack 135, win 12755, options [nop,nop,TS val 1218387384 ecr 1218386738], length 0\r\n18:05:43.200039 IP 127.0.0.1.8081 > 127.0.0.1.58423: Flags [.], ack 92, win 12756, options [nop,nop,TS val 1218387384 ecr 1218387384], length 0\r\n18:05:43.200085 IP 127.0.0.1.8081 > 127.0.0.1.58423: Flags [F.], seq 135, ack 92, win 12756, options [nop,nop,TS val 1218387385 ecr 1218387384], length 0\r\n18:05:43.200123 IP 127.0.0.1.58423 > 127.0.0.1.8081: Flags [.], ack 136, win 12755, options [nop,nop,TS val 1218387385 ecr 1218387385], length 0\r\n```\r\n\r\nI would expect the `FIN` packets to not be sent to port 8081 (timestamps 18:05:43.200008 and above) if keep-alive was working, and the sockets should be reused indefinitely. The `FIN` is also delayed from the last `ACK` packet at `18:05:42.542827` ... by about 650ms.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/211","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/211/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/211/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/211/events","html_url":"https://github.com/actix/actix-web/issues/211","id":320883772,"number":211,"title":"Logger Middleware - Allow certain endpoints to be excluded from logging","user":{"login":"glademiller","id":2006148,"avatar_url":"https://avatars2.githubusercontent.com/u/2006148?v=4","gravatar_id":"","url":"https://api.github.com/users/glademiller","html_url":"https://github.com/glademiller","followers_url":"https://api.github.com/users/glademiller/followers","following_url":"https://api.github.com/users/glademiller/following{/other_user}","gists_url":"https://api.github.com/users/glademiller/gists{/gist_id}","starred_url":"https://api.github.com/users/glademiller/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glademiller/subscriptions","organizations_url":"https://api.github.com/users/glademiller/orgs","repos_url":"https://api.github.com/users/glademiller/repos","events_url":"https://api.github.com/users/glademiller/events{/privacy}","received_events_url":"https://api.github.com/users/glademiller/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-07T17:16:04Z","updated_at":"2018-05-08T23:30:57Z","closed_at":"2018-05-08T23:30:57Z","author_association":"CONTRIBUTOR","body":"Constant health checks create a lot of clutter in logs. I would love a simple way to remove certain endpoints from the default Logger middleware. \r\n\r\nThoughts on how this could be done:\r\n- Logger Takes a list of endpoints to not log.\r\n- Logger takes a closure or something implementing a trait that allows it to filter logs.\r\n- I simply filter the log at the logger level instead of in the middleware.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/209","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/209/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/209/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/209/events","html_url":"https://github.com/actix/actix-web/issues/209","id":320305749,"number":209,"title":"URL parameters not being decoded.","user":{"login":"c-edw","id":38229097,"avatar_url":"https://avatars1.githubusercontent.com/u/38229097?v=4","gravatar_id":"","url":"https://api.github.com/users/c-edw","html_url":"https://github.com/c-edw","followers_url":"https://api.github.com/users/c-edw/followers","following_url":"https://api.github.com/users/c-edw/following{/other_user}","gists_url":"https://api.github.com/users/c-edw/gists{/gist_id}","starred_url":"https://api.github.com/users/c-edw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/c-edw/subscriptions","organizations_url":"https://api.github.com/users/c-edw/orgs","repos_url":"https://api.github.com/users/c-edw/repos","events_url":"https://api.github.com/users/c-edw/events{/privacy}","received_events_url":"https://api.github.com/users/c-edw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2018-05-04T14:52:58Z","updated_at":"2018-05-04T19:07:46Z","closed_at":"2018-05-04T18:24:41Z","author_association":"NONE","body":"I have a basic project using `actix-web`, with a route, accepting a URL parameter named `url`.\r\nWhen I call this route by requesting `http://localhost:8080/%2F`, the parameter is not decoded, and remains as \"%2F\" instead of \"/\".\r\n\r\n\r\n```rust\r\nserver::new(|| App::new().resource(\"/{url}\", |r| r.with(process)))\r\n    .bind(\"0.0.0.0:8080\")\r\n    .unwrap()\r\n    .start();\r\n```\r\n...\r\n```rust\r\n// RETURNS \"%2F\" NOT \"/\"\r\nlet url = req.match_info()\r\n    .get(\"url\")\r\n    .unwrap();\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/207","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/207/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/207/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/207/events","html_url":"https://github.com/actix/actix-web/issues/207","id":319294837,"number":207,"title":"Interior composability of FromRequest","user":{"login":"mitsuhiko","id":7396,"avatar_url":"https://avatars1.githubusercontent.com/u/7396?v=4","gravatar_id":"","url":"https://api.github.com/users/mitsuhiko","html_url":"https://github.com/mitsuhiko","followers_url":"https://api.github.com/users/mitsuhiko/followers","following_url":"https://api.github.com/users/mitsuhiko/following{/other_user}","gists_url":"https://api.github.com/users/mitsuhiko/gists{/gist_id}","starred_url":"https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitsuhiko/subscriptions","organizations_url":"https://api.github.com/users/mitsuhiko/orgs","repos_url":"https://api.github.com/users/mitsuhiko/repos","events_url":"https://api.github.com/users/mitsuhiko/events{/privacy}","received_events_url":"https://api.github.com/users/mitsuhiko/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2018-05-01T19:11:49Z","updated_at":"2018-05-08T20:21:52Z","closed_at":"2018-05-08T20:21:52Z","author_association":"MEMBER","body":"I'm encountering the case in our app frequently that I want to internally compose some `FromRequest` in another `FromRequest`. In our case for instance we have a standardized request format that internally wraps a payload but also accesses auth information.\r\n\r\nSo conceptionally one can think of it as some logic around a `Auth` `FromRequest` and a `Json<T>` `FromRequest`. If DI is used they would be passed to the function independently but the endpoint will never actually access any of the values independently.\r\n\r\nSo effectively we're looking at a way to combine `FormRequest` (use `With2` and friends internally somehow).\r\n\r\nThe end goal would be that a user can write a `fn handler(req: CustomThing<T>)` where `CustomThing<T>` internally uses other `FromRequest`s.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/206","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/206/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/206/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/206/events","html_url":"https://github.com/actix/actix-web/issues/206","id":318533245,"number":206,"title":"Allow to use ssl and non-ssl connections with the same HttpServer","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-27T20:03:24Z","updated_at":"2018-05-01T02:52:41Z","closed_at":"2018-05-01T02:52:41Z","author_association":"OWNER","body":"","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/203","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/203/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/203/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/203/events","html_url":"https://github.com/actix/actix-web/issues/203","id":317981335,"number":203,"title":"Allow for passing custom HTML to `StaticFiles`","user":{"login":"svenstaro","id":1664,"avatar_url":"https://avatars0.githubusercontent.com/u/1664?v=4","gravatar_id":"","url":"https://api.github.com/users/svenstaro","html_url":"https://github.com/svenstaro","followers_url":"https://api.github.com/users/svenstaro/followers","following_url":"https://api.github.com/users/svenstaro/following{/other_user}","gists_url":"https://api.github.com/users/svenstaro/gists{/gist_id}","starred_url":"https://api.github.com/users/svenstaro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/svenstaro/subscriptions","organizations_url":"https://api.github.com/users/svenstaro/orgs","repos_url":"https://api.github.com/users/svenstaro/repos","events_url":"https://api.github.com/users/svenstaro/events{/privacy}","received_events_url":"https://api.github.com/users/svenstaro/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-26T11:08:49Z","updated_at":"2018-05-02T22:53:45Z","closed_at":"2018-05-02T22:53:45Z","author_association":"CONTRIBUTOR","body":"It would be neat if we could pass custom HTML to the directory listing. This could work in some kind of templating fashion.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/202","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/202/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/202/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/202/events","html_url":"https://github.com/actix/actix-web/issues/202","id":317753452,"number":202,"title":"add scopes / nested routes","user":{"login":"Datamats","id":6295090,"avatar_url":"https://avatars2.githubusercontent.com/u/6295090?v=4","gravatar_id":"","url":"https://api.github.com/users/Datamats","html_url":"https://github.com/Datamats","followers_url":"https://api.github.com/users/Datamats/followers","following_url":"https://api.github.com/users/Datamats/following{/other_user}","gists_url":"https://api.github.com/users/Datamats/gists{/gist_id}","starred_url":"https://api.github.com/users/Datamats/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Datamats/subscriptions","organizations_url":"https://api.github.com/users/Datamats/orgs","repos_url":"https://api.github.com/users/Datamats/repos","events_url":"https://api.github.com/users/Datamats/events{/privacy}","received_events_url":"https://api.github.com/users/Datamats/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-25T18:59:22Z","updated_at":"2018-05-01T05:32:37Z","closed_at":"2018-05-01T05:32:37Z","author_association":"NONE","body":"adding scopes / nested routes would allow you to manage your code based on the url path and is an easy way to avoid having the same path over and over again when writing resources for APIs\r\n\r\nexample: https://github.com/gotham-rs/gotham/blob/master/examples/routing/scopes/src/main.rs","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/200","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/200/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/200/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/200/events","html_url":"https://github.com/actix/actix-web/issues/200","id":317341051,"number":200,"title":"Compilation failure in 0.5.5 with default-features = false","user":{"login":"mgeorgehansen","id":502678,"avatar_url":"https://avatars1.githubusercontent.com/u/502678?v=4","gravatar_id":"","url":"https://api.github.com/users/mgeorgehansen","html_url":"https://github.com/mgeorgehansen","followers_url":"https://api.github.com/users/mgeorgehansen/followers","following_url":"https://api.github.com/users/mgeorgehansen/following{/other_user}","gists_url":"https://api.github.com/users/mgeorgehansen/gists{/gist_id}","starred_url":"https://api.github.com/users/mgeorgehansen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mgeorgehansen/subscriptions","organizations_url":"https://api.github.com/users/mgeorgehansen/orgs","repos_url":"https://api.github.com/users/mgeorgehansen/repos","events_url":"https://api.github.com/users/mgeorgehansen/events{/privacy}","received_events_url":"https://api.github.com/users/mgeorgehansen/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-24T18:21:05Z","updated_at":"2018-04-24T19:33:48Z","closed_at":"2018-04-24T19:33:48Z","author_association":"NONE","body":"In my cargo.toml I've specified `actix-web = { version = \"0.5\", default-features = false }` as a dependency, and after running `cargo update` and updating to actix-web v0.5.5 I started to get compilation failures that seem to stem from the new flate2 dependency.\r\n\r\nThere are a lot of build errors in the `cargo build` command, but this one in particular is at the top:\r\n\r\n> error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead? (see issue #27812)\r\n   --> ~/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs:132:5\r\n      |\r\n132 |     extern crate miniz_sys;\r\n      | \r\n\r\nIt seems like one of the required backends to flate2 isn'
8000
t being pulled in when default-features are excluded, and I've verified that removing `default-features = false` from my Cargo.toml config resolves the issue.\r\n\r\nNot sure if this counts as a breaking change but it definitely caught me by surprise, and unfortunately the resulting error messages are pretty cryptic.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/199","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/199/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/199/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/199/events","html_url":"https://github.com/actix/actix-web/issues/199","id":316915583,"number":199,"title":"Allow compiling without C dependencies","user":{"login":"jcarres-mdsol","id":1803073,"avatar_url":"https://avatars0.githubusercontent.com/u/1803073?v=4","gravatar_id":"","url":"https://api.github.com/users/jcarres-mdsol","html_url":"https://github.com/jcarres-mdsol","followers_url":"https://api.github.com/users/jcarres-mdsol/followers","following_url":"https://api.github.com/users/jcarres-mdsol/following{/other_user}","gists_url":"https://api.github.com/users/jcarres-mdsol/gists{/gist_id}","starred_url":"https://api.github.com/users/jcarres-mdsol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jcarres-mdsol/subscriptions","organizations_url":"https://api.github.com/users/jcarres-mdsol/orgs","repos_url":"https://api.github.com/users/jcarres-mdsol/repos","events_url":"https://api.github.com/users/jcarres-mdsol/events{/privacy}","received_events_url":"https://api.github.com/users/jcarres-mdsol/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-23T17:49:29Z","updated_at":"2018-04-24T17:49:44Z","closed_at":"2018-04-24T16:32:39Z","author_association":"NONE","body":"Actix web has currently only three possible C dependencies:\r\nBrotli which may bring Brotli-sys which is a wrapper to a C library and\r\nOpenssl which also can bring a C dependency or not\r\nMiniz which can bring Miniz-sys.\r\n\r\nIn the case of Miniz it is possible via features to use a different Rust only backend. Although such backend is considered experimental.\r\n\r\nActix web already allows Brotli and openssl to be removed or use rust backends. \r\nIf Actix web gives a way to either remove Miniz or allow it to use the Rust backend, then it will have no C dependencies and it will be easier to cross compile it by just adding and using  the target chain of the system which would run it. \r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/198","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/198/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/198/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/198/events","html_url":"https://github.com/actix/actix-web/issues/198","id":316780756,"number":198,"title":"Add pretty-printing json helper","user":{"login":"Fiedzia","id":240435,"avatar_url":"https://avatars3.githubusercontent.com/u/240435?v=4","gravatar_id":"","url":"https://api.github.com/users/Fiedzia","html_url":"https://github.com/Fiedzia","followers_url":"https://api.github.com/users/Fiedzia/followers","following_url":"https://api.github.com/users/Fiedzia/following{/other_user}","gists_url":"https://api.github.com/users/Fiedzia/gists{/gist_id}","starred_url":"https://api.github.com/users/Fiedzia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Fiedzia/subscriptions","organizations_url":"https://api.github.com/users/Fiedzia/orgs","repos_url":"https://api.github.com/users/Fiedzia/repos","events_url":"https://api.github.com/users/Fiedzia/events{/privacy}","received_events_url":"https://api.github.com/users/Fiedzia/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-23T11:59:10Z","updated_at":"2018-05-08T23:31:30Z","closed_at":"2018-05-08T23:31:13Z","author_association":"NONE","body":"Json does not provide any way of pretty-printing. A PrettyJson variant would be nice to have.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/197","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/197/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/197/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/197/events","html_url":"https://github.com/actix/actix-web/issues/197","id":316541677,"number":197,"title":"How to implement ResponseError for r2d2::Error and diesel::result::Error?","user":{"login":"spease","id":2825204,"avatar_url":"https://avatars1.githubusercontent.com/u/2825204?v=4","gravatar_id":"","url":"https://api.github.com/users/spease","html_url":"https://github.com/spease","followers_url":"https://api.github.com/users/spease/followers","following_url":"https://api.github.com/users/spease/following{/other_user}","gists_url":"https://api.github.com/users/spease/gists{/gist_id}","starred_url":"https://api.github.com/users/spease/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spease/subscriptions","organizations_url":"https://api.github.com/users/spease/orgs","repos_url":"https://api.github.com/users/spease/repos","events_url":"https://api.github.com/users/spease/events{/privacy}","received_events_url":"https://api.github.com/users/spease/received_events","type":"User","site_admin":false},"labels":[{"id":707286509,"url":"https://api.github.com/repos/actix/actix-web/labels/question","name":"question","color":"cc317c","default":true}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-22T02:06:14Z","updated_at":"2018-05-02T17:43:35Z","closed_at":"2018-05-02T17:43:35Z","author_association":"NONE","body":"Is there any way to do this? The examples just seem to use panics, which doesn't seem like good practice.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/193","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/193/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/193/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/193/events","html_url":"https://github.com/actix/actix-web/issues/193","id":316452728,"number":193,"title":"Websocket CloseCode Empty/Status is ambiguous","user":{"login":"fuchsnj","id":6706944,"avatar_url":"https://avatars3.githubusercontent.com/u/6706944?v=4","gravatar_id":"","url":"https://api.github.com/users/fuchsnj","html_url":"https://github.com/fuchsnj","followers_url":"https://api.github.com/users/fuchsnj/followers","following_url":"https://api.github.com/users/fuchsnj/following{/other_user}","gists_url":"https://api.github.com/users/fuchsnj/gists{/gist_id}","starred_url":"https://api.github.com/users/fuchsnj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fuchsnj/subscriptions","organizations_url":"https://api.github.com/users/fuchsnj/orgs","repos_url":"https://api.github.com/users/fuchsnj/repos","events_url":"https://api.github.com/users/fuchsnj/events{/privacy}","received_events_url":"https://api.github.com/users/fuchsnj/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-21T02:05:25Z","updated_at":"2018-04-26T14:55:33Z","closed_at":"2018-04-26T14:55:33Z","author_association":"CONTRIBUTOR","body":"The `CloseCode::Empty` and `CloseCode::Status` are basically the same code.\r\n\r\nAccording to the RFC, if a client sends no close code (`CloseCode::Empty`) this is equivalent to 1005 (`CloseCode::Status`). This can be confusing since it might not be obvious which one of these values you should check against.\r\n\r\nI suggest removing `CloseCode::Empty` and using an `Option::None` instead.\r\nI would also recommend changing `CloseCode::Status` to `CloseCode::NoStatus` to reflect what it actually means.\r\n\r\nThese are both breaking changes, but if you like them I can make a PR for this.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/191","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/191/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/191/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/191/events","html_url":"https://github.com/actix/actix-web/issues/191","id":316447570,"number":191,"title":"panic when Websocket is closed with no error code","user":{"login":"fuchsnj","id":6706944,"avatar_url":"https://avatars3.githubusercontent.com/u/6706944?v=4","gravatar_id":"","url":"https://api.github.com/users/fuchsnj","html_url":"https://github.com/fuchsnj","followers_url":"https://api.github.com/users/fuchsnj/followers","following_url":"https://api.github.com/users/fuchsnj/following{/other_user}","gists_url":"https://api.github.com/users/fuchsnj/gists{/gist_id}","starred_url":"https://api.github.com/users/fuchsnj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fuchsnj/subscriptions","organizations_url":"https://api.github.com/users/fuchsnj/orgs","repos_url":"https://api.github.com/users/fuchsnj/repos","events_url":"https://api.github.com/users/fuchsnj/events{/privacy}","received_events_url":"https://api.github.com/users/fuchsnj/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-21T00:51:13Z","updated_at":"2018-04-21T14:54:26Z","closed_at":"2018-04-21T14:54:26Z","author_association":"CONTRIBUTOR","body":"I setup a very basic \"echo\" websocket server. When I connect and then close the connection, I get a panic.\r\n\r\nWebsocket client (javascript console in Chrome/Firefox)\r\n```javascript\r\nlet ws = new Websocket(\"ws://127.0.0.1/ws\");\r\nws.close(); //if I call ws.close(1000) instead, everything works fine\r\n```\r\nThe code that tries to read an error code and causes a panic is here: https://github.com/actix/actix-web/blob/v0.5.4/src/ws/mod.rs#L313\r\n\r\nI see the exact same behavior in Chrome and Firefox. If I provide a status code to the `close()` method such as 1000, everything seems to work fine.\r\n\r\nI am running actix-web `v0.5.4`\r\n\r\nRelevant RFC notes (https://tools.ietf.org/html/rfc6455#page-41 section 7.1.5)\r\n```\r\nIf this Close control frame contains no status code, _The WebSocket\r\n   Connection Close Code_ is considered to be 1005.\r\n```\r\n\r\nStacktrace\r\n```\r\nthread 'arbiter:\"b333e870-835c-416a-8d36-1cd189cb731b\":\"actor\"' panicked at 'assertion failed: 1 <= nbytes && nbytes <= 8 && nbytes <= buf.len()', /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs:1858:9\r\nstack backtrace:\r\n   0:     0x5562ec72d18f - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h2fb330a06456ac7e\r\n                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1:     0x5562ec7328d0 - std::sys_common::backtrace::print::hf6ccec7cfd12ed67\r\n                               at libstd/sys_common/backtrace.rs:71\r\n                               at libstd/sys_common/backtrace.rs:59\r\n   2:     0x5562ec71f663 - std::panicking::default_hook::{{closure}}::h464de9af91e4ca8e\r\n                               at libstd/panicking.rs:205\r\n   3:     0x5562ec71f3ed - std::panicking::default_hook::hcde1a6167c711c5f\r\n                               at libstd/panicking.rs:221\r\n   4:     0x5562ec71fbea - std::panicking::rust_panic_with_hook::h8dcdd9a7e80a2917\r\n                               at libstd/panicking.rs:457\r\n   5:     0x5562ec6e04c7 - std::panicking::begin_panic::h657bd638087f2a51\r\n                               at /checkout/src/libstd/panicking.rs:391\r\n   6:     0x5562ec06b7bd - <byteorder::BigEndian as byteorder::ByteOrder>::read_uint::hc4d82996b5920a0a\r\n                               at /home/nathan/repos/athena/server/<panic macros>:3\r\n   7:     0x5562ec0dc601 - <actix_web::ws::WsStream<S> as futures::stream::Stream>::poll::h1bfaa5931f2c1be7\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.5.4/src/ws/mod.rs:313\r\n   8:     0x5562ec13ca34 - <actix::stream::ActorStream<A, M, E, S> as actix::fut::ActorFuture>::poll::h12a83978e9c671e7\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.5.6/src/stream.rs:140\r\n   9:     0x5562ec0b7394 - <alloc::boxed::Box<F> as actix::fut::ActorFuture>::poll::heefe305914f9026f\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.5.6/src/fut/mod.rs:275\r\n  10:     0x5562ec097d5a - <actix::contextimpl::ContextImpl<A>>::poll::hdb936d20ac7d4c9f\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.5.6/src/contextimpl.rs:300\r\n  11:     0x5562ec0c4d76 - <actix_web::ws::context::WebsocketContext<A, S> as actix_web::context::ActorHttpContext>::poll::hf481945d9b3d87cb\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.5.4/src/ws/context.rs:230\r\n  12:     0x5562ec0edead - <actix_web::pipeline::ProcessResponse<S, H>>::poll_io::hc893dbfcfb40d262\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.5.4/src/pipeline.rs:560\r\n  13:     0x5562ec0e84a4 - <actix_web::pipeline::Pipeline<S, H> as actix_web::server::HttpHandlerTask>::poll_io::hb17759a43576fde6\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.5.4/src/pipeline.rs:168\r\n  14:     0x5562ec0376e4 - <actix_web::server::h1::Http1<T, H>>::poll_io::heffa1d17ebc130e9\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.5.4/src/server/h1.rs:230\r\n  15:     0x5562ec0365ca - <actix_web::server::h1::Http1<T, H>>::poll::h7ba69f02ae51904c\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.5.4/src/server/h1.rs:123\r\n  16:     0x5562ec0c5f73 - <actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll::h955e5572b4c4f566\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-0.5.4/src/server/channel.rs:111\r\n  17:     0x5562ec3cc7b4 - <alloc::boxed::Box<F> as futures::future::Future>::poll::hf08db0d1ef793131\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/future/mod.rs:113\r\n  18:     0x5562ec3cb8c4 - <futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}::hd3270683949965f5\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:289\r\n  19:     0x5562ec3cbdaa - <futures::task_impl::Spawn<T>>::enter::{{closure}}::had626c5b5de981d1\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:363\r\n  20:     0x5562ec3d1ba8 - futures::task_impl::std::set::h6dd896a31c54ca44\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/std/mod.rs:78\r\n  21:     0x5562ec3cbaca - <futures::task_impl::Spawn<T>>::enter::h25bf01acf2a11dd6\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:363\r\n  22:     0x5562ec3cb7a9 - <futures::task_impl::Spawn<T>>::poll_future_notify::h56e8c26c8b4901e1\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:289\r\n  23:     0x5562ec3c76e3 - <tokio::executor::current_thread::scheduler::Scheduled<'a, U>>::tick::h6dd128980d7ba529\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/scheduler.rs:343\r\n  24:     0x5562ec3c74ec - <tokio::executor::current_thread::scheduler::Scheduler<U>>::tick::{{closure}}::h2cc1e2458cfbdf43\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/scheduler.rs:323\r\n  25:     0x5562ec3bf8dc - <tokio::executor::current_thread::Borrow<'a, U>>::enter::{{closure}}::{{closure}}::hba0b4e24dc97b874\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/mod.rs:657\r\n  26:     0x5562ec3bf30f - tokio::executor::current_thread::CurrentRunner::set_spawn::hb2d59aec2bdcd254\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/mod.rs:689\r\n  27:     0x5562ec3bf7ec - <tokio::executor::current_thread::Borrow<'a, U>>::enter::{{closure}}::h1c4ddd6fc6e7b329\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/mod.rs:656\r\n  28:     0x5562ec3bd341 - <std::thread::local::LocalKey<T>>::try_with::h3b7065649e239449\r\n                               at /checkout/src/libstd/thread/local.rs:294\r\n  29:     0x5562ec3bcb84 - <std::thread::local::LocalKey<T>>::with::h3f76dec9d9fd7252\r\n                               at /checkout/src/libstd/thread/local.rs:248\r\n  30:     0x5562ec3bf78a - <tokio::executor::current_thread::Borrow<'a, U>>::enter::hc898a990dfecb547\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/mod.rs:655\r\n  31:     0x5562ec3c73df - <tokio::executor::current_thread::scheduler::Scheduler<U>>::tick::hd53149ed9baa4d28\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/scheduler.rs:323\r\n  32:     0x5562ec3bf9bd - <tokio::executor::current_thread::Entered<'a, P>>::tick::hbfb92e9e7fdf18bb\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/mod.rs:541\r\n  33:     0x5562ec3bfaa6 - <tokio::executor::current_thread::Entered<'a, P>>::turn::h864f82a7636591b5\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/executor/current_thread/mod.rs:493\r\n  34:     0x5562ec3c3445 - tokio_core::reactor::Core::poll::{{closure}}::{{closure}}::{{closure}}::{{closure}}::he3607acfb125f735\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:298\r\n  35:     0x5562ec3b8adf - <scoped_tls::ScopedKey<T>>::set::h5264992d8e100b2b\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.1/src/lib.rs:155\r\n  36:     0x5562ec3c3881 - tokio_core::reactor::Core::poll::{{closure}}::{{closure}}::{{closure}}::h066a0b1df5e29f50\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:297\r\n  37:     0x5562ec3c99a8 - tokio_timer::timer::handle::with_default::{{closure}}::haba1e39a5b5895c1\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-timer-0.2.1/src/timer/handle.rs:64\r\n  38:     0x5562ec3bcf69 - <std::thread::local::LocalKey<T>>::try_with::h31aedc8adfdd53b6\r\n                               at /checkout/src/libstd/thread/local.rs:294\r\n  39:     0x5562ec3bcd5a - <std::thread::local::LocalKey<T>>::with::hbed63daacbb213ce\r\n                               at /checkout/src/libstd/thread/local.rs:248\r\n  40:     0x5562ec3c9867 - tokio_timer::timer::handle::with_default::h8340bc671b311dbe\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-timer-0.2.1/src/timer/handle.rs:56\r\n  41:     0x5562ec3c4169 - tokio_core::reactor::Core::poll::{{closure}}::{{closure}}::h46e132fe1e1456d5\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:275\r\n  42:     0x5562ec3c790c - tokio_executor::global::with_default::{{closure}}::hf1a7546efa7089ab\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.2/src/global.rs:176\r\n  43:     0x5562ec3bd760 - <std::thread::local::LocalKey<T>>::try_with::h4ec12def4e4ada3e\r\n                               at /checkout/src/libstd/thread/local.rs:294\r\n  44:     0x5562ec3bcb3a - <std::thread::local::LocalKey<T>>::with::h03bc055913c5a571\r\n                               at /checkout/src/libstd/thread/local.rs:248\r\n  45:     0x5562ec3c77c4 - tokio_executor::global::with_default::hb0ceda9b4632bb83\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.2/src/global.rs:150\r\n  46:     0x5562ec3c41b0 - tokio_core::reactor::Core::poll::{{closure}}::h029620064264082c\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:274\r\n  47:     0x5562ec3c9c2c - tokio_reactor::with_default::{{closure}}::hd105cea23c9bf3e8\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.1/src/lib.rs:207\r\n  48:     0x5562ec3bdd70 - <std::thread::local::LocalKey<T>>::try_with::h9d30eaaa56b1cbc1\r\n                               at /checkout/src/libstd/thread/local.rs:294\r\n  49:     0x5562ec3bcc9a - <std::thread::local::LocalKey<T>>::with::h8399193f3b483246\r\n                               at /checkout/src/libstd/thread/local.rs:248\r\n  50:     0x5562ec3c9ac1 - tokio_reactor::with_default::h096e034e08bcbdae\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.1/src/lib.rs:199\r\n  51:     0x5562ec3c3282 - tokio_core::reactor::Core::poll::h3095c4ecc729710d\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:273\r\n  52:     0x5562ec23e1f3 - tokio_core::reactor::Core::run::h3865aef3c0877408\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.17/src/reactor/mod.rs:248\r\n  53:     0x5562ec010559 - actix::arbiter::Arbiter::new::{{closure}}::hf1b43519e59c834e\r\n                               at /home/nathan/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.5.6/src/arbiter.rs:95\r\n  54:     0x5562ec1410d4 - std::sys_common::backtrace::__rust_begin_short_backtrace::h3e09f5a8e49b591b\r\n                               at /checkout/src/libstd/sys_common/backtrace.rs:136\r\n  55:     0x5562ec01da0b - std::thread::Builder::spawn::{{closure}}::{{closure}}::h40e040e044c55f46\r\n                               at /checkout/src/libstd/thread/mod.rs:409\r\n  56:     0x5562ec0e6874 - <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once::h003f6c4621d2303b\r\n                               at /checkout/src/libstd/panic.rs:296\r\n  57:     0x5562ec08fa54 - std::panicking::try::do_call::hf7b905cb3ff44116\r\n                               at /checkout/src/libstd/panicking.rs:304\r\n  58:     0x5562ec739a1e - __rust_maybe_catch_panic\r\n                               at libpanic_unwind/lib.rs:105\r\n  59:     0x5562ec08f709 - std::panicking::try::h0d7f12416d848691\r\n                               at /checkout/src/libstd/panicking.rs:283\r\n  60:     0x5562ec0e6984 - std::panic::catch_unwind::hfe29caf10e72aca7\r\n                               at /checkout/src/libstd/panic.rs:361\r\n  61:     0x5562ec01d7c8 - std::thread::Builder::spawn::{{closure}}::h994ee66de05cf000\r\n                               at /checkout/src/libstd/thread/mod.rs:408\r\n  62:     0x5562ec01daf5 - <F as alloc::boxed::FnBox<A>>::call_box::hc7ed55469dd70704\r\n                               at /checkout/src/liballoc/boxed.rs:637\r\n  63:     0x5562ec72e8e7 - std::sys_common::thread::start_thread::h4a77c2e692e25ce6\r\n                               at /checkout/src/liballoc/boxed.rs:647\r\n                               at libstd/sys_common/thread.rs:24\r\n  64:     0x5562ec720128 - std::sys::unix::thread::Thread::new::thread_start::h5c4ff67e1691aab6\r\n                               at libstd/sys/unix/thread.rs:90\r\n  65:     0x7f9dd2cd57fb - start_thread\r\n  66:     0x7f9dd27ebb5e - clone\r\n  67:                0x0 - <unknown>\r\n\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/190","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/190/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/190/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/190/events","html_url":"https://github.com/actix/actix-web/issues/190","id":316363436,"number":190,"title":"Except/Continue support","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-20T18:13:16Z","updated_at":"2018-04-21T00:43:44Z","closed_at":"2018-04-21T00:43:44Z","author_association":"OWNER","body":"","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/188","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/188/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/188/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/188/events","html_url":"https://github.com/actix/actix-web/issues/188","id":315854912,"number":188,"title":"InternalError uses Debug formatting for Display implementation","user":{"login":"mitskevich","id":1643475,"avatar_url":"https://avatars0.githubusercontent.com/u/1643475?v=4","gravatar_id":"","url":"https://api.github.com/users/mitskevich","html_url":"https://github.com/mitskevich","followers_url":"https://api.github.com/users/mitskevich/followers","following_url":"https://api.github.com/users/mitskevich/following{/other_user}","gists_url":"https://api.github.com/users/mitskevich/gists{/gist_id}","starred_url":"https://api.github.com/users/mitskevich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitskevich/subscriptions","organizations_url":"https://api.github.com/users/mitskevich/orgs","repos_url":"https://api.github.com/users/mitskevich/repos","events_url":"https://api.github.com/users/mitskevich/events{/privacy}","received_events_url":"https://api.github.com/users/mitskevich/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-04-19T12:27:37Z","updated_at":"2018-04-19T16:41:45Z","closed_at":"2018-04-19T14:56:01Z","author_association":"NONE","body":"InternalError uses Debug formatting for Display implementation:\r\n\r\nhttps://github.com/actix/actix-web/blob/813d1d6e6653308cf97c88b78fa6395b5981622a/src/error.rs#L599-L606\r\n\r\nIs this intentional? Wouldn't it be better to use Display trait and just require `Display` implementation on `T`?\r\n\r\nCurrently, I'm trying to display user-friendly error messages for 4xx statuses in my JSON API based on actix-web. Errors are returned by handler functions (with `ErrorBadRequest` and similar functions) and it seems that they are being stored in `HttpResponse` as `InternalError`. When I try to format errors for output, I get debug formatting and it seems there is no way to properly format them as user-friendly messages.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/187","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/187/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/187/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/187/events","html_url":"https://github.com/actix/actix-web/issues/187","id":315598456,"number":187,"title":"Middleware response() is not invoked if there was an error in async handler","user":{"login":"mitskevich","id":1643475,"avatar_url":"https://avatars0.githubusercontent.com/u/1643475?v=4","gravatar_id":"","url":"https://api.github.com/users/mitskevich","html_url":"https://github.com/mitskevich","followers_url":"https://api.github.com/users/mitskevich/followers","following_url":"https://api.github.com/users/mitskevich/following{/other_user}","gists_url":"https://api.github.com/users/mitskevich/gists{/gist_id}","starred_url":"https://api.github.com/users/mitskevich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitskevich/subscriptions","organizations_url":"https://api.github.com/users/mitskevich/orgs","repos_url":"https://api.github.com/users/mitskevich/repos","events_url":"https://api.github.com/users/mitskevich/events{/privacy}","received_events_url":"https://api.github.com/users/mitskevich/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-18T18:46:41Z","updated_at":"2018-04-18T21:23:00Z","closed_at":"2018-04-18T21:16:48Z","author_association":"NONE","body":"First of all, thank you very much for this great library. I've just started to learn how to use it, but I already love it! During my experiments I've found this strange quirk, I'm not sure if it is an actual issue, or something that I'm misunderstanding.\r\n\r\nIt seems, that `actix-web` doesn't call middleware's `response()` method if there was an error in the async handler.\r\n\r\nExample:\r\n\r\n```rust\r\nextern crate actix_web;\r\nextern crate futures;\r\n\r\nuse actix_web as aw;\r\nuse futures::Future;\r\nuse futures::future;\r\nuse actix_web::AsyncResponder;\r\n\r\nfn index_result(_req: aw::HttpRequest) -> aw::Result<String> {\r\n    Err(aw::error::ErrorBadRequest(\"test\"))\r\n}\r\n\r\nfn index_fut(_req: aw::HttpRequest) -> Box<Future<Item=String, Error=aw::Error>> {\r\n    future::result(Err(aw::error::ErrorBadRequest(\"test\"))).responder()\r\n}\r\n\r\nstruct SomeMiddleware;\r\n\r\nimpl<S> aw::middleware::Middleware<S> for SomeMiddleware {\r\n    fn start(&self, _req: &mut aw::HttpRequest<S>) -> aw::Result<aw::middleware::Started> {\r\n        println!(\"middleware started\");\r\n        Ok(aw::middleware::Started::Done)\r\n    }\r\n\r\n    fn response(\r\n        &self,\r\n        _req: &mut aw::HttpRequest<S>,\r\n        resp: aw::HttpResponse\r\n    ) -> aw::Result<aw::middleware::Response> {\r\n        println!(\"middleware response\");\r\n        Ok(aw::middleware::Response::Done(resp))\r\n    }\r\n}\r\n\r\nfn main() {\r\n    aw::server::new(\r\n        
6a1e
|| aw::App::new()\r\n            .middleware(SomeMiddleware)\r\n            .resource(\"/res/\", |r| r.f(index_result))\r\n            .resource(\"/fut/\", |r| r.f(index_fut)))\r\n        .bind(\"127.0.0.1:8088\").expect(\"Can not bind to 127.0.0.1:8088\")\r\n        .run();\r\n}\r\n```\r\n\r\nAfter starting this server, I run the following `curl` command:\r\n\r\n```bash\r\ncurl -i localhost:8088/fut/\r\n```\r\n\r\nI expect to see this in server's stdout:\r\n\r\n```\r\nmiddleware started\r\nmiddleware response\r\n```\r\n\r\nBut instead, only first line is displayed.\r\n\r\n```\r\nmiddleware started\r\n```\r\n\r\nCuriously, when I invoke handler that uses `Result` as return type, I get the expected output (both lines).\r\n\r\n```bash\r\ncurl -i localhost:8088/res/\r\n```\r\n\r\nI have tested this on `0.5.2` and `master` branch.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/186","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/186/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/186/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/186/events","html_url":"https://github.com/actix/actix-web/issues/186","id":315501410,"number":186,"title":"EventSource / Server Sent Events (SSE) support","user":{"login":"greglearns","id":4944698,"avatar_url":"https://avatars2.githubusercontent.com/u/4944698?v=4","gravatar_id":"","url":"https://api.github.com/users/greglearns","html_url":"https://github.com/greglearns","followers_url":"https://api.github.com/users/greglearns/followers","following_url":"https://api.github.com/users/greglearns/following{/other_user}","gists_url":"https://api.github.com/users/greglearns/gists{/gist_id}","starred_url":"https://api.github.com/users/greglearns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/greglearns/subscriptions","organizations_url":"https://api.github.com/users/greglearns/orgs","repos_url":"https://api.github.com/users/greglearns/repos","events_url":"https://api.github.com/users/greglearns/events{/privacy}","received_events_url":"https://api.github.com/users/greglearns/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-18T14:21:10Z","updated_at":"2018-04-18T16:56:32Z","closed_at":"2018-04-18T16:56:32Z","author_association":"NONE","body":"Can actix-web support SSE / server-sent events / event source?","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/183","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/183/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/183/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/183/events","html_url":"https://github.com/actix/actix-web/issues/183","id":315019503,"number":183,"title":"Description of state is ambiguous","user":{"login":"spease","id":2825204,"avatar_url":"https://avatars1.githubusercontent.com/u/2825204?v=4","gravatar_id":"","url":"https://api.github.com/users/spease","html_url":"https://github.com/spease","followers_url":"https://api.github.com/users/spease/followers","following_url":"https://api.github.com/users/spease/following{/other_user}","gists_url":"https://api.github.com/users/spease/gists{/gist_id}","starred_url":"https://api.github.com/users/spease/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spease/subscriptions","organizations_url":"https://api.github.com/users/spease/orgs","repos_url":"https://api.github.com/users/spease/repos","events_url":"https://api.github.com/users/spease/events{/privacy}","received_events_url":"https://api.github.com/users/spease/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-17T11:33:17Z","updated_at":"2018-04-17T21:13:41Z","closed_at":"2018-04-17T21:00:24Z","author_association":"NONE","body":"The documentation says that state is shared between resources, but experimentation shows that it isn't shared between threads. It would be good to note this somewhere.\n\n<sub>Sent with <a href=\"http://githawk.com\">GitHawk</a></sub>","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/182","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/182/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/182/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/182/events","html_url":"https://github.com/actix/actix-web/issues/182","id":314840170,"number":182,"title":"Impossible to quote slashes in path parameters","user":{"login":"jannic","id":232606,"avatar_url":"https://avatars0.githubusercontent.com/u/232606?v=4","gravatar_id":"","url":"https://api.github.com/users/jannic","html_url":"https://github.com/jannic","followers_url":"https://api.github.com/users/jannic/followers","following_url":"https://api.github.com/users/jannic/following{/other_user}","gists_url":"https://api.github.com/users/jannic/gists{/gist_id}","starred_url":"https://api.github.com/users/jannic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jannic/subscriptions","organizations_url":"https://api.github.com/users/jannic/orgs","repos_url":"https://api.github.com/users/jannic/repos","events_url":"https://api.github.com/users/jannic/events{/privacy}","received_events_url":"https://api.github.com/users/jannic/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-16T22:26:41Z","updated_at":"2018-04-17T19:56:02Z","closed_at":"2018-04-17T19:56:01Z","author_association":"CONTRIBUTOR","body":"I failed to use a pattern like `route(\"/some/path/{url}\"` where url should match a percent-encoded URL like in `http://127.0.0.1:8080/some/path/http%3A%2F%2Fexample.com`\r\nThis fails because the %-encoding is decoded before the pattern is matched, so `%2f` gets expanded to `/` and the pattern doesn't match any more.\r\nIMHO the fix to https://github.com/actix/actix-web/issues/137 in commit https://github.com/actix/actix-web/commit/90e3aaaf8a6585d17423f71ac70ba4476ab57c5b is wrong or incomplete.\r\nI understand it's desirable to be able to directly match on decoded utf-8 characters, but if the decoding is done unconditionally, it makes other use cases like the one mentioned above impossible.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/181","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/181/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/181/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/181/events","html_url":"https://github.com/actix/actix-web/issues/181","id":314279511,"number":181,"title":"Support custom handling of extractor errors","user":{"login":"connec","id":160652,"avatar_url":"https://avatars2.githubusercontent.com/u/160652?v=4","gravatar_id":"","url":"https://api.github.com/users/connec","html_url":"https://github.com/connec","followers_url":"https://api.github.com/users/connec/followers","following_url":"https://api.github.com/users/connec/following{/other_user}","gists_url":"https://api.github.com/users/connec/gists{/gist_id}","starred_url":"https://api.github.com/users/connec/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/connec/subscriptions","organizations_url":"https://api.github.com/users/connec/orgs","repos_url":"https://api.github.com/users/connec/repos","events_url":"https://api.github.com/users/connec/events{/privacy}","received_events_url":"https://api.github.com/users/connec/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-13T23:50:28Z","updated_at":"2018-04-14T11:29:28Z","closed_at":"2018-04-14T02:32:25Z","author_association":"NONE","body":"Example:\r\n\r\n```rust\r\nfn main() {\r\n    ...\r\n    App::new().resource(\"/items\", |r| r.with(create_item))\r\n    ...\r\n}\r\n\r\n#[derive(Deserialize)]\r\nstruct Item {\r\n    ...\r\n}\r\n\r\nfn create_item(item: Json<Item>) -> HttpResponse {\r\n    ...\r\n}\r\n```\r\n\r\nCurrently, if there is a deserialization error when attempting to extract an `Item` (e.g. because the JSON payload has missing fields, or is the wrong type) an empty HTTP 400 Bad Request response will be returned due to the impl of [`ResponseError for DeError`](https://github.com/actix/actix-web/blob/master/src/error.rs#L122).\r\n\r\nWhilst this is sufficient for experimental or internal APIs, it would be useful to be able to customise or override how errors are handled. For myself, I wanted to include the text of the serialization error in the response body so consumers can debug their bad requests.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/180","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/180/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/180/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/180/events","html_url":"https://github.com/actix/actix-web/issues/180","id":314256855,"number":180,"title":"MovedPermanenty -> MovedPermanently","user":{"login":"Unmoving","id":16563063,"avatar_url":"https://avatars0.githubusercontent.com/u/16563063?v=4","gravatar_id":"","url":"https://api.github.com/users/Unmoving","html_url":"https://github.com/Unmoving","followers_url":"https://api.github.com/users/Unmoving/followers","following_url":"https://api.github.com/users/Unmoving/following{/other_user}","gists_url":"https://api.github.com/users/Unmoving/gists{/gist_id}","starred_url":"https://api.github.com/users/Unmoving/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Unmoving/subscriptions","organizations_url":"https://api.github.com/users/Unmoving/orgs","repos_url":"https://api.github.com/users/Unmoving/repos","events_url":"https://api.github.com/users/Unmoving/events{/privacy}","received_events_url":"https://api.github.com/users/Unmoving/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-13T21:33:04Z","updated_at":"2018-04-13T21:36:24Z","closed_at":"2018-04-13T21:36:24Z","author_association":"NONE","body":"https://github.com/actix/actix-web/blob/22c776f46ea169a29d5a34572d71a966db25044b/src/httpcodes.rs#L205\r\n\r\nThere is a typo in there:\r\n\r\n `STATIC_RESP!(MovedPermanenty, StatusCode::MOVED_PERMANENTLY);`\r\n\r\nShould be `MovedPermanently` (MovedPermanent**l**y)","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/179","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/179/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/179/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/179/events","html_url":"https://github.com/actix/actix-web/issues/179","id":314255945,"number":179,"title":".with(json) always returning 404","user":{"login":"Unmoving","id":16563063,"avatar_url":"https://avatars0.githubusercontent.com/u/16563063?v=4","gravatar_id":"","url":"https://api.github.com/users/Unmoving","html_url":"https://github.com/Unmoving","followers_url":"https://api.github.com/users/Unmoving/followers","following_url":"https://api.github.com/users/Unmoving/following{/other_user}","gists_url":"https://api.github.com/users/Unmoving/gists{/gist_id}","starred_url":"https://api.github.com/users/Unmoving/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Unmoving/subscriptions","organizations_url":"https://api.github.com/users/Unmoving/orgs","repos_url":"https://api.github.com/users/Unmoving/repos","events_url":"https://api.github.com/users/Unmoving/events{/privacy}","received_events_url":"https://api.github.com/users/Unmoving/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-13T21:29:28Z","updated_at":"2018-04-13T21:48:27Z","closed_at":"2018-04-13T21:41:01Z","author_association":"NONE","body":"Trying out the minimal example from `0.5`, just slightly adapted:\r\n\r\n```\r\n#[macro_use]\r\nextern crate lazy_static;\r\nextern crate regex;\r\n#[macro_use]\r\nextern crate slog;\r\nextern crate slog_term;\r\n\r\nextern crate actix;\r\nextern crate actix_web;\r\nextern crate http;\r\nextern crate bincode;\r\nextern crate serde_json;\r\n\r\nextern crate futures;\r\nextern crate diesel;\r\n\r\nuse actix_web::{\r\n   Json,\r\n   Result,\r\n   dev::Handler,\r\n};\r\n\r\nfn main() -> () {\r\n    actix_web::server::new(|| actix_web::App::new().resource(\r\n      \"/api/json\",\r\n      |r| r.method(actix_web::http::Method::POST).with(json))\r\n   ).bind(\"localhost:8000\").expect(\"Cannot bind to localhost:8000\")\r\n       .run();\r\n}\r\n\r\nfn json(req: Json<serde_json::Value>) -> Result<String> {\r\n   println!(\"Here\");\r\n   Ok(format! {\"Request received\"})\r\n}\r\n```\r\n\r\nNo matter which json I send to `localhost:8000/api/json` I always get a \r\n> 400 Bad Request\r\n\r\nand **no** \"Here\" printed on the std::out :(\r\n\r\nWhat am I doing wrong?\r\n\r\n[dependencies] of `Cargo.toml`:\r\n```\r\ndotenv = \"0.10\"\r\nregex = \"0.2\"\r\nbincode = \"^1.0\"\r\n\r\nlazy_static = \"1.0.0\"\r\nserde = \"^1.0\"\r\nserde_derive = \"^1.0\"\r\nserde_json = \"^1.0\"\r\n\r\nslog = \"2.1\"\r\nslog-term = \"2.3\"\r\n\r\nactix = \"^0.5\"\r\nactix-web = \"^0.5\"\r\nhttp = \"^0.1.4\"\r\nfutures = \"0.1.17\"\r\n\r\ndiesel = { version = \"1.1\", features = [\"sqlite\"] }\r\n```","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/177","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/177/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/177/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/177/events","html_url":"https://github.com/actix/actix-web/issues/177","id":313961455,"number":177,"title":"StaticFiles unable to find files in folder with whitespace in its name","user":{"login":"limira","id":20672976,"avatar_url":"https://avatars3.githubusercontent.com/u/20672976?v=4","gravatar_id":"","url":"https://api.github.com/users/limira","html_url":"https://github.com/limira","followers_url":"https://api.github.com/users/limira/followers","following_url":"https://api.github.com/users/limira/following{/other_user}","gists_url":"https://api.github.com/users/limira/gists{/gist_id}","starred_url":"https://api.github.com/users/limira/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/limira/subscriptions","organizations_url":"https://api.github.com/users/limira/orgs","repos_url":"https://api.github.com/users/limira/repos","events_url":"https://api.github.com/users/limira/events{/privacy}","received_events_url":"https://api.github.com/users/limira/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-13T03:57:03Z","updated_at":"2018-04-13T17:13:47Z","closed_at":"2018-04-13T17:13:47Z","author_association":"NONE","body":"Actix-web version: 0.5.0\r\n\r\nThis is an extract from log:\r\n\r\n    \"GET /glyphs/Open%20Sans%20Regular/256-511.pbf HTTP/1.1\" 404 0 \"http://localhost:3000/\"\r\n    ...\r\n    ... Error occured during request handling: No such file or directory\r\n\r\nI double-checked that the required folder/file exists (of course, it has whitespace instead of %20). Other files in non-whitespace-folder have been served successfully.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/176","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/176/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/176/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/176/events","html_url":"https://github.com/actix/actix-web/issues/176","id":313931232,"number":176,"title":"Client Request with custom Body Stream halting on certain size requests","user":{"login":"cetra3","id":6415435,"avatar_url":"https://avatars0.githubusercontent.com/u/6415435?v=4","gravatar_id":"","url":"https://api.github.com/users/cetra3","html_url":"https://github.com/cetra3","followers_url":"https://api.github.com/users/cetra3/followers","following_url":"https://api.github.com/users/cetra3/following{/other_user}","gists_url":"https://api.github.com/users/cetra3/gists{/gist_id}","starred_url":"https://api.github.com/users/cetra3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cetra3/subscriptions","organizations_url":"https://api.github.com/users/cetra3/orgs","repos_url":"https://api.github.com/users/cetra3/repos","events_url":"https://api.github.com/users/cetra3/events{/privacy}","received_events_url":"https://api.github.com/users/cetra3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"assignees":[{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2018-04-13T00:30:43Z","updated_at":"2018-04-16T16:04:58Z","closed_at":"2018-04-16T16:04:58Z","author_association":"NONE","body":"I can probably take time to reduce this issue to something, but there might be something [obvious](https://github.com/actix/actix-web/issues/129) that may stick out.\r\n\r\nI have created a handler that accepts a binary PUT, decorates the binary info (in this case turn it into a multipart request with the binary and a few extra values) and submits this to a backend service.  The multipart request is a custom stream, that returns Bytes when you poll it.\r\n\r\nThis works fine if:\r\n\r\n* The binary size is below ~130kb\r\n* The binary size is above ~265kb\r\n\r\nIf the binary size is within that range (130kb - 265kb) then the following happens:\r\n\r\n* The Submission from the client to actix web is written on the wire\r\n* The Stream (from debug logs) is completed\r\n* The Client Request writes out to the backend connection roughly ~130kb and halts.\r\n* The request never completes, the backend service gets annoyed and closes the connection after its timeout.\r\n\r\nI can't see anything in the debug logs from the actix side of things which indicates where it's up to, or what it's getting stuck on.  I also have tried various binary sizes, or various binary formats  (I've just been generating purely random binary files to test).\r\n\r\nThe custom Stream will create variable Bytes length depending on where it's up to.  So sometimes it will return 140 bytes, sometimes it will return 32kb.\r\n\r\nI am wondering if this has some relation to the `MAX_BUFFER_SIZE` and the maths around computing what is left.","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/175","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/175/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/175/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/175/events","html_url":"https://github.com/actix/actix-web/issues/175","id":313924234,"number":175,"title":"crate a new Examples repo","user":{"login":"krircc","id":18028295,"avatar_url":"https://avatars0.githubusercontent.com/u/18028295?v=4","gravatar_id":"","url":"https://api.github.com/users/krircc","html_url":"https://github.com/krircc","followers_url":"https://api.github.com/users/krircc/followers","following_url":"https://api.github.com/users/krircc/following{/other_user}","gists_url":"https://api.github.com/users/krircc/gists{/gist_id}","starred_url":"https://api.github.com/users/krircc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krircc/subscriptions","organizations_url":"https://api.github.com/users/krircc/orgs","repos_url":"https://api.github.com/users/krircc/repos","events_url":"https://api.github.com/users/krircc/events{/privacy}","received_events_url":"https://api.github.com/users/krircc/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2018-04-12T23:46:50Z","updated_at":"2018-04-13T05:21:11Z","closed_at":"2018-04-13T00:11:10Z","author_association":"CONTRIBUTOR","body":"I think something should change, after i update [Rust-webapp-starter](https://github.com/OUISRC/Rust-webapp-starter) to actix-web V0.5, It's more easier now, it's time for people to try it widely.\r\n\r\nnow examples at actix-web is good for maintenance than users, it dep on master not release and change everytime. after  actix-web V0.5, I think we should move things from master to release. It should be more stable for people to try it. we should recommend people use release everywhere(repo, office..etc).  \r\n\r\nalso It's more easier for PRs","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/174","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/174/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/174/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/174/events","html_url":"https://github.com/actix/actix-web/issues/174","id":313845755,"number":174,"title":"StaticFiles generate a lot of threads","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-12T18:51:05Z","updated_at":"2018-04-12T22:50:55Z","closed_at":"2018-04-12T22:50:55Z","author_association":"OWNER","body":"StaticFiles generate a lot of threads, especially combined with the fact that application\r\nfactory get called for each worker thread, this generate a lot of threads","score":1.0},{"url":"https://api.github.com/repos/actix/actix-web/issues/172","repository_url":"https://api.github.com/repos/actix/actix-web","labels_url":"https://api.github.com/repos/actix/actix-web/issues/172/labels{/name}","comments_url":"https://api.github.com/repos/actix/actix-web/issues/172/comments","events_url":"https://api.github.com/repos/actix/actix-web/issues/172/events","html_url":"https://github.com/actix/actix-web/issues/172","id":313577190,"number":172,"title":"Add Contet-Disposition header support to NamedFile","user":{"login":"fafhrd91","id":598990,"avatar_url":"https://avatars2.githubusercontent.com/u/598990?v=4","gravatar_id":"","url":"https://api.github.com/users/fafhrd91","html_url":"https://github.com/fafhrd91","followers_url":"https://api.github.com/users/fafhrd91/followers","following_url":"https://api.github.com/users/fafhrd91/following{/other_user}","gists_url":"https://api.github.com/users/fafhrd91/gists{/gist_id}","starred_url":"https://api.github.com/users/fafhrd91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fafhrd91/subscriptions","organizations_url":"https://api.github.com/users/fafhrd91/orgs","repos_url":"https://api.github.com/users/fafhrd91/repos","events_url":"https://api.github.com/users/fafhrd91/events{/privacy}","received_events_url":"https://api.github.com/users/fafhrd91/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-12T04:57:26Z","updated_at":"2018-04-29T15:18:49Z","closed_at":"2018-04-29T15:18:49Z","author_association":"OWNER","body":"At the moment responder implementation does not add content-disposition header to a NamedFile response","score":1.0}]}
0

