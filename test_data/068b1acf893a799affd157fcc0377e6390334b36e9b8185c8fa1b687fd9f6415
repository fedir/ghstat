HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 31 Mar 2018 23:45:12 GMT
Link: <https://api.github.com/search/issues?q=repo%3Aweavejester%2Fcompojure+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Aweavejester%2Fcompojure+type%3Aissue+state%3Aclosed&page=5>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: D985:094F:2EED5A1:59AF37C:5AC01D88
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 29
X-Ratelimit-Reset: 1522539972
X-Runtime-Rack: 0.271632
X-Xss-Protection: 1; mode=block

8000
{"total_count":132,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/weavejester/compojure/issues/181","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/181/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/181/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/181/events","html_url":"https://github.com/weavejester/compojure/issues/181","id":299239766,"number":181,"title":"HEAD requests assume the response is a `clojure.lang.Associative`","user":{"login":"richardcordova","id":36714862,"avatar_url":"https://avatars1.githubusercontent.com/u/36714862?v=4","gravatar_id":"","url":"https://api.github.com/users/richardcordova","html_url":"https://github.com/richardcordova","followers_url":"https://api.github.com/users/richardcordova/followers","following_url":"https://api.github.com/users/richardcordova/following{/other_user}","gists_url":"https://api.github.com/users/richardcordova/gists{/gist_id}","starred_url":"https://api.github.com/users/richardcordova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/richardcordova/subscriptions","organizations_url":"https://api.github.com/users/richardcordova/orgs","repos_url":"https://api.github.com/users/richardcordova/repos","events_url":"https://api.github.com/users/richardcordova/events{/privacy}","received_events_url":"https://api.github.com/users/richardcordova/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-02-22T06:46:24Z","updated_at":"2018-02-24T22:47:34Z","closed_at":"2018-02-24T22:47:34Z","author_association":"NONE","body":"Most of the routing logic is agnostic as to the form of the response. This has allowed me to pass around a channel as the response, which works well in almost all cases.\r\n\r\nHEAD requests are an exception to this as seen in https://github.com/weavejester/compojure/blob/master/src/compojure/core.clj#L33\r\n\r\nCould this restriction be relaxed while preserving the existing semantics?","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/176","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/176/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/176/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/176/events","html_url":"https://github.com/weavejester/compojure/issues/176","id":273544105,"number":176,"title":"Embed a Java servlet in a Ring/Compojure app","user":{"login":"MichaelBlume","id":208853,"avatar_url":"https://avatars3.githubusercontent.com/u/208853?v=4","gravatar_id":"","url":"https://api.github.com/users/MichaelBlume","html_url":"https://github.com/MichaelBlume","followers_url":"https://api.github.com/users/MichaelBlume/followers","following_url":"https://api.github.com/users/MichaelBlume/following{/other_user}","gists_url":"https://api.github.com/users/MichaelBlume/gists{/gist_id}","starred_url":"https://api.github.com/users/MichaelBlume/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MichaelBlume/subscriptions","organizations_url":"https://api.github.com/users/MichaelBlume/orgs","repos_url":"https://api.github.com/users/MichaelBlume/repos","events_url":"https://api.github.com/users/MichaelBlume/events{/privacy}","received_events_url":"https://api.github.com/users/MichaelBlume/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-11-13T19:13:02Z","updated_at":"2017-11-19T15:06:06Z","closed_at":"2017-11-19T15:06:06Z","author_association":"NONE","body":"Sometimes a dependency provides an out-of-the-box Servlet object. A good example is the `HystrixMetricsStreamServlet` which exposes metrics to an external hystrix dashboard. Is there a good one-size-fits-all way to embed such a Servlet in a Compojure/Ring app?","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/175","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/175/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/175/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/175/events","html_url":"https://github.com/weavejester/compojure/issues/175","id":272024726,"number":175,"title":"Can't user query parameters without a value","user":{"login":"ElizabethForest","id":6201725,"avatar_url":"https://avatars2.githubusercontent.com/u/6201725?v=4","gravatar_id":"","url":"https://api.github.com/users/ElizabethForest","html_url":"https://github.com/ElizabethForest","followers_url":"https://api.github.com/users/ElizabethForest/followers","following_url":"https://api.github.com/users/ElizabethForest/following{/other_user}","gists_url":"https://api.github.com/users/ElizabethForest/gists{/gist_id}","starred_url":"https://api.github.com/users/ElizabethForest/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ElizabethForest/subscriptions","organizations_url":"https://api.github.com/users/ElizabethForest/orgs","repos_url":"https://api.github.com/users/ElizabethForest/repos","events_url":"https://api.github.com/users/ElizabethForest/events{/privacy}","received_events_url":"https://api.github.com/users/ElizabethForest/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-11-07T23:39:24Z","updated_at":"2017-11-08T00:22:31Z","closed_at":"2017-11-08T00:22:31Z","author_association":"NONE","body":"Hi!\r\n\r\nIn the browser, you are able to do `mywebsite.com?param` and `param` shows up as a query param with an empty string, but when using compojure `param` doesn't show up in `:query-params`.\r\n\r\nDoing `mywebsite.com?param=` gives the query-params of `{:param \"\"}` which is expected, but then if you do `mywebsite.com?param=1&param2` you get `{:param 1, :param2 nil}`.\r\n\r\nIt feels a little inconsistent, and I would like to be able to use `mywebsite.com?param`.\r\n\r\nI am using `1.6.0`.","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/173","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/173/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/173/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/173/events","html_url":"https://github.com/weavejester/compojure/issues/173","id":258737975,"number":173,"title":"How to defined nested routes with `wrap-json-body`","user":{"login":"LukasRychtecky","id":585068,"avatar_url":"https://avatars3.githubusercontent.com/u/585068?v=4","gravatar_id":"","url":"https://api.github.com/users/LukasRychtecky","html_url":"https://github.com/LukasRychtecky","followers_url":"https://api.github.com/users/LukasRychtecky/followers","following_url":"https://api.github.com/users/LukasRychtecky/following{/other_user}","gists_url":"https://api.github.com/users/LukasRychtecky/gists{/gist_id}","starred_url":"https://api.github.com/users/LukasRychtecky/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LukasRychtecky/subscriptions","organizations_url":"https://api.github.com/users/LukasRychtecky/orgs","repos_url":"https://api.github.com/users/LukasRychtecky/repos","events_url":"https://api.github.com/users/LukasRychtecky/events{/privacy}","received_events_url":"https://api.github.com/users/LukasRychtecky/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-09-19T08:33:08Z","updated_at":"2017-09-25T12:34:41Z","closed_at":"2017-09-25T12:34:41Z","author_association":"NONE","body":"Hi, thank you for this library.\r\n\r\nI run into an issue when having more routes wrapped into `wrap-json-body`.\r\n\r\n```clojure\r\n(context \"/transactions\" []\r\n  (wrap-json-body\r\n    (POST \"/\" [:as request]\r\n      ...)))\r\n\r\n(context \"/transactions/:id\" [id]\r\n  (wrap-json-body\r\n    (PUT \"/\" [:as request]\r\n      ...)))\r\n```\r\n\r\nSecond route's body will be `nil`, because of `InputStream` (as it's pointed here https://github.com/weavejester/compojure/wiki/Common-Problems#a-middleware-tries-to-read-the-body-of-a-request-but-finds-it-empty).\r\n\r\nHow can I define these routes?\r\n\r\nThanks for an answer.","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/171","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/171/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/171/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/171/events","html_url":"https://github.com/weavejester/compojure/issues/171","id":242649075,"number":171,"title":"Routes returning asynchronous ring handlers","user":{"login":"sachinpkale","id":2646664,"avatar_url":"https://avatars1.githubusercontent.com/u/2646664?v=4","gravatar_id":"","url":"https://api.github.com/users/sachinpkale","html_url":"https://github.com/sachinpkale","followers_url":"https://api.github.com/users/sachinpkale/followers","following_url":"https://api.github.com/users/sachinpkale/following{/other_user}","gists_url":"https://api.github.com/users/sachinpkale/gists{/gist_id}","starred_url":"https://api.github.com/users/sachinpkale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sachinpkale/subscriptions","organizations_url":"https://api.github.com/users/sachinpkale/orgs","repos_url":"https://api.github.com/users/sachinpkale/repos","events_url":"https://api.github.com/users/sachinpkale/events{/privacy}","received_events_url":"https://api.github.com/users/sachinpkale/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2017-07-13T10:01:32Z","updated_at":"2018-03-27T13:47:08Z","closed_at":"2017-07-13T10:21:37Z","author_association":"NONE","body":"We use Ring + Compojure heavily in one of our web services. As we are upgrading ring to 1.6.0, wanted to try out async feature. \r\nAs Compojure routes return ring handlers, I am not able to figure out a way to define routes which will return async ring handlers.\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/170","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/170/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/170/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/170/events","html_url":"https://github.com/weavejester/compojure/issues/170","id":233348324,"number":170,"title":"Support for CONNECT method","user":{"login":"jeaye","id":1057635,"avatar_url":"https://avatars1.githubusercontent.com/u/1057635?v=4","gravatar_id":"","url":"https://api.github.com/users/jeaye","html_url":"https://github.com/jeaye","followers_url":"https://api.github.com/users/jeaye/followers","following_url":"https://api.github.com/users/jeaye/following{/other_user}","gists_url":"https://api.github.com/users/jeaye/gists{/gist_id}","starred_url":"https://api.github.com/users/jeaye/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeaye/subscriptions","organizations_url":"https://api.github.com/users/jeaye/orgs","repos_url":"https://api.github.com/users/jeaye/repos","events_url":"https://api.github.com/users/jeaye/events{/privacy}","received_events_url":"https://api.github.com/users/jeaye/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-06-03T05:43:33Z","updated_at":"2017-06-04T05:30:16Z","closed_at":"2017-06-04T05:30:16Z","author_association":"NONE","body":"Looks like there's no support for CONNECT, as described here: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\r\n\r\nEven when using ANY, CONNECT isn't parsed properly. I don't think compojure would need to do anything specific with it, just know how to parse it and send it along as a valid route. This would be useful for anyone looking to write an HTTP tunnel using ring + compojure. :)\r\n\r\nExample:\r\n```http\r\nCONNECT jeaye.com:443 HTTP/1.1\r\nHost: jeaye.com:443\r\nUser-Agent: curl/7.54.0\r\nProxy-Connection: Keep-Alive\r\n```","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/169","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/169/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/169/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/169/events","html_url":"https://github.com/weavejester/compojure/issues/169","id":232752379,"number":169,"title":"wrap-routes produces unexpected ordering of middleware","user":{"login":"RutledgePaulV","id":4924856,"avatar_url":"https://avatars3.githubusercontent.com/u/4924856?v=4","gravatar_id":"","url":"https://api.github.com/users/RutledgePaulV","html_url":"https://github.com/RutledgePaulV","followers_url":"https://api.github.com/users/RutledgePaulV/followers","following_url":"https://api.github.com/users/RutledgePaulV/following{/other_user}","gists_url":"https://api.github.com/users/RutledgePaulV/gists{/gist_id}","starred_url":"https://api.github.com/users/RutledgePaulV/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RutledgePaulV/subscriptions","organizations_url":"https://api.github.com/users/RutledgePaulV/orgs","repos_url":"https://api.github.com/users/RutledgePaulV/repos","events_url":"https://api.github.com/users/RutledgePaulV/events{/privacy}","received_events_url":"https://api.github.com/users/RutledgePaulV/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-06-01T02:58:14Z","updated_at":"2017-06-01T03:11:50Z","closed_at":"2017-06-01T03:09:47Z","author_association":"NONE","body":"Hi James,\r\n\r\nThis is likely just a failure on my part to understand how wrap-routes is supposed to work, but I was hoping you could clarify. Usually I define my routes using a thread macro and then applying a series of middleware with the understanding that later middleware receive the request earlier. Now, sometimes I want these middleware to only run if it matches a known route so I use wrap-routes. Once I introduce wrap-routes into the equation, the ordering of my middleware gets rather messed up in a way I wouldn't expect! \r\n\r\nVersion: 1.5.1\r\n\r\n\r\nI would expect:\r\n\r\nAll my non wrap-routes middleware to execute first and then if the route matches, my wrap-routes middleware to execute in the same order as they were defined. However, instead the wrap-routes middleware actually execute in the opposite order compared to the order my other middleware execute in.\r\n\r\nI have a small test case to reproduce:\r\n\r\n```clojure\r\n(ns ring-middleware-ordering.core\r\n  (:require [compojure.core :refer :all]\r\n            [ring.util.response :as response]\r\n            [ring.adapter.jetty :as jetty]))\r\n\r\n\r\n(defroutes application\r\n  (GET \"/\" request\r\n       (->\r\n         (response/response \"Hello, World\")\r\n         (response/content-type \"text/plain\"))))\r\n\r\n\r\n(defn ordering [handler order]\r\n  (fn [request]\r\n    (println \"Before request:\" order)\r\n    (let [response (handler request)]\r\n      (println \"Before response:\" order)\r\n      response)))\r\n\r\n\r\n(defn wrap-with-middleware [routes]\r\n  (-> routes\r\n      (ordering 1)\r\n      (ordering 2)\r\n      (wrap-routes #(ordering % 3))\r\n      (wrap-routes #(ordering % 4))\r\n      (ordering 5)))\r\n\r\n\r\n(defn -main [& args]\r\n  (jetty/run-jetty\r\n    (wrap-with-middleware application)\r\n    {:port 3000}))\r\n\r\n(-main)\r\n```\r\n\r\nWhen hitting the route, the above logs:\r\n\r\n```\r\nBefore request: 5\r\nBefore request: 2\r\nBefore request: 1\r\nBefore request: 3\r\nBefore request: 4\r\nBefore response: 4\r\nBefore response: 3\r\nBefore response: 1\r\nBefore response: 2\r\nBefore response: 5\r\n```\r\n\r\nI would expect:\r\n```\r\nBefore request: 5\r\nBefore request: 2\r\nBefore request: 1\r\nBefore request: 4\r\nBefore request: 3\r\nBefore response: 3\r\nBefore response: 4\r\nBefore response: 1\r\nBefore response: 2\r\nBefore response: 5\r\n```\r\n\r\nIs this intentional behavior? Would you consider changing this? (I realize that changing ordering of execution of middleware may have subtle downstream impacts).","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/168","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/168/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/168/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/168/events","html_url":"https://github.com/weavejester/compojure/issues/168","id":232094412,"number":168,"title":"Destructuring Syntax typo","user":{"login":"willspecht","id":17124185,"avatar_url":"https://avatars3.githubusercontent.com/u/17124185?v=4","gravatar_id":"","url":"https://api.github.com/users/willspecht","html_url":"https://github.com/willspecht","followers_url":"https://api.github.com/users/willspecht/followers","following_url":"https://api.github.com/users/willspecht/following{/other_user}","gists_url":"https://api.github.com/users/willspecht/gists{/gist_id}","starred_url":"https://api.github.com/users/willspecht/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willspecht/subscriptions","organizations_url":"https://api.github.com/users/willspecht/orgs","repos_url":"https://api.github.com/users/willspecht/repos","events_url":"https://api.github.com/users/willspecht/events{/privacy}","received_events_url":"https://api.github.com/users/willspecht/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-05-29T20:36:48Z","updated_at":"2017-05-29T20:54:49Z","closed_at":"2017-05-29T20:54:49Z","author_association":"NONE","body":"The post example reads:\r\n`(POST \"/foobar\" [foo]\r\n       (str \"foo: \" bar))`\r\n\r\nbut it should be: \r\n`(POST \"/foobar\" [foo]\r\n       (str \"foo: \" foo))`\r\n\r\n\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/166","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/166/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/166/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/166/events","html_url":"https://github.com/weavejester/compojure/issues/166","id":223885493,"number":166,"title":"Upgrade TechEmpower Framework Benchmarks for compojure","user":{"login":"mfirry","id":1107071,"avatar_url":"https://avatars0.githubusercontent.com/u/1107071?v=4","gravatar_id":"","url":"https://api.github.com/users/mfirry","html_url":"https://github.com/mfirry","followers_url":"https://api.github.com/users/mfirry/followers","following_url":"https://api.github.com/users/mfirry/following{/other_user}","gists_url":"https://api.github.com/users/mfirry/gists{/gist_id}","starred_url":"https://api.github.com/users/mfirry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mfirry/subscriptions","organizations_url":"https://api.github.com/users/mfirry/orgs","repos_url":"https://api.github.com/users/mfirry/repos","events_url":"https://api.github.com/users/mfirry/events{/privacy}","received_events_url":"https://api.github.com/users/mfirry/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-04-24T16:56:37Z","updated_at":"2017-05-25T21:58:42Z","closed_at":"2017-05-25T21:58:42Z","author_association":"NONE","body":"I think those benchmarks might need an upgrade to the latest version of compojure.\r\n\r\nPlease have a [look](https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/Clojure/compojure/hello).","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/165","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/165/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/165/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/165/events","html_url":"https://github.com/weavejester/compojure/issues/165","id":220423165,"number":165,"title":"Middleware at one point in the route tree can break middleware later in the route tree by reading the request body","user":{"login":"glittershark","id":1481027,"avatar_url":"https://avatars0.githubusercontent.com/u/1481027?v=4","gravatar_id":"","url":"https://api.github.com/users/glittershark","html_url":"https://github.com/glittershark","followers_url":"https://api.github.com/users/glittershark/followers","following_url":"https://api.github.com/users/glittershark/following{/other_user}","gists_url":"https://api.github.com/users/glittershark/gists{/gist_id}","starred_url":"https://api.github.com/users/glittershark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glittershark/subscriptions","organizations_url":"https://api.github.com/users/glittershark/orgs","repos_url":"https://api.github.com/users/glittershark/repos","events_url":"https://api.github.com/users/glittershark/events{/privacy}","received_events_url":"https://api.github.com/users/glittershark/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-04-08T19:53:36Z","updated_at":"2017-05-03T05:49:11Z","closed_at":"2017-05-03T05:49:11Z","author_association":"NONE","body":"So just to start out, I'm not sure if this is\r\n\r\n- a bug in Compojure\r\n- a bug in Ring\r\n- not a bug at all\r\n\r\nEssentially the gist of the issue is that while *pretty much* all of the Ring request structure is immutable - making it safe for handlers in various parts of a `compojure.core/routes` stack to do whatever they want with/to a request - that immutability doesn't apply to the `InputStream` of the body; the seek position in the stream is stored as mutable state inside the request. This means that a badly-behaved (or even innocuous) middleware *outside* a route matcher can slurp up the request body, setting the position of the input stream to the end, making it appear to all successive handlers in the route stack as if the request body was empty. I just spent the last couple hours or so hammering against a bug that turned out to have been caused by this.\r\n\r\nI'm curious if `compojure.core/routes` can work some magic on the body such that every handler argument gets its own, immutable seek position -- it would certainly have saved me some headaches.","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/163","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/163/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/163/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/163/events","html_url":"https://github.com/weavejester/compojure/issues/163","id":219070022,"number":163,"title":"allow redirect to see base url","user":{"login":"dpsutton","id":6377293,"avatar_url":"https://avatars2.githubusercontent.com/u/6377293?v=4","gravatar_id":"","url":"https://api.github.com/users/dpsutton","html_url":"https://github.com/dpsutton","followers_url":"https://api.github.com/users/dpsutton/followers","following_url":"https://api.github.com/users/dpsutton/following{/other_user}","gists_url":"https://api.github.com/users/dpsutton/gists{/gist_id}","starred_url":"https://api.github.com/users/dpsutton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dpsutton/subscriptions","organizations_url":"https://api.github.com/users/dpsutton/orgs","repos_url":"https://api.github.com/users/dpsutton/repos","events_url":"https://api.github.com/users/dpsutton/events{/privacy}","received_events_url":"https://api.github.com/users/dpsutton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-04-03T21:40:42Z","updated_at":"2017-05-03T05:48:59Z","closed_at":"2017-05-03T05:48:59Z","author_association":"NONE","body":"Our site sits in tomcat along with some others, so it's reached at host/app. An app after a post should redirect back to host/app/. However,\r\n\r\n```\r\n(cc/POST \"/New\" [site]\r\n    (do (c/compile-flow site)\r\n        (c/deploy-flow site)\r\n        (redirect \"/\")))\r\n```\r\n\r\nredirects us back to host/ which gives us an nginx error. Is there a way to redirect to a base url?\r\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/162","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/162/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/162/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/162/events","html_url":"https://github.com/weavejester/compojure/issues/162","id":215559240,"number":162,"title":"images under folders with \"ad\" as the first two letters not loading.","user":{"login":"dt1","id":2224374,"avatar_url":"https://avatars2.githubusercontent.com/u/2224374?v=4","gravatar_id":"","url":"https://api.github.com/users/dt1","html_url":"https://github.com/dt1","followers_url":"https://api.github.com/users/dt1/followers","following_url":"https://api.github.com/users/dt1/following{/other_user}","gists_url":"https://api.github.com/users/dt1/gists{/gist_id}","starred_url":"https://api.github.com/users/dt1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dt1/subscriptions","organizations_url":"https://api.github.com/users/dt1/orgs","repos_url":"https://api.github.com/users/dt1/repos","events_url":"https://api.github.com/users/dt1/events{/privacy}","received_events_url":"https://api.github.com/users/dt1/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-03-20T21:22:07Z","updated_at":"2017-03-20T23:05:42Z","closed_at":"2017-03-20T23:05:42Z","author_association":"NONE","body":"My file system is set up as \"/resources/public/img\"\r\n\r\nWhen I create folders under /img/ with the names \"ads\" \"ad-images\" \"adverts\" or \"adimg\", the images in any of those folders do not load. This doesn't appear to affect all folder names beginning with \"ad\" because \"address\" is working fine.\r\n\r\nIt's also interesting because the the missing image square does not pop up on the site. The HTML inspector does say \"could not load the file.\" I tested this with .png and .jpg.\r\n\r\nI haven't tested this on all other folder trees.\r\n\r\nI'm running Clojure 1.8.0, Compojure 1.5.1, on a Fedora 25 box. I'm deploying to Heroku and the same issue is occurring on the live site.","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/161","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/161/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/161/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/161/events","html_url":"https://github.com/weavejester/compojure/issues/161","id":214751130,"number":161,"title":"Cannot escape colons in the route","user":{"login":"alvinfrancis","id":3684037,"avatar_url":"https://avatars1.githubusercontent.com/u/3684037?v=4","gravatar_id":"","url":"https://api.github.com/users/alvinfrancis","html_url":"https://github.com/alvinfrancis","followers_url":"https://api.github.com/users/alvinfrancis/followers","following_url":"https://api.github.com/users/alvinfrancis/following{/other_user}","gists_url":"https://api.github.com/users/alvinfrancis/gists{/gist_id}","starred_url":"https://api.github.com/users/alvinfrancis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alvinfrancis/subscriptions","organizations_url":"https://api.github.com/users/alvinfrancis/orgs","repos_url":"https://api.github.com/users/alvinfrancis/repos","events_url":"https://api.github.com/users/alvinfrancis/events{/privacy}","received_events_url":"https://api.github.com/users/alvinfrancis/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-03-16T15:51:53Z","updated_at":"2017-03-16T17:25:22Z","closed_at":"2017-03-16T17:25:00Z","author_association":"NONE","body":"Currently, there doesn't seem to be any way to have a colon in the route.  It would be useful to have an easy way to escape colons when you want colons as part of the route path instead of being used for URI matching;  colons being valid characters for URLs.","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/160","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/160/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/160/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/160/events","html_url":"https://github.com/weavejester/compojure/issues/160","id":214456623,"number":160,"title":"Record route meta data on a handler to list all defined routes","user":{"login":"johnmcconnell","id":1870400,"avatar_url":"https://avatars1.githubusercontent.com/u/1870400?v=4","gravatar_id":"","url":"https://api.github.com/users/johnmcconnell","html_url":"https://github.com/johnmcconnell","followers_url":"https://api.github.com/users/johnmcconnell/followers","following_url":"https://api.github.com/users/johnmcconnell/following{/other_user}","gists_url":"https://api.github.com/users/johnmcconnell/gists{/gist_id}","starred_url":"https://api.github.com/users/johnmcconnell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/johnmcconnell/subscriptions","organizations_url":"https://api.github.com/users/johnmcconnell/orgs","repos_url":"https://api.github.com/users/johnmcconnell/repos","events_url":"https://api.github.com/users/johnmcconnell/events{/privacy}","received_events_url":"https://api.github.com/users/johnmcconnell/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2017-03-15T16:54:54Z","updated_at":"2017-04-06T04:36:09Z","closed_at":"2017-04-06T04:31:20Z","author_association":"NONE","body":"This is useful for testing and middleware.\r\n\r\nFor example.\r\n```clojure\r\n(defroutes app\r\n  (GET \"/h1\" ...)\r\n  (GET \"h1\" ...)\r\n  ...)\r\n```\r\n\r\n```clojure\r\n(route-list app)\r\n[[:GET \"/h1\"] [:GET \"h2\"] ... ]\r\n```\r\n\r\n```clojure\r\n(meta app)\r\n{:route-list [[:GET \"h1\"] [:GET \"h2\"] ... ]\r\n```","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/159","repository_url":
8000
"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/159/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/159/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/159/events","html_url":"https://github.com/weavejester/compojure/issues/159","id":213426892,"number":159,"title":"Renderable extends `APersistentMap` and not `IPersistentMap`","user":{"login":"ztellman","id":31295,"avatar_url":"https://avatars0.githubusercontent.com/u/31295?v=4","gravatar_id":"","url":"https://api.github.com/users/ztellman","html_url":"https://github.com/ztellman","followers_url":"https://api.github.com/users/ztellman/followers","following_url":"https://api.github.com/users/ztellman/following{/other_user}","gists_url":"https://api.github.com/users/ztellman/gists{/gist_id}","starred_url":"https://api.github.com/users/ztellman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ztellman/subscriptions","organizations_url":"https://api.github.com/users/ztellman/orgs","repos_url":"https://api.github.com/users/ztellman/repos","events_url":"https://api.github.com/users/ztellman/events{/privacy}","received_events_url":"https://api.github.com/users/ztellman/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-03-10T19:13:54Z","updated_at":"2017-05-03T00:27:03Z","closed_at":"2017-05-03T00:27:03Z","author_association":"NONE","body":"This means that things which are implementations of Clojure-compatible maps (such as https://github.com/ztellman/aleph/blob/master/src/aleph/http/core.clj#L207) will not be recognized as a valid response, as reported here: https://github.com/ztellman/aleph/issues/298.\r\n\r\nI understand that by extending an interface over a protocol you risk intersecting implementations, but I'd argue the same is true for an abstract class.  ","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/158","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/158/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/158/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/158/events","html_url":"https://github.com/weavejester/compojure/issues/158","id":209059628,"number":158,"title":"Missing info about site-defaults in \"Destructuring Syntax\" wiki page","user":{"login":"jumarko","id":1083629,"avatar_url":"https://avatars0.githubusercontent.com/u/1083629?v=4","gravatar_id":"","url":"https://api.github.com/users/jumarko","html_url":"https://github.com/jumarko","followers_url":"https://api.github.com/users/jumarko/followers","following_url":"https://api.github.com/users/jumarko/following{/other_user}","gists_url":"https://api.github.com/users/jumarko/gists{/gist_id}","starred_url":"https://api.github.com/users/jumarko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jumarko/subscriptions","organizations_url":"https://api.github.com/users/jumarko/orgs","repos_url":"https://api.github.com/users/jumarko/repos","events_url":"https://api.github.com/users/jumarko/events{/privacy}","received_events_url":"https://api.github.com/users/jumarko/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2017-02-21T07:09:16Z","updated_at":"2017-02-23T05:04:10Z","closed_at":"2017-02-21T15:38:16Z","author_association":"NONE","body":"The example given on [Destructuring Syntax](https://github.com/weavejester/compojure/wiki/Destructuring-Syntax) page is missing the information that it's necessary to wrap handler with site-defaults or api-defaults to make destructuring works for query params:\r\n\r\n```\r\n(GET \"/user/:id\" [id greeting]\r\n  (str \"<h1>\" greeting \" user \" id \"</h1>\"))\r\n```\r\n\r\nI've found following stackoverflow thread: http://stackoverflow.com/questions/8963213/accessing-compojure-query-string\r\nThey say it was handled in defroutes macro automatically but it's no longer the case.","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/156","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/156/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/156/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/156/events","html_url":"https://github.com/weavejester/compojure/issues/156","id":186124380,"number":156,"title":"Is it possible to define multiple resource folders? ","user":{"login":"htmfilho","id":200272,"avatar_url":"https://avatars3.githubusercontent.com/u/200272?v=4","gravatar_id":"","url":"https://api.github.com/users/htmfilho","html_url":"https://github.com/htmfilho","followers_url":"https://api.github.com/users/htmfilho/followers","following_url":"https://api.github.com/users/htmfilho/following{/other_user}","gists_url":"https://api.github.com/users/htmfilho/gists{/gist_id}","starred_url":"https://api.github.com/users/htmfilho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/htmfilho/subscriptions","organizations_url":"https://api.github.com/users/htmfilho/orgs","repos_url":"https://api.github.com/users/htmfilho/repos","events_url":"https://api.github.com/users/htmfilho/events{/privacy}","received_events_url":"https://api.github.com/users/htmfilho/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2016-10-30T08:46:06Z","updated_at":"2017-02-21T15:38:31Z","closed_at":"2017-02-21T15:38:31Z","author_association":"NONE","body":"In my current `resource` folder, I have a `public` folder that contains images, css and js. It works properly. \n\nI also have another folder called `content`, located in the same level of `resource`, that contains the content of the website as well as resources associated with those content, like images and documents.\n\nI would like to consider multiple resource folders, the default one already defined and the one inside the folder `content`. Is it possible? \n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/155","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/155/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/155/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/155/events","html_url":"https://github.com/weavejester/compojure/issues/155","id":164687694,"number":155,"title":"Project started using lein new compojure doesn't work with doc","user":{"login":"Rageoholic","id":8769509,"avatar_url":"https://avatars0.githubusercontent.com/u/8769509?v=4","gravatar_id":"","url":"https://api.github.com/users/Rageoholic","html_url":"https://github.com/Rageoholic","followers_url":"https://api.github.com/users/Rageoholic/followers","following_url":"https://api.github.com/users/Rageoholic/following{/other_user}","gists_url":"https://api.github.com/users/Rageoholic/gists{/gist_id}","starred_url":"https://api.github.com/users/Rageoholic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rageoholic/subscriptions","organizations_url":"https://api.github.com/users/Rageoholic/orgs","repos_url":"https://api.github.com/users/Rageoholic/repos","events_url":"https://api.github.com/users/Rageoholic/events{/privacy}","received_events_url":"https://api.github.com/users/Rageoholic/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-07-09T22:01:01Z","updated_at":"2016-07-09T22:34:49Z","closed_at":"2016-07-09T22:34:49Z","author_association":"NONE","body":"From CIDER, if I try to get the doc of functions built into clojure using C-c C-d C-d I get the error \"symbol func-name not resolved\"\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/154","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/154/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/154/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/154/events","html_url":"https://github.com/weavejester/compojure/issues/154","id":158550303,"number":154,"title":"Reporting statistics to StatsD","user":{"login":"erez-rabih","id":813024,"avatar_url":"https://avatars0.githubusercontent.com/u/813024?v=4","gravatar_id":"","url":"https://api.github.com/users/erez-rabih","html_url":"https://github.com/erez-rabih","followers_url":"https://api.github.com/users/erez-rabih/followers","following_url":"https://api.github.com/users/erez-rabih/following{/other_user}","gists_url":"https://api.github.com/users/erez-rabih/gists{/gist_id}","starred_url":"https://api.github.com/users/erez-rabih/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erez-rabih/subscriptions","organizations_url":"https://api.github.com/users/erez-rabih/orgs","repos_url":"https://api.github.com/users/erez-rabih/repos","events_url":"https://api.github.com/users/erez-rabih/events{/privacy}","received_events_url":"https://api.github.com/users/erez-rabih/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2016-06-05T11:37:05Z","updated_at":"2016-06-06T18:03:07Z","closed_at":"2016-06-06T18:03:06Z","author_association":"NONE","body":"Hi,\nWe're using compojure as our routing library and we would like to send statistics to a StatsD daemon which in turn feeds a Graphite backend with the statistics.\n\nThe way we'd like to do it is with a global middleware that will handle all routes and will send route specific data. For example, the following route definition:\n(GET \"/users/:uid\" req (users/get req))\nShould increment a counter for the metric named\n`web.get.users.uid`\n\nWe don't want the specific uid to be present in the metric name, but the word uid itself. For that we need the general pattern the url was matched by. The reason we need it is because it is not a good practice to add Graphite metrics with specific data such as uids.\n\nI had a look and saw that compojure adds a :compojure/route key to the request that is available only on the handler itself - (users/get uid)\n\nI was wondering if that's possible to have pattern a route was matched by to a middleware and not to the end handler only.\nOr, if there is another solution to report metrics by the pattern a route was matched by and not by the URI itself, I'd love to hear about that.\n\nI hope the question is clear, if a clarification is needed I will be happy to supply it.\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/153","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/153/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/153/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/153/events","html_url":"https://github.com/weavejester/compojure/issues/153","id":157311236,"number":153,"title":"Empty route with context?","user":{"login":"ProjectFrank","id":8015872,"avatar_url":"https://avatars2.githubusercontent.com/u/8015872?v=4","gravatar_id":"","url":"https://api.github.com/users/ProjectFrank","html_url":"https://github.com/ProjectFrank","followers_url":"https://api.github.com/users/ProjectFrank/followers","following_url":"https://api.github.com/users/ProjectFrank/following{/other_user}","gists_url":"https://api.github.com/users/ProjectFrank/gists{/gist_id}","starred_url":"https://api.github.com/users/ProjectFrank/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ProjectFrank/subscriptions","organizations_url":"https://api.github.com/users/ProjectFrank/orgs","repos_url":"https://api.github.com/users/ProjectFrank/repos","events_url":"https://api.github.com/users/ProjectFrank/events{/privacy}","received_events_url":"https://api.github.com/users/ProjectFrank/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2016-05-28T00:28:55Z","updated_at":"2016-05-31T01:37:43Z","closed_at":"2016-05-31T01:35:55Z","author_association":"NONE","body":"A route with an empty path (e.g. `(GET \"\" [] handler)` never gets matched.\n\nThe reason why I have an empty route is because I'm using `compojure.core/context` and I'd like to mount the empty route onto a context. Example:\n\n``` clojure\n(context \"/foo/bar\" []\n         (GET \"\" [] handler)\n         (GET \"/another-route\" [] another-handler))\n```\n\nI could do this instead, but it's not as nice 😞 \n\n``` clojure\n(routes\n (GET \"/foo/bar\" [] handler)\n (context \"/foo/bar\" []\n          (GET \"/another-route\" [] another-handler)))\n```\n\nWould it be reasonable to support this?\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/152","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/152/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/152/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/152/events","html_url":"https://github.com/weavejester/compojure/issues/152","id":156539507,"number":152,"title":"Desctructuring problem with only rest args.","user":{"login":"carrete","id":19260155,"avatar_url":"https://avatars2.githubusercontent.com/u/19260155?v=4","gravatar_id":"","url":"https://api.github.com/users/carrete","html_url":"https://github.com/carrete","followers_url":"https://api.github.com/users/carrete/followers","following_url":"https://api.github.com/users/carrete/following{/other_user}","gists_url":"https://api.github.com/users/carrete/gists{/gist_id}","starred_url":"https://api.github.com/users/carrete/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/carrete/subscriptions","organizations_url":"https://api.github.com/users/carrete/orgs","repos_url":"https://api.github.com/users/carrete/repos","events_url":"https://api.github.com/users/carrete/events{/privacy}","received_events_url":"https://api.github.com/users/carrete/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2016-05-24T15:35:09Z","updated_at":"2016-06-19T10:11:06Z","closed_at":"2016-06-19T10:11:06Z","author_association":"NONE","body":"When I don't specify any variables but do include rest args like `(ANY \"/\" [& args] error-405)` this is expanded into:\n\n``` clojure\n(compojure.core/make-route\n  nil\n  {:source \"/\", :re #\"/\", :keys [], :absolute? false}\n  (fn*\n    ([request__2306__auto__]\n      (let*\n        [args (dissoc (:params request__2306__auto__))]\n        (do error-405)))))\n```\n\n `dissoc` is being called with just one parameter.\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/151","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/151/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/151/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/151/events","html_url":"https://github.com/weavejester/compojure/issues/151","id":154687196,"number":151,"title":"Matching 'subpaths' alternative","user":{"login":"dfrese","id":3024537,"avatar_url":"https://avatars3.githubusercontent.com/u/3024537?v=4","gravatar_id":"","url":"https://api.github.com/users/dfrese","html_url":"https://github.com/dfrese","followers_url":"https://api.github.com/users/dfrese/followers","following_url":"https://api.github.com/users/dfrese/following{/other_user}","gists_url":"https://api.github.com/users/dfrese/gists{/gist_id}","starred_url":"https://api.github.com/users/dfrese/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dfrese/subscriptions","organizations_url":"https://api.github.com/users/dfrese/orgs","repos_url":"https://api.github.com/users/dfrese/repos","events_url":"https://api.github.com/users/dfrese/events{/privacy}","received_events_url":"https://api.github.com/users/dfrese/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2016-05-13T11:03:50Z","updated_at":"2016-05-13T15:30:32Z","closed_at":"2016-05-13T13:50:32Z","author_association":"NONE","body":"A route like `(GET \"/some/path/*\" [*] ...)` causes a message to be printed out on stdout:\n\n> WARNING: \\* should not be used as a route binding.\n\nHow can an arbitrary deep 'subpath' be matched otherwise, and could that be added to Wiki?\nAlternatively, how can the warning be disabled?\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/150","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/150/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/150/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/150/events","html_url":"https://github.com/weavejester/compojure/issues/150","id":152475722,"number":150,"title":"Parameter coercion of booleans","user":{"login":"khadiwala","id":529832,"avatar_url":"https://avatars3.githubusercontent.com/u/529832?v=4","gravatar_id":"","url":"https://api.github.com/users/khadiwala","html_url":"https://github.com/khadiwala","followers_url":"https://api.github.com/users/khadiwala/followers","following_url":"https://api.github.com/users/khadiwala/following{/other_user}","gists_url":"https://api.github.com/users/khadiwala/gists{/gist_id}","starred_url":"https://api.github.com/users/khadiwala/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/khadiwala/subscriptions","organizations_url":"https://api.github.com/users/khadiwala/orgs","repos_url":"https://api.github.com/users/khadiwala/repos","events_url":"https://api.github.com/users/khadiwala/events{/privacy}","received_events_url":"https://api.github.com/users/khadiwala/received_events","type":"User","site_admin":false},"labels":[{"id":3044,"url":"https://api.github.com/repos/weavejester/compojure/labels/bug","name":"bug","color":"e11d21","default":true}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-05-02T03:20:55Z","updated_at":"2016-06-19T10:15:55Z","closed_at":"2016-06-19T10:15:55Z","author_association":"NONE","body":"I have a route like this\n\n``` clojure\n(defroutes app-routes\n  (GET \"/foo/:bar\" [bar :<< Boolean/valueOf] \"success\"))\n```\n\nwhere I'm trying to coerce bar to a boolean. `/foo/true` is matched by this route, but `/foo/false` is not. What I'm guessing is happening is that because my coercion function is returning false, it is assumed to have failed. If I have that right, I think this is incorrect and only nil should be considered a failed match as indicated in the documentation here: https://github.com/weavejester/compojure/wiki/Destructuring-Syntax#parameter-coercion.\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/149","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/149/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/149/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/149/events","html_url":"https://github.com/weavejester/compojure/issues/149","id":148817971,"number":149,"title":"Why does the exception stacktrace disappear if I refresh the page?","user":{"login":"ilja903","id":3264601,"avatar_url":"https://avatars1.githubusercontent.com/u/3264601?v=4","gravatar_id":"","url":"https://api.github.com/users/ilja903","html_url":"https://github.com/ilja903","followers_url":"https://api.github.com/users/ilja903/followers","following_url":"https://api.github.com/users/ilja903/following{/other_user}","gists_url":"https://api.github.com/users/ilja903/gists{/gist_id}","starred_url":"https://api.github.com/users/ilja903/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilja903/subscriptions","organizations_url":"https://api.github.com/users/ilja903/orgs","repos_url":"https://api.github.com/users/ilja903/repos","events_url":"https://api.github.com/users/ilja903/events{/privacy}","received_events_url":"https://api.github.com/users/ilja903/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-04-16T05:07:45Z","updated_at":"2016-04-16T13:23:08Z","closed_at":"2016-04-16T13:23:08Z","author_association":"NONE","body":"When I make some typo in the code (for instance, I have forgotten to add ')' to the end of sth) then I see a stacktrace in the browser which is totally fine. However , if I refresh the page, then the exception suddenly disappears. Is there any flag, which could prevent compojure (or ring?) from doing this? Seems like a really undesired behavior for me.\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/148","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/148/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/148/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/148/events","html_url":"https://github.com/weavejester/compojure/issues/148","id":128603844,"number":148,"title":"Context-macro recreating subroutes per request","user":{"login":"ikitommi","id":567532,"avatar_url":"https://avatars1.githubusercontent.com/u/567532?v=4","gravatar_id":"","url":"https://api.github.com/users/ikitommi","html_url":"https://github.com/ikitommi","followers_url":"https://api.github.com/users/ikitommi/followers","following_url":"https://api.github.com/users/ikitommi/following{/other_user}","gists_url":"https://api.github.com/users/ikitommi/gists{/gist_id}","starred_url":"https://api.github.com/users/ikitommi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ikitommi/subscriptions","organizations_url":"https://api.github.com/users/ikitommi/orgs","repos_url":"https://api.github.com/users/ikitommi/repos","events_url":"https://api.github.com/users/ikitommi/events{/privacy}","received_events_url":"https://api.github.com/users/ikitommi/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2016-01-25T18:19:54Z","updated_at":"2016-01-26T08:06:09Z","closed_at":"2016-01-26T08:06:09Z","author_association":"NONE","body":"Hi.\n\nWas bit surprised that the `context`-macro seems to recreate the (sub-)routes on every request. Is this intentional? Isn't there a way to just create the internal routes just once and reuse them?\n\n``` clj\n(require '[compojure.core :as c])\n\n(defmacro GET [& args]\n  `(do (println \"endpoint\" ~(first args)) (c/GET ~@args)))\n\n(println \"--- create a context ---\")\n(def app (c/context \"/a\" []\n           (c/context \"/b\" []\n             (GET \"/1\" [] (println \"..served /1\") \"ok\")\n             (GET \"/2\" [] \"ok\")\n             (GET \"/3\" [] \"ok\")\n             (GET \"/4\" [] \"ok\")\n             (GET \"/5\" [] \"ok\"))\n           (GET \"/6\" [] \"ok\")\n           (GET \"/7\" [] \"ok\")\n           (GET \"/8\" [] \"ok\")\n           (GET \"/9\" [] \"ok\")\n           (GET \"/10\" [] \"ok\")))\n\n(println \"--- handle route from 1-level deep ---\")\n(app {:request-method :get :uri \"/a/1\"})\n\n(println \"--- handle route from 2-levels deep ---\")\n(app {:request-method :get :uri \"/a/b/1\"})\n\n(println \"--- handle same route again ---\")\n(app {:request-method :get :uri \"/a/b/1\"})\n\n; --- create a context ---\n; --- handle route from 1-level deep ---\n; endpoint /6\n; endpoint /7\n; endpoint /8\n; endpoint /9\n; endpoint /10\n; --- handle route from 2-levels deep ---\n; endpoint /6\n; endpoint /7\n; endpoint /8\n; endpoint /9\n; endpoint /10\n; endpoint /1\n; endpoint /2\n; endpoint /3\n; endpoint /4\n; endpoint /5\n; ..served /1\n; --- handle same route again ---\n; endpoint /6\n; endpoint /7\n; endpoint /8\n; endpoint /9\n; endpoint /10\n; endpoint /1\n; endpoint /2\n; endpoint /3\n; endpoint /4\n; endpoint /5\n; ..served /1\n; => {:status 200, :headers {\"Content-Type\" \"text/html; charset=utf-8\"}, :body \"ok\"}\n```\n\nDid some simple benchmarking with criterium, a 3-level nested context takes x6 times longer to route than with flattened route. That's ok'ish, but thinking if there is some perf win waiting in here?\n\n(related https://github.com/weavejester/compojure/issues/133)\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/146","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/146/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/146/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/146/events","html_url":"https://github.com/weavejester/compojure/issues/146","id":121228613,"number":146,"title":"Compojure logo concept","user":{"login":"salmazov","id":1635615,"avatar_url":"https://avatars2.githubusercontent.com/u/1635615?v=4","gravatar_id":"","url":"https://api.github.com/users/salmazov","html_url":"https://github.com/salmazov","followers_url":"https://api.github.com/users/salmazov/followers","following_url":"https://api.github.com/users/salmazov/following{/other_user}","gists_url":"https://api.github.com/users/salmazov/gists{/gist_id}","starred_url":"https://api.github.com/users/salmazov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/salmazov/subscriptions","organizations_url":"https://api.github.com/users/salmazov/orgs","repos_url":"https://api.github.com/users/salmazov/repos","events_url":"https://api.github.com/users/salmazov/events{/privacy}","received_events_url":"https://api.github.com/users/salmazov/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-12-09T12:41:40Z","updated_at":"2015-12-09T13:53:08Z","closed_at":"2015-12-09T13:53:08Z","author_association":"NONE","body":"![compojure](https://cloud.githubusercontent.com/assets/1635615/11685600/53aa0ad2-9e8b-11e5-97b3-ec8233ef1e4b.png)\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/145","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/145/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/145/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/145/events","html_url":"https://github.com/weavejester/compojure/issues/145","id":119182300,"number":145,"title":"1.4.0: path regexp matches against still-encoded url component","user":{"login":"hoxu","id":43341,"avatar_url":"https://avatars2.githubusercontent.com/u/43341?v=4","gravatar_id":"","url":"https://api.github.com/users/hoxu","html_url":"https://github.com/hoxu","followers_url":"https://api.github.com/users/hoxu/followers","following_url":"https://api.github.com/users/hoxu/following{/other_user}","gists_url":"https://api.github.com/users/hoxu/gists{/gist_id}","starred_url":"https://api.github.com/users/hoxu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hoxu/subscriptions","organizations_url":"https://api.github.com/users/hoxu/orgs","repos_url":"https://api.github.com/users/hoxu/repos","events_url":"https://api.github.com/users/hoxu/events{/privacy}","received_events_url":"https://api.github.com/users/hoxu/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-11-27T11:39:40Z","updated_at":"2015-11-27T16:47:49Z","closed_at":"2015-11-27T16:47:49Z","author_association":"NONE","body":"With compojure 1.4.0 this syntax matches against the encoded url component:\n\n```\n[\"/:test\", :test #\"[0-9%F]+\"]\n```\n\n`/123%2F456` matches this route, and `test` gets `123/456` assigned.\n\nI would expect the regexp to match against the decoded version of the component - eg. the same string that gets assigned to `test`. This is how it seemed to work before, at least in compojure 1.1.5.\n\nI would expect the following to work, but it does not:\n\n```\n[\"/:test\", :test #\"[0-9/]+\"]\n```\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/144","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/144/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/144/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/144/events","html_url":"https://github.com/weavejester/compojure/issues/144","id":108290734,"number":144,"title":"I need to upload file. How?","user":{"login":"salmazov","id":1635615,"avatar_url":"https://avatars2.githubusercontent.com/u/1635615?v=4","gravatar_id":"","url":"https://api.github.com/users/salmazov","html_url":"https://github.com/salmazov","followers_url":"https://api.github.com/users/salmazov/followers","following_url":"https://api.github.com/users/salmazov/following{/other_user}","gists_url":"https://api.github.com/users/salmazov/gists{/gist_id}","starred_url":"https://api.github.com/users/salmazov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/salmazov/subscriptions","organizations_url":"https://api.github.com/users/salmazov/orgs","repos_url":"https://api.github.com/users/salmazov/repos","events_url":"https://api.github.com/users/salmazov/events{/privacy}","received_events_url":"https://api.github.com/users/salmazov/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-09-25T09:19:30Z","updated_at":"2015-09-25T10:25:39Z","closed_at":"2015-09-25T10:25:39Z","author_association":"NONE","body":"``` clojure\n(ns ringtest\n    (:require\n        [compojure.core :refer [defroutes GET POST]]\n        [noir.io :as io]\n        [ring.adapter.jetty :as jetty]\n        [ring.middleware.params :refer [wrap-params]]))\n\n(def myform \n    (str \"<html>\"\n            \"<body>\"\n                \"<form action='/upload' method='post' enctype='multipart/form-data'>\"\n                    \"<input type='file' name='filename'>\"\n                    \"<input type='submit' value='Hello!'>\"\n                \"</form>\"\n            \"</body>\"\n        \"</html>\"))\n\n(defn show-form []\n    {:body myform\n     :status 200})\n\n(defroutes mainroutes\n    (GET \"/\" [] (show-form))\n    (POST \"/upload\" [file] \n     (io/upload-file \"/tmp/\" file)\n     )\n\n(defn -main [& args]\n  (jetty/run-jetty mainroutes {:port 3001}))\n```\n\ndoesn't work for me\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/143","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/143/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/143/comments","events_url":"https://api.github
1565
.com/repos/weavejester/compojure/issues/143/events","html_url":"https://github.com/weavejester/compojure/issues/143","id":104636866,"number":143,"title":"Using the `route/not-found` with a custom status code?","user":{"login":"stonetwig","id":47466,"avatar_url":"https://avatars1.githubusercontent.com/u/47466?v=4","gravatar_id":"","url":"https://api.github.com/users/stonetwig","html_url":"https://github.com/stonetwig","followers_url":"https://api.github.com/users/stonetwig/followers","following_url":"https://api.github.com/users/stonetwig/following{/other_user}","gists_url":"https://api.github.com/users/stonetwig/gists{/gist_id}","starred_url":"https://api.github.com/users/stonetwig/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stonetwig/subscriptions","organizations_url":"https://api.github.com/users/stonetwig/orgs","repos_url":"https://api.github.com/users/stonetwig/repos","events_url":"https://api.github.com/users/stonetwig/events{/privacy}","received_events_url":"https://api.github.com/users/stonetwig/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-09-03T07:24:14Z","updated_at":"2015-09-03T10:31:23Z","closed_at":"2015-09-03T10:30:47Z","author_association":"NONE","body":"```\n(defroutes app\n  \"This is the function we pass to Ring. It will be called with a\n   request map for every request.\"\n  (GET \"/client-type-endpoints\" [] (render-file \"templates/client-type-endpoints.html\" {:somedata \"data\"}))\n  (route/resources \"/\")\n  (route/not-found (-> get-pages\n      (stasis/serve-pages)\n      wrap-exceptions\n      (optimus/wrap get-assets optimize\n                    (if freeze-assets? serve-frozen-assets serve-live-assets))\n                    )))\n```\n\nThis is a snippet from my current code. We are using some other libraries to serve static markdown pages. However I was in a need for some specific routes and thought it was easy to simply throw in compojure in front of the other code.\n\nAltough, since there already exist some routing I simply wanted to \"shuffle\" all requests to the other library if I had no custom route that was not a static site. I used the `not-found` but noticed it sends a 404 status code with each page request.\n\nAn image:\n![](https://s3.amazonaws.com/f.cl.ly/items/3f2F123k0P2p223p0e3R/Image%202015-09-03%20at%208.51.18%20am.png)\n\nAs you can see, the compiled static files all gets 404 even the initial request even if it renders the correct html. \n\nBut if I do a request to the resource requested by the browser, it renders perfectly well:\n![](https://s3.amazonaws.com/f.cl.ly/items/0r2C1t2k0N1X0X1a0O1p/Image%202015-09-03%20at%208.53.03%20am.png)\n\nMy question is if you know a simple way to keep all existing  code and how to add a new route that can render a specific page but still keep the custom routing engine? Simply put, I need a `not-found` function that does not send a 404.\n\nCan this be done with compojure? I am really, really new at clojure so please explain it in a simple way!\n","score":1.0},{"url":"https://api.github.com/repos/weavejester/compojure/issues/138","repository_url":"https://api.github.com/repos/weavejester/compojure","labels_url":"https://api.github.com/repos/weavejester/compojure/issues/138/labels{/name}","comments_url":"https://api.github.com/repos/weavejester/compojure/issues/138/comments","events_url":"https://api.github.com/repos/weavejester/compojure/issues/138/events","html_url":"https://github.com/weavejester/compojure/issues/138","id":66344568,"number":138,"title":"Cloverage fails on simple compojure projects","user":{"login":"MichaelBlume","id":208853,"avatar_url":"https://avatars3.githubusercontent.com/u/208853?v=4","gravatar_id":"","url":"https://api.github.com/users/MichaelBlume","html_url":"https://github.com/MichaelBlume","followers_url":"https://api.github.com/users/MichaelBlume/followers","following_url":"https://api.github.com/users/MichaelBlume/following{/other_user}","gists_url":"https://api.github.com/users/MichaelBlume/gists{/gist_id}","starred_url":"https://api.github.com/users/MichaelBlume/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MichaelBlume/subscriptions","organizations_url":"https://api.github.com/users/MichaelBlume/orgs","repos_url":"https://api.github.com/users/MichaelBlume/repos","events_url":"https://api.github.com/users/MichaelBlume/events{/privacy}","received_events_url":"https://api.github.com/users/MichaelBlume/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-04-04T17:31:45Z","updated_at":"2015-04-04T18:11:48Z","closed_at":"2015-04-04T18:11:48Z","author_association":"NONE","body":"This isn't properly a Compojure bug, it's a Cloverage bug, but I thought you might want to know about it. As far as I can tell, https://github.com/weavejester/compojure/commit/639fff embeds instances of the CompiledRoute record _in the AST_. Clojure thinks this is just fine, but somehow Cloverage downcasts them to maps and everything becomes sad. If you checkout https://github.com/MichaelBlume/compojure-cloverage-fail and run `lein do test, cloverage` you'll see that vanilla tests pass but coverage report errors out because ordinary maps don't implement the Route protocol.\n","score":1.0}]}
0

