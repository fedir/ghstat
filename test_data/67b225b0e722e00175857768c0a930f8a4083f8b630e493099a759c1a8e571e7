HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 09 Jun 2018 08:12:26 GMT
Link: <https://api.github.com/search/issues?q=repo%3Arust-lang%2Frust+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Arust-lang%2Frust+type%3Aissue+state%3Aclosed&page=34>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CEED:57C5:3735ABB:71AD0CF:5B1B8BE9
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 27
X-Ratelimit-Reset: 1528532005
X-Runtime-Rack: 0.399283
X-Xss-Protection: 1; mode=block

8000
{"total_count":21756,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/rust-lang/rust/issues/51449","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51449/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51449/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51449/events","html_url":"https://github.com/rust-lang/rust/issues/51449","id":330834026,"node_id":"MDU6SXNzdWUzMzA4MzQwMjY=","number":51449,"title":"\"access to extern crates through prelude is experimental\" in rustdoc","user":{"login":"goffrie","id":1240398,"node_id":"MDQ6VXNlcjEyNDAzOTg=","avatar_url":"https://avatars2.githubusercontent.com/u/1240398?v=4","gravatar_id":"","url":"https://api.github.com/users/goffrie","html_url":"https://github.com/goffrie","followers_url":"https://api.github.com/users/goffrie/followers","following_url":"https://api.github.com/users/goffrie/following{/other_user}","gists_url":"https://api.github.com/users/goffrie/gists{/gist_id}","starred_url":"https://api.github.com/users/goffrie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/goffrie/subscriptions","organizations_url":"https://api.github.com/users/goffrie/orgs","repos_url":"https://api.github.com/users/goffrie/repos","events_url":"https://api.github.com/users/goffrie/events{/privacy}","received_events_url":"https://api.github.com/users/goffrie/received_events","type":"User","site_admin":false},"labels":[{"id":31942528,"node_id":"MDU6TGFiZWwzMTk0MjUyOA==","url":"https://api.github.com/repos/rust-lang/rust/labels/I-nominated","name":"I-nominated","color":"e10c02","default":false},{"id":203738,"node_id":"MDU6TGFiZWwyMDM3Mzg=","url":"https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc","name":"T-rustdoc","color":"bfd4f2","default":false},{"id":147085028,"node_id":"MDU6TGFiZWwxNDcwODUwMjg=","url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly","name":"regression-from-stable-to-nightly","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/51","html_url":"https://github.com/rust-lang/rust/milestone/51","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/51/labels","id":3327068,"node_id":"MDk6TWlsZXN0b25lMzMyNzA2OA==","number":51,"title":"1.28","description":"","creator":{"login":"alexcrichton","id":64996,"node_id":"MDQ6VXNlcjY0OTk2","avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false},"open_issues":2,"closed_issues":1,"state":"open","created_at":"2018-05-07T19:33:42Z","updated_at":"2018-06-09T02:50:43Z","due_on":"2018-08-02T07:00:00Z","closed_at":null},"comments":3,"created_at":"2018-06-09T00:03:53Z","updated_at":"2018-06-09T02:49:29Z","closed_at":"2018-06-09T02:49:29Z","author_association":"CONTRIBUTOR","body":"Current rustdoc nightly errors when trying to document `h2-0.1.9`:\r\n```\r\nerror[E0658]: access to extern crates through prelude is experimental (see issue #44660)\r\n  |\r\n  = help: add #![feature(extern_prelude)] to the crate attributes to enable\r\n```\r\n\r\nAnnoyingly, I can't actually figure out what triggers the error. But it's a regression from stable.\r\n\r\nRef #44660.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51447","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51447/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51447/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51447/events","html_url":"https://github.com/rust-lang/rust/issues/51447","id":330825464,"node_id":"MDU6SXNzdWUzMzA4MjU0NjQ=","number":51447,"title":"Issue with E0381 and using a boolean to track initialization","user":{"login":"mtreinish","id":2447371,"node_id":"MDQ6VXNlcjI0NDczNzE=","avatar_url":"https://avatars0.githubusercontent.com/u/2447371?v=4","gravatar_id":"","url":"https://api.github.com/users/mtreinish","html_url":"https://github.com/mtreinish","followers_url":"https://api.github.com/users/mtreinish/followers","following_url":"https://api.github.com/users/mtreinish/following{/other_user}","gists_url":"https://api.github.com/users/mtreinish/gists{/gist_id}","starred_url":"https://api.github.com/users/mtreinish/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mtreinish/subscriptions","organizations_url":"https://api.github.com/users/mtreinish/orgs","repos_url":"https://api.github.com/users/mtreinish/repos","events_url":"https://api.github.com/users/mtreinish/events{/privacy}","received_events_url":"https://api.github.com/users/mtreinish/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-06-08T22:58:42Z","updated_at":"2018-06-09T03:04:52Z","closed_at":"2018-06-09T03:04:52Z","author_association":"NONE","body":"When declaring a variable outside of a for loop and tracking whether it's set with a boolean and only accessing that inside an if block isn't track properly and will raise an E0381 uninitialized variable even though the variable will also have an assigned variable when it's accessed. I came up with a small reproduce case here:\r\n\r\n```\r\nfn main() {\r\n    let mut time;\r\n    let mut time_found = false;\r\n    for i in 1..10 {\r\n        if i == 1 {\r\n            time_found = true;\r\n            time = i;\r\n        }\r\n    }\r\n    if time_found {\r\n        let a = time + 1;\r\n    }\r\n}\r\n```\r\n\r\nWill not build because of E0381 on the `let a = time + 1;` line. However, because time is only being used inside the if block it will always have a defined value it's never going to be uninitialized there. \r\n\r\nWhile this synthetic case doesn't make much sense in the real world, I'm hitting this in a more complex example where using a boolean to track the the state of having the value defined for a variable like this was the only way I could think to ensure the value was always set. Especially because I can't come up with a sane value to initialize for the type of this variable.\r\n\r\nI'm new to rust so I'm not sure if there is something obvious I'm missing here, but this seems like a bug in that the compiler isn't able to track this case properly.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\nrustc 1.26.2\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.26.2\r\nLLVM version: 6.0\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51424","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51424/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51424/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51424/events","html_url":"https://github.com/rust-lang/rust/issues/51424","id":330452754,"node_id":"MDU6SXNzdWUzMzA0NTI3NTQ=","number":51424,"title":"rustbuild: `x.py doc -i --stage 1 src/libstd` builds the compiler twice","user":{"login":"QuietMisdreavus","id":5217170,"node_id":"MDQ6VXNlcjUyMTcxNzA=","avatar_url":"https://avatars2.githubusercontent.com/u/5217170?v=4","gravatar_id":"","url":"https://api.github.com/users/QuietMisdreavus","html_url":"https://github.com/QuietMisdreavus","followers_url":"https://api.github.com/users/QuietMisdreavus/followers","following_url":"https://api.github.com/users/QuietMisdreavus/following{/other_user}","gists_url":"https://api.github.com/users/QuietMisdreavus/gists{/gist_id}","starred_url":"https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/QuietMisdreavus/subscriptions","organizations_url":"https://api.github.com/users/QuietMisdreavus/orgs","repos_url":"https://api.github.com/users/QuietMisdreavus/repos","events_url":"https://api.github.com/users/QuietMisdreavus/events{/privacy}","received_events_url":"https://api.github.com/users/QuietMisdreavus/received_events","type":"User","site_admin":false},"labels":[{"id":325438536,"node_id":"MDU6TGFiZWwzMjU0Mzg1MzY=","url":"https://api.github.com/repos/rust-lang/rust/labels/A-rustbuild","name":"A-rustbuild","color":"d7e102","default":false},{"id":650731663,"node_id":"MDU6TGFiZWw2NTA3MzE2NjM=","url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-07T22:06:52Z","updated_at":"2018-06-09T01:33:06Z","closed_at":"2018-06-09T01:33:06Z","author_association":"MEMBER","body":"This seems to be new? I think in the past it worked without building the stage1 compiler. (At least, without the `--incremental` flag.) My current branch is based on master at 4122885e0f99b3f28e65c122cde48de5bfc8231a.\r\n\r\nFull build log with `--verbose`: https://gist.github.com/QuietMisdreavus/5d000903b7cc4f1aae655f7c9b3073b8\r\n\r\ncc @Mark-Simulacrum ","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51421","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51421/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51421/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51421/events","html_url":"https://github.com/rust-lang/rust/issues/51421","id":330432378,"node_id":"MDU6SXNzdWUzMzA0MzIzNzg=","number":51421,"title":"Method tries to borrow &mut to entire struct, when only a field is required","user":{"login":"acgaudette","id":7143633,"node_id":"MDQ6VXNlcjcxNDM2MzM=","avatar_url":"https://avatars1.githubusercontent.com/u/7143633?v=4","gravatar_id":"","url":"https://api.github.com/users/acgaudette","html_url":"https://github.com/acgaudette","followers_url":"https://api.github.com/users/acgaudette/followers","following_url":"https://api.github.com/users/acgaudette/following{/other_user}","gists_url":"https://api.github.com/users/acgaudette/gists{/gist_id}","starred_url":"https://api.github.com/users/acgaudette/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/acgaudette/subscriptions","organizations_url":"https://api.github.com/users/acgaudette/orgs","repos_url":"https://api.github.com/users/acgaudette/repos","events_url":"https://api.github.com/users/acgaudette/events{/privacy}","received_events_url":"https://api.github.com/users/acgaudette/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-07T20:55:25Z","updated_at":"2018-06-08T05:30:45Z","closed_at":"2018-06-08T05:30:44Z","author_association":"NONE","body":"Offending code:\r\n\r\n```rust\r\nstruct MyStruct {\r\n    usizes: Vec<usize>,\r\n    string: String,\r\n}\r\n\r\nimpl MyStruct {\r\n    fn new() -> MyStruct {\r\n        MyStruct {\r\n            usizes: Vec::new(),\r\n            string: \"string\".into(),\r\n        }\r\n    }\r\n    \r\n    fn modify_string(&mut self) {\r\n        self.string = \"\".into();\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut my_struct = MyStruct::new();\r\n    \r\n    for _ in &my_struct.usizes {\r\n        my_struct.modify_string();\r\n    }\r\n}\r\n```\r\n\r\nError:\r\n```\r\nerror[E0502]: cannot borrow `my_struct` as mutable because `my_struct.usizes` is also borrowed as immutable\r\n  --> src/main.rs:23:9\r\n   |\r\n22 |     for _ in &my_struct.usizes {\r\n   |               ----------------\r\n   |               |              |\r\n   |               |              immutable borrow ends here\r\n   |               immutable borrow occurs here\r\n23 |         my_struct.modify_string();\r\n   |         ^^^^^^^^^ mutable borrow occurs here\r\n```\r\n\r\nPlayground:\r\nhttps://play.rust-lang.org/?gist=d55dab3abe961e27cb7aabc66d857687&version=stable&mode=debug\r\n\r\nOne way this can be fixed is with the following code:\r\n\r\n```rust\r\nstruct MyStruct {\r\n    usizes: Vec<usize>,\r\n    string: String,\r\n}\r\n\r\nimpl MyStruct {\r\n    fn new() -> MyStruct {\r\n        MyStruct {\r\n            usizes: Vec::new(),\r\n            string: \"string\".into(),\r\n        }\r\n    }\r\n    \r\n    fn better_modify_string(string: &mut String) {\r\n        *string = \"\".into();\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let mut my_struct = MyStruct::new();\r\n    \r\n    for _ in &my_struct.usizes {\r\n        MyStruct::better_modify_string(&mut my_struct.string)\r\n    }\r\n}\r\n```\r\n\r\nPlayground:\r\nhttps://play.rust-lang.org/?gist=dede523e37dd2894a74b5364d36e6fbf&version=undefined&mode=undefined\r\n\r\nOr by breaking the struct apart. I don't think either of those solutions feel very nice. However, I understand that semantically a `&mut` borrow should mean that the entire struct is off-limits.\r\n\r\nPossibly related to https://github.com/rust-lang/rust/issues/19004","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51416","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51416/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51416/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51416/events","html_url":"https://github.com/rust-lang/rust/issues/51416","id":330308198,"node_id":"MDU6SXNzdWUzMzAzMDgxOTg=","number":51416,"title":"semantics of `$($x:tt)?*` were changed in Rust 2015, should revert","user":{"login":"nikomatsakis","id":155238,"node_id":"MDQ6VXNlcjE1NTIzOA==","avatar_url":"https://avatars0.githubusercontent.com/u/155238?v=4","gravatar_id":"","url":"https://api.github.com/users/nikomatsakis","html_url":"https://github.com/nikomatsakis","followers_url":"https://api.github.com/users/nikomatsakis/followers","following_url":"https://api.github.com/users/nikomatsakis/following{/other_user}","gists_url":"https://api.github.com/users/nikomatsakis/gists{/gist_id}","starred_url":"https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikomatsakis/subscriptions","organizations_url":"https://api.github.com/users/nikomatsakis/orgs","repos_url":"https://api.github.com/users/nikomatsakis/repos","events_url":"https://api.github.com/users/nikomatsakis/events{/privacy}","received_events_url":"https://api.github.com/users/nikomatsakis/received_events","type":"User","site_admin":false},"labels":[{"id":203429200,"node_id":"MDU6TGFiZWwyMDM0MjkyMDA=","url":"https://api.github.com/repos/rust-lang/rust/labels/P-high","name":"P-high","color":"eb6420","default":false},{"id":211668100,"node_id":"MDU6TGFiZWwyMTE2NjgxMDA=","url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":262252628,"node_id":"MDU6TGFiZWwyNjIyNTI2Mjg=","url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":{"login":"pietroalbini","id":2299951,"node_id":"MDQ6VXNlcjIyOTk5NTE=","avatar_url":"https://avatars3.githubusercontent.com/u/2299951?v=4","gravatar_id":"","url":"https://api.github.com/users/pietroalbini","html_url":"https://github.com/pietroalbini","followers_url":"https://api.github.com/users/pietroalbini/followers","following_url":"https://api.github.com/users/pietroalbini/following{/other_user}","gists_url":"https://api.github.com/users/pietroalbini/gists{/gist_id}","starred_url":"https://api.github.com/users/pietroalbini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pietroalbini/subscriptions","organizations_url":"https://api.github.com/users/pietroalbini/orgs","repos_url":"https://api.github.com/users/pietroalbini/repos","events_url":"https://api.github.com/users/pietroalbini/events{/privacy}","received_events_url":"https://api.github.com/users/pietroalbini/received_events","type":"User","site_admin":false},"assignees":[{"login":"pietroalbini","id":2299951,"node_id":"MDQ6VXNlcjIyOTk5NTE=","avatar_url":"https://avatars3.githubusercontent.com/u/2299951?v=4","gravatar_id":"","url":"https://api.github.com/users/pietroalbini","html_url":"https://github.com/pietroalbini","followers_url":"https://api.github.com/users/pietroalbini/followers","following_url":"https://api.github.com/users/pietroalbini/following{/other_user}","gists_url":"https://api.github.com/users/pietroalbini/gists{/gist_id}","starred_url":"https://api.github.com/users/pietroalbini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pietroalbini/subscriptions","organizations_url":"https://api.github.com/users/pietroalbini/orgs","repos_url":"https://api.github.com/users/pietroalbini/repos","events_url":"https://api.github.com/users/pietroalbini/events{/privacy}","received_events_url":"https://api.github.com/users/pietroalbini/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2018-06-07T14:50:53Z","updated_at":"2018-06-08T02:01:15Z","closed_at":"2018-06-08T02:01:15Z","author_association":"CONTRIBUTOR","body":"There has been a lot of discussion about the proper semantics of `$($x:tt)?*`. Ideally, `?` would serve as the \"optional\" operator there, but that is not the semantics in stable Rust, where it serves as a separator. https://github.com/rust-lang/rust/pull/49719 did a crater run which found no crates relying on the current behavior; however, that PR was merged without an official decision from the lang team on whether to change the behavior. We should revert that PR and then make an official decision (for example, one proposal implemented in https://github.com/rust-lang/rust/pull/51336 is to change the behavior in the edition, though in that case we probably want a migration lint etc).\r\n\r\n@pietroalbini is going to prepare the revert PR and backport\r\n\r\n( cc @mark-i-m, @sgrif, @petrochenkov @alexreg @durka )","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51381","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51381/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51381/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51381/events","html_url":"https://github.com/rust-lang/rust/issues/51381","id":329641064,"node_id":"MDU6SXNzdWUzMjk2NDEwNjQ=","number":51381,"title":"Cross compiling for Raspberry Pi doesn't work","user":{"login":"Boscop","id":535593,"node_id":"MDQ6VXNlcjUzNTU5Mw==","avatar_url":"https://avatars1.githubusercontent.com/u/535593?v=4","gravatar_id":"","url":"https://api.github.com/users/Boscop","html_url":"https://github.com/Boscop","followers_url":"https://api.github.com/users/Boscop/followers","following_url":"https://api.github.com/users/Boscop/following{/other_user}","gists_url":"https://api.github.com/users/Boscop/gists{/gist_id}","starred_url":"https://api.github.com/users/Boscop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Boscop/subscriptions","organizations_url":"https://api.github.com/users/Boscop/orgs","repos_url":"https://api.github.com/users/Boscop/repos","events_url":"https://api.github.com/users/Boscop/events{/privacy}","received_events_url":"https://api.github.com/users/Boscop/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-06-05T22:01:35Z","updated_at":"2018-06-06T12:09:01Z","closed_at":"2018-06-05T22:55:40Z","author_association":"NONE","body":"I tested cross compiling for Raspberry Pi with a helloworld, it worked, but for my real program it doesn't work:\r\n```\r\n$ cargo b --release --target=armv7-unknown-linux-gnueabihf\r\n   Compiling libc v0.2.36\r\n   Compiling cfg-if v0.1.2\r\n   Compiling byteorder v1.2.1\r\n   Compiling lazy_static v1.0.0\r\n   Compiling num-traits v0.1.42\r\n   Compiling lazycell v0.6.0\r\n   Compiling utf8-ranges v1.0.0\r\n   Compiling quote v0.3.15\r\nerror[E0463]: can't find crate for `compiler_builtins`\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0463`.\r\nerror: Could not compile `cfg-if`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror[E0463]: can't find crate for `std`\r\n  |\r\n  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0463`.\r\nerror[E0463]: can't find crate for `std`\r\n  |\r\n  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0463`.\r\nerror: Could not compile `libc`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: Could not compile `lazycell`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror[E0463]: can't find crate for `std`\r\n  |\r\n  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0463`.\r\nerror[E0463]: can't find crate for `std`\r\n  |\r\n  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed\r\n\r\nerror: Could not compile `byteorder`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0463`.\r\nerror: Could not compile `num-traits`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: build failed\r\n```\r\nThe target **is** installed. How can I make it work? :)","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51376","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51376/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51376/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51376/events","html_url":"https://github.com/rust-lang/rust/issues/51376","id":329607676,"node_id":"MDU6SXNzdWUzMjk2MDc2NzY=","number":51376,"title":"No error on malformed repr attributes","user":{"login":"Mark-Simulacrum","id":5047365,"node_id":"MDQ6VXNlcjUwNDczNjU=","avatar_url":"https://avatars0.githubusercontent.com/u/5047365?v=4","gravatar_id":"","url":"https://api.github.com/users/Mark-Simulacrum","html_url":"https://github.com/Mark-Simulacrum","followers_url":"https://api.github.com/users/Mark-Simulacrum/followers","following_url":"https://api.github.com/users/Mark-Simulacrum/following{/other_user}","gists_url":"https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}","starred_url":"https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mark-Simulacrum/subscriptions","organizations_url":"https://api.github.com/users/Mark-Simulacrum/orgs","repos_url":"https://api.github.com/users/Mark-Simulacrum/repos","events_url":"https://api.github.com/users/Mark-Simulacrum/events{/privacy}","received_events_url":"https://api.github.com/users/Mark-Simulacrum/received_events","type":"User","site_admin":false},"labels":[{"id":235791,"node_id":"MDU6TGFiZWwyMzU3OTE=","url":"https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics","name":"A-diagnostics","color":"d7e102","default":false},{"id":211668100,"node_id":"MDU6TGFiZWwyMTE2NjgxMDA=","url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-06-05T20:13:11Z","updated_at":"2018-06-09T01:33:03Z","closed_at":"2018-06-09T01:33:03Z","author_association":"CONTRIBUTOR","body":"```\r\n#[repr]\r\nstruct Foo(u16);\r\n\r\nfn main() {}\r\n```\r\n\r\nThis compiles without any error, including one about the attribute not being used, even though there should be such a warning. ","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51374","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51374/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51374/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51374/events","html_url":"https://github.com/rust-lang/rust/issues/51374","id":329558314,"node_id":"MDU6SXNzdWUzMjk1NTgzMTQ=","number":51374,"title":"Compiler keeps running after it emits a compilation error","user":{"login":"DutchGhost","id":25501014,"node_id":"MDQ6VXNlcjI1NTAxMDE0","avatar_url":"https://avatars2.githubusercontent.com/u/25501014?v=4","gravatar_id":"","url":"https://api.github.com/users/DutchGhost","html_url":"https://github.com/DutchGhost","followers_url":"https://api.github.com/users/DutchGhost/followers","following_url":"https://api.github.com/users/DutchGhost/following{/other_user}","gists_url":"https://api.github.com/users/DutchGhost/gists{/gist_id}","starred_url":"https://api.github.com/users/DutchGhost/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DutchGhost/subscriptions","organizations_url":"https://api.github.com/users/DutchGhost/orgs","repos_url":"https://api.github.com/users/DutchGhost/repos","events_url":"https://api.github.com/users/DutchGhost/events{/privacy}","received_events_url":"https://api.github.com/users/DutchGhost/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-06-05T17:42:38Z","updated_at":"2018-06-05T21:51:48Z","closed_at":"2018-06-05T21:51:48Z","author_association":"NONE","body":"The following code does not compile, however the compiler keeps running after emitting a message it could not compile:\r\nhttps://play.rust-lang.org/?gist=7dc801439d22e1d11c9025092d757099&version=stable&mode=debug\r\n```Rust\r\nconst q: () = 'a: while (continue 'a != break 'a) {};\r\n\r\nfn main() {\r\n    let q: ();\r\n}\r\n```\r\n\r\nThe error is:\r\n```\r\n|                                         ^^^^^^^^\r\n  |\r\n  = note: #[warn(unreachable_code)] on by default\r\n\r\nerror[E0019]: constant contains unimplemented expression type\r\n --> src/main.rs:1:26\r\n  |\r\n1 | const q: () = 'a: while (continue 'a != break 'a) {};\r\n  |                          ^^^^^^^^^^^\r\n\r\nwarning: Constant evaluating a complex constant, this might take some time\r\n --> src/main.rs:1:1\r\n  |\r\n1 | const q: () = 'a: while (continue 'a != break 'a) {};\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nwhen `let q: ();` is removed, it just fails to compile, and rustc stops running.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51373","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51373/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51373/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51373/events","html_url":"https://github.com/rust-lang/rust/issues/51373","id":329543692,"node_id":"MDU6SXNzdWUzMjk1NDM2OTI=","number":51373,"title":"Unexpected behaviour change when forgetting an element during an iteration vs. iterating again and forgetting","user":{"login":"jdm","id":27658,"node_id":"MDQ6VXNlcjI3NjU4","avatar_url":"https://avatars1.githubusercontent.com/u/27658?v=4","gravatar_id":"","url":"https://api.github.com/users/jdm","html_url":"https://github.com/jdm","followers_url":"https://api.github.com/users/jdm/followers","following_url":"https://api.github.com/users/jdm/following{/other_user}","gists_url":"https://api.github.com/users/jdm/gists{/gist_id}","starred_url":"https://api.github.com/users/jdm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdm/subscriptions","organizations_url":"https://api.github.com/users/jdm/orgs","repos_url":"https://api.github.com/users/jdm/repos","events_url":"https://api.github.com/users/jdm/events{/privacy}","received_events_url":"https://api.github.com/users/jdm/received_events","type":"User","site_admin":false},"labels":[{"id":147085028,"node_id":"MDU6TGFiZWwxNDcwODUwMjg=","url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly","name":"regression-from-stable-to-nightly","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-05T16:58:21Z","updated_at":"2018-06-05T17:39:11Z","closed_at":"2018-06-05T16:59:19Z","author_association":"CONTRIBUTOR","body":"I have an automated test for ipc-channel that demonstrates a regression in rustc. The change that exposes it is this:\r\n```diff\r\ndiff --git a/src/platform/macos/mod.rs b/src/platform/macos/mod.rs\r\nindex 693496e..78dca7e 100644\r\n--- a/src/platform/macos/mod.rs\r\n+++ b/src/platform/macos/mod.rs\r\n@@ -457,16 +457,18 @@ impl OsIpcSender {\r\n\r\n             let mut shared_memory_descriptor_dest =\r\n                 port_descriptor_dest as *mut mach_msg_ool_descriptor_t;\r\n-            for shared_memory_region in shared_memory_regions.into_iter() {\r\n+            for shared_memory_region in shared_memory_regions.iter() {\r\n                 (*shared_memory_descriptor_dest).address =\r\n                     shared_memory_region.as_ptr() as *const c_void as *mut c_void;\r\n                 (*shared_memory_descriptor_dest).size = shared_memory_region.len() as u32;\r\n                 (*shared_memory_descriptor_dest).deallocate = 1;\r\n                 (*shared_memory_descriptor_dest).copy = MACH_MSG_VIRTUAL_COPY as u8;\r\n                 (*shared_memory_descriptor_dest).type_ = MACH_MSG_OOL_DESCRIPTOR;\r\n-                mem::forget(shared_memory_region);\r\n                 shared_memory_descriptor_dest = shared_memory_descriptor_dest.offset(1);\r\n             }\r\n+            for shared_memory_region in shared_memory_regions {\r\n+                mem::forget(shared_memory_region);\r\n+            }\r\n\r\n             let os_result = mach_sys::mach_msg(message as *mut _,\r\n                                                MACH_SEND_MSG,\r\ndiff --git a/src/test.rs b/src/test.rs\r\n```\r\nThe behaviour before and after the change should be identical, yet the automated test that exercises this starts panicking between the 2-10 and 2-11 rustc nightlies when run in release mode.\r\n\r\nTo reproduce the problem, clone [this branch](https://github.com/servo/ipc-channel/tree/mac-ool-rustc-bug) and run `cargo +nightly-2018-02-10 test --release rustc_bug`, then compare it against `cargo +nightly-2018-02-11 test --release rustc_bug`.\r\n\r\nThe regression range for this is https://github.com/rust-lang/rust/compare/3bcda48a3...45fba43b3.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51371","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51371/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51371/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51371/events","html_u
8000
rl":"https://github.com/rust-lang/rust/issues/51371","id":329535705,"node_id":"MDU6SXNzdWUzMjk1MzU3MDU=","number":51371,"title":"Impl enum variants","user":{"login":"hkcorac","id":38052255,"node_id":"MDQ6VXNlcjM4MDUyMjU1","avatar_url":"https://avatars1.githubusercontent.com/u/38052255?v=4","gravatar_id":"","url":"https://api.github.com/users/hkcorac","html_url":"https://github.com/hkcorac","followers_url":"https://api.github.com/users/hkcorac/followers","following_url":"https://api.github.com/users/hkcorac/following{/other_user}","gists_url":"https://api.github.com/users/hkcorac/gists{/gist_id}","starred_url":"https://api.github.com/users/hkcorac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hkcorac/subscriptions","organizations_url":"https://api.github.com/users/hkcorac/orgs","repos_url":"https://api.github.com/users/hkcorac/repos","events_url":"https://api.github.com/users/hkcorac/events{/privacy}","received_events_url":"https://api.github.com/users/hkcorac/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-05T16:35:05Z","updated_at":"2018-06-08T17:01:02Z","closed_at":"2018-06-08T16:07:33Z","author_association":"NONE","body":"Hi,\r\n\r\nTo use generics in collections, I have to wrap objects inside `Box`. Later to get back the concrete types, I can use `Any::downcast_ref()`. However that function can't be used with `match`.\r\n\r\nSo currently I'm using this way:\r\n\r\n```rust\r\nenum Component {\r\n    Button(Button),\r\n    Label(Label),\r\n}\r\n\r\nstruct Button;\r\nstruct Label;\r\n```\r\n\r\n`Component` can be easily put in a collection. And it's more convenient when using with `match`. However as you can see, it doubles the names.\r\n\r\nMay I ask if you could consider adding `impl` for enum variants? So above code can be refactored like this:\r\n\r\n```rust\r\n// I added some more fields for the next match example\r\nenum Component {\r\n    Button { width: u32, height: u32, },\r\n    Label { visible: bool, },\r\n}\r\n\r\nimpl Component::Button {\r\n    fn desc(&self) -> String {\r\n        format!(\"Button size: {}x{}\", self.width, self.height)\r\n    }\r\n}\r\nimpl Component::Label {\r\n    fn other_desc(&self) -> String {\r\n        format!(\"Label is visible: {}\", self.visible)\r\n    }\r\n}\r\n\r\nmatch component {\r\n    Component::Button as b => ...,\r\n    Component::Label as l => ...,\r\n}\r\n```\r\n\r\nCurrently I can't think of how docs work. I'm not sure if docs can apply to `impl` block.\r\n\r\nI really think this is a great feature...\r\n\r\nThank you,\r\n\r\n---\r\n\r\n**Edited**\r\n\r\nUpdated examples.\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51365","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51365/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51365/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51365/events","html_url":"https://github.com/rust-lang/rust/issues/51365","id":329364918,"node_id":"MDU6SXNzdWUzMjkzNjQ5MTg=","number":51365,"title":"panic_implementation: All closures within body of panic implementation are forced to have the panic implementation signature","user":{"login":"Vurich","id":29733394,"node_id":"MDQ6VXNlcjI5NzMzMzk0","avatar_url":"https://avatars0.githubusercontent.com/u/29733394?v=4","gravatar_id":"","url":"https://api.github.com/users/Vurich","html_url":"https://github.com/Vurich","followers_url":"https://api.github.com/users/Vurich/followers","following_url":"https://api.github.com/users/Vurich/following{/other_user}","gists_url":"https://api.github.com/users/Vurich/gists{/gist_id}","starred_url":"https://api.github.com/users/Vurich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Vurich/subscriptions","organizations_url":"https://api.github.com/users/Vurich/orgs","repos_url":"https://api.github.com/users/Vurich/repos","events_url":"https://api.github.com/users/Vurich/events{/privacy}","received_events_url":"https://api.github.com/users/Vurich/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-06-05T09:06:04Z","updated_at":"2018-06-08T02:01:10Z","closed_at":"2018-06-08T02:01:10Z","author_association":"NONE","body":"Minimal reproduction:\r\n\r\n```rust\r\n#![no_std]\r\n#![feature(panic_implementation)]\r\n#![feature(core_intrinsics)]\r\n#![feature(lang_items)]\r\n#![feature(start)]\r\n\r\n#[no_mangle]\r\n#[panic_implementation]\r\npub fn panic_fmt(info: &::core::panic::PanicInfo) -> ! {\r\n    let foo: fn(usize) -> usize = |i| i + 1;\r\n    unsafe {\r\n        ::core::intrinsics::abort()\r\n    }\r\n}\r\n\r\n#[lang = \"eh_personality\"]\r\nextern \"C\" fn eh_personality() {}\r\n\r\n#[lang = \"oom\"]\r\n#[no_mangle]\r\npub extern fn oom() -> ! {\r\n    unsafe {\r\n        ::core::intrinsics::abort()\r\n    }\r\n}\r\n\r\n#[start]\r\nfn main(argc: isize, argv: *const *const u8) -> isize {\r\n    0\r\n}\r\n```\r\n\r\nThis produces the error:\r\n\r\n```\r\nerror: return type should be `!`\r\n --> src/main.rs:9:39\r\n  |\r\n9 |     let foo: fn(usize) -> usize = |i| i + 1;\r\n  |                                       ^\r\n\r\nerror: argument should be `&PanicInfo`\r\n --> src/main.rs:9:37\r\n  |\r\n9 |     let foo: fn(usize) -> usize = |i| i + 1;\r\n  |                                     ^\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51352","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51352/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51352/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51352/events","html_url":"https://github.com/rust-lang/rust/issues/51352","id":329161973,"node_id":"MDU6SXNzdWUzMjkxNjE5NzM=","number":51352,"title":"Allocation_interner is not used","user":{"login":"bjorn3","id":17426603,"node_id":"MDQ6VXNlcjE3NDI2NjAz","avatar_url":"https://avatars1.githubusercontent.com/u/17426603?v=4","gravatar_id":"","url":"https://api.github.com/users/bjorn3","html_url":"https://github.com/bjorn3","followers_url":"https://api.github.com/users/bjorn3/followers","following_url":"https://api.github.com/users/bjorn3/following{/other_user}","gists_url":"https://api.github.com/users/bjorn3/gists{/gist_id}","starred_url":"https://api.github.com/users/bjorn3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bjorn3/subscriptions","organizations_url":"https://api.github.com/users/bjorn3/orgs","repos_url":"https://api.github.com/users/bjorn3/repos","events_url":"https://api.github.com/users/bjorn3/events{/privacy}","received_events_url":"https://api.github.com/users/bjorn3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-04T18:13:23Z","updated_at":"2018-06-05T06:13:17Z","closed_at":"2018-06-05T06:13:17Z","author_association":"CONTRIBUTOR","body":"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/context.rs#L922","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51338","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51338/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51338/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51338/events","html_url":"https://github.com/rust-lang/rust/issues/51338","id":328929220,"node_id":"MDU6SXNzdWUzMjg5MjkyMjA=","number":51338,"title":"`assert!(false, \"{}\")` compiles and prints `{}`","user":{"login":"rocallahan","id":296135,"node_id":"MDQ6VXNlcjI5NjEzNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/296135?v=4","gravatar_id":"","url":"https://api.github.com/users/rocallahan","html_url":"https://github.com/rocallahan","followers_url":"https://api.github.com/users/rocallahan/followers","following_url":"https://api.github.com/users/rocallahan/following{/other_user}","gists_url":"https://api.github.com/users/rocallahan/gists{/gist_id}","starred_url":"https://api.github.com/users/rocallahan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rocallahan/subscriptions","organizations_url":"https://api.github.com/users/rocallahan/orgs","repos_url":"https://api.github.com/users/rocallahan/repos","events_url":"https://api.github.com/users/rocallahan/events{/privacy}","received_events_url":"https://api.github.com/users/rocallahan/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-06-04T06:52:08Z","updated_at":"2018-06-04T14:09:51Z","closed_at":"2018-06-04T14:09:50Z","author_association":"NONE","body":"```\r\nassert!(false, \"{}\")\r\n```\r\nprints `{}` but\r\n```\r\nassert!(false, \"{}\", 77);\r\n```\r\nprints `77`. Given that the second parameter is interpreted as a format string, shouldn't it fail to compile if you don't provide enough parameters?","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51337","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51337/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51337/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51337/events","html_url":"https://github.com/rust-lang/rust/issues/51337","id":328900852,"node_id":"MDU6SXNzdWUzMjg5MDA4NTI=","number":51337,"title":"Add std::boxed::Box::downcast_ref()","user":{"login":"hkcorac","id":38052255,"node_id":"MDQ6VXNlcjM4MDUyMjU1","avatar_url":"https://avatars1.githubusercontent.com/u/38052255?v=4","gravatar_id":"","url":"https://api.github.com/users/hkcorac","html_url":"https://github.com/hkcorac","followers_url":"https://api.github.com/users/hkcorac/followers","following_url":"https://api.github.com/users/hkcorac/following{/other_user}","gists_url":"https://api.github.com/users/hkcorac/gists{/gist_id}","starred_url":"https://api.github.com/users/hkcorac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hkcorac/subscriptions","organizations_url":"https://api.github.com/users/hkcorac/orgs","repos_url":"https://api.github.com/users/hkcorac/repos","events_url":"https://api.github.com/users/hkcorac/events{/privacy}","received_events_url":"https://api.github.com/users/hkcorac/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-04T04:00:03Z","updated_at":"2018-06-04T06:55:12Z","closed_at":"2018-06-04T06:55:11Z","author_association":"NONE","body":"Hi,\r\n\r\nCurrently `Box` has this:\r\n\r\n```rust\r\npub fn downcast<T>(self) -> Result<Box<T>, Box<Any + 'static>> where T: Any\r\n```\r\n\r\nCould you consider adding `::downcast_ref()`? Sometimes I don't want to consume the box.\r\n\r\nFor example:\r\n\r\n```rust\r\nlet components: Vec<Box<Component>> = ...\r\nfor c in components.iter() {\r\n    if let Some(ref button) = c.downcast_ref::<Button>() { ... }\r\n}\r\n// The components would be used again later,\r\n// so consuming them is not a solution\r\n```\r\n\r\nThank you,","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51327","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51327/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51327/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51327/events","html_url":"https://github.com/rust-lang/rust/issues/51327","id":328841369,"node_id":"MDU6SXNzdWUzMjg4NDEzNjk=","number":51327,"title":"Rustdoc: File random overwrite each other on Windows because of case insensitive fs.","user":{"login":"crlf0710","id":451806,"node_id":"MDQ6VXNlcjQ1MTgwNg==","avatar_url":"https://avatars3.githubusercontent.com/u/451806?v=4","gravatar_id":"","url":"https://api.github.com/users/crlf0710","html_url":"https://github.com/crlf0710","followers_url":"https://api.github.com/users/crlf0710/followers","following_url":"https://api.github.com/users/crlf0710/following{/other_user}","gists_url":"https://api.github.com/users/crlf0710/gists{/gist_id}","starred_url":"https://api.github.com/users/crlf0710/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crlf0710/subscriptions","organizations_url":"https://api.github.com/users/crlf0710/orgs","repos_url":"https://api.github.com/users/crlf0710/repos","events_url":"https://api.github.com/users/crlf0710/events{/privacy}","received_events_url":"https://api.github.com/users/crlf0710/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-03T16:18:48Z","updated_at":"2018-06-03T16:39:23Z","closed_at":"2018-06-03T16:39:23Z","author_association":"CONTRIBUTOR","body":"Minimal case;\r\n\r\n````\r\n#![allow(non_camel_case_types)]\r\n\r\npub struct S;\r\n\r\npub struct s;\r\n````\r\n\r\nSorry, maybe this will lead to ugly hacks, however, I believe some action should be taken.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51309","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51309/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51309/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51309/events","html_url":"https://github.com/rust-lang/rust/issues/51309","id":328766562,"node_id":"MDU6SXNzdWUzMjg3NjY1NjI=","number":51309,"title":"Failed to compile (signal: 9, SIGKILL: kill)","user":{"login":"TomasHubelbauer","id":6831144,"node_id":"MDQ6VXNlcjY4MzExNDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/6831144?v=4","gravatar_id":"","url":"https://api.github.com/users/TomasHubelbauer","html_url":"https://github.com/TomasHubelbauer","followers_url":"https://api.github.com/users/TomasHubelbauer/followers","following_url":"https://api.github.com/users/TomasHubelbauer/following{/other_user}","gists_url":"https://api.github.com/users/TomasHubelbauer/gists{/gist_id}","starred_url":"https://api.github.com/users/TomasHubelbauer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TomasHubelbauer/subscriptions","organizations_url":"https://api.github.com/users/TomasHubelbauer/orgs","repos_url":"https://api.github.com/users/TomasHubelbauer/repos","events_url":"https://api.github.com/users/TomasHubelbauer/events{/privacy}","received_events_url":"https://api.github.com/users/TomasHubelbauer/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-02T18:30:15Z","updated_at":"2018-06-03T12:28:20Z","closed_at":"2018-06-03T12:28:20Z","author_association":"CONTRIBUTOR","body":"Hey, I set up a new Cargo project using Actix-web and its verbatim example code. This meant adding an `actix-web` dependency and replacing the text in `src/main.rs`. I did this on a fresh Ubuntu 16.04 x64 install where only `ca-certificates` and `build-essential` were installed before Rust (from Rustup).\r\n\r\nWhen I went to compile the project using `cargo run`, the build failed while compiling `http`. I've used `--verbose` to see what was up and got this:\r\n\r\n```\r\n> rustc --crate-name http /root/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.1.5/src/lib.rs --crate-type lib --emit=dep-info,link -C debuginfo=2 -C metadata=c5fc1c2aeed1cb92 -C extra-filename=-c5fc1c2aeed1cb92 --out-dir /root/www/target/debug/deps -L dependency=/root/www/target/debug/deps --extern fnv=/root/www/target/debug/deps/libfnv-7a9f4c1f096c756f.rlib --extern bytes=/root/www/target/debug/deps/libbytes-5673bf19e74e48d8.rlib --cap-lints allow\r\nKilled.\r\n```\r\n\r\nI filed an issue for this in `http` hyperium/http#207, but was advised to file here as it may be a compiler bug? So here goes. Anything I can do to help debug further I will. I am not that familiar with Unix debuggers, but I can provide some traces and stuff like that if told how.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51300","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51300/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51300/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51300/events","html_url":"https://github.com/rust-lang/rust/issues/51300","id":328740628,"node_id":"MDU6SXNzdWUzMjg3NDA2Mjg=","number":51300,"title":"Constant evaluation error: attempted to read undefined bytes","user":{"login":"Thinkofname","id":774399,"node_id":"MDQ6VXNlcjc3NDM5OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/774399?v=4","gravatar_id":"","url":"https://api.github.com/users/Thinkofname","html_url":"https://github.com/Thinkofname","followers_url":"https://api.github.com/users/Thinkofname/followers","following_url":"https://api.github.com/users/Thinkofname/following{/other_user}","gists_url":"https://api.github.com/users/Thinkofname/gists{/gist_id}","starred_url":"https://api.github.com/users/Thinkofname/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Thinkofname/subscriptions","organizations_url":"https://api.github.com/users/Thinkofname/orgs","repos_url":"https://api.github.com/users/Thinkofname/repos","events_url":"https://api.github.com/users/Thinkofname/events{/privacy}","received_events_url":"https://api.github.com/users/Thinkofname/received_events","type":"User","site_admin":false},"labels":[{"id":900795185,"node_id":"MDU6TGFiZWw5MDA3OTUxODU=","url":"https://api.github.com/repos/rust-lang/rust/labels/A-const-eval","name":"A-const-eval","color":"d7e102","default":false},{"id":650731663,"node_id":"MDU6TGFiZWw2NTA3MzE2NjM=","url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":147085028,"node_id":"MDU6TGFiZWwxNDcwODUwMjg=","url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly","name":"regression-from-stable-to-nightly","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":{"login":"oli-obk","id":332036,"node_id":"MDQ6VXNlcjMzMjAzNg==","avatar_url":"https://avatars2.githubusercontent.com/u/332036?v=4","gravatar_id":"","url":"https://api.github.com/users/oli-obk","html_url":"https://github.com/oli-obk","followers_url":"https://api.github.com/users/oli-obk/followers","following_url":"https://api.github.com/users/oli-obk/following{/other_user}","gists_url":"https://api.github.com/users/oli-obk/gists{/gist_id}","starred_url":"https://api.github.com/users/oli-obk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oli-obk/subscriptions","organizations_url":"https://api.github.com/users/oli-obk/orgs","repos_url":"https://api.github.com/users/oli-obk/repos","events_url":"https://api.github.com/users/oli-obk/events{/privacy}","received_events_url":"https://api.github.com/users/oli-obk/received_events","type":"User","site_admin":false},"assignees":[{"login":"oli-obk","id":332036,"node_id":"MDQ6VXNlcjMzMjAzNg==","avatar_url":"https://avatars2.githubusercontent.com/u/332036?v=4","gravatar_id":"","url":"https://api.github.com/users/oli-obk","html_url":"https://github.com/oli-obk","followers_url":"https://api.github.com/users/oli-obk/followers","following_url":"https://api.github.com/users/oli-obk/following{/other_user}","gists_url":"https://api.github.com/users/oli-obk/gists{/gist_id}","starred_url":"https://api.github.com/users/oli-obk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oli-obk/subscriptions","organizations_url":"https://api.github.com/users/oli-obk/orgs","repos_url":"https://api.github.com/users/oli-obk/repos","events_url":"https://api.github.com/users/oli-obk/events{/privacy}","received_events_url":"https://api.github.com/users/oli-obk/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2018-06-02T12:34:36Z","updated_at":"2018-06-05T01:46:55Z","closed_at":"2018-06-05T01:46:55Z","author_association":"NONE","body":"I saw that #51086 was closed when #51225 was merged so I thought it would fix the same error on my own code as well however as of nightly: `rustc 1.28.0-nightly (aa094a43c 2018-06-01)` it still happens.\r\n\r\nCode:\r\n```rust\r\n#[derive(PartialEq, Eq, Clone, Copy)]\r\npub struct Stat {\r\n    pub id: u8,\r\n    pub index: usize,\r\n}\r\n\r\nimpl Stat {\r\n    pub const STUDENT_HAPPINESS: Stat = Stat{\r\n        id: 0,\r\n        index: 0,\r\n    };\r\n    pub const STUDENT_HUNGER: Stat = Stat{\r\n        id: 0,\r\n        index: Self::STUDENT_HAPPINESS.index + 1,\r\n    };\r\n\r\n}\r\n\r\npub fn from_index(id: u8, index: usize) -> Option<Stat> {\r\n    let stat = Stat{id, index};\r\n    match stat {\r\n        Stat::STUDENT_HAPPINESS => Some(Stat::STUDENT_HAPPINESS),\r\n        Stat::STUDENT_HUNGER => Some(Stat::STUDENT_HUNGER),\r\n        _ => None,\r\n    }\r\n}\r\n\r\nfn main() { }\r\n\r\n```\r\nPlayground: http://play.rust-lang.org/?gist=cf51c77c20f06ca15f1dc2cc4fa779b0&version=nightly&mode=debug\r\n\r\nFrom what I can tell its an alignment issue because changing id from a `u8` to a `u64` fixes the issue.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51293","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51293/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51293/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51293/events","html_url":"https://github.com/rust-lang/rust/issues/51293","id":328730206,"node_id":"MDU6SXNzdWUzMjg3MzAyMDY=","number":51293,"title":"Can i use match field name in struct?","user":{"login":"fundon","id":27926,"node_id":"MDQ6VXNlcjI3OTI2","avatar_url":"https://avatars1.githubusercontent.com/u/27926?v=4","gravatar_id":"","url":"https://api.github.com/users/fundon","html_url":"https://github.com/fundon","followers_url":"https://api.github.com/users/fundon/followers","following_url":"https://api.github.com/users/fundon/following{/other_user}","gists_url":"https://api.github.com/users/fundon/gists{/gist_id}","starred_url":"https://api.github.com/users/fundon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fundon/subscriptions","organizations_url":"https://api.github.com/users/fundon/orgs","repos_url":"https://api.github.com/users/fundon/repos","events_url":"https://api.github.com/users/fundon/events{/privacy}","received_events_url":"https://api.github.com/users/fundon/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-02T09:41:08Z","updated_at":"2018-06-02T11:12:58Z","closed_at":"2018-06-02T11:12:58Z","author_association":"NONE","body":"```rust\r\nstruct WorldCup {\r\n   match: String,\r\n}\r\n```\r\n\r\nerror\r\n```\r\n^^^^^ expected identifier, found keyword\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51292","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51292/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51292/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51292/events","html_url":"https://github.com/rust-lang/rust/issues/51292","id":328725346,"node_id":"MDU6SXNzdWUzMjg3MjUzNDY=","number":51292,"title":"Deprecate `ok_or` method","user":{"login":"Pzixel","id":11201122,"node_id":"MDQ6VXNlcjExMjAxMTIy","avatar_url":"https://avatars3.githubusercontent.com/u/11201122?v=4","gravatar_id":"","url":"https://api.github.com/users/Pzixel","html_url":"https://github.com/Pzixel","followers_url":"https://api.github.com/users/Pzixel/followers","following_url":"https://api.github.com/users/Pzixel/following{/other_user}","gists_url":"https://api.github.com/users/Pzixel/gists{/gist_id}","starred_url":"https://api.github.com/users/Pzixel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pzixel/subscriptions","organizations_url":"https://api.github.com/users/Pzixel/orgs","repos_url":"https://api.github.com/users/Pzixel/repos","events_url":"https://api.github.com/users/Pzixel/events{/privacy}","received_events_url":"https://api.github.com/users/Pzixel/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-06-02T08:17:11Z","updated_at":"2018-06-02T14:33:53Z","closed_at":"2018-06-02T14:33:53Z","author_association":"NONE","body":"There is plenty of issues when people unintendely use the eager version of mapping result method just because it saves some typing. It results in [confusion among the community](https://users.rust-lang.org/t/performance-impact-of-result-vs-option/17783) as well as [performance issues in compiler](https://github.com/rust-lang/rust/pull/50051).\r\n\r\nRust is going into the new epoch, so it's a good time to resolve this mistake.\r\n\r\nThe proposal is:\r\n\r\n1. Deprecate `ok_or` method on `Result` type. We already have a lint in clippy that suggest to replace it with `ok_or_else` if any computations are done there. It's a good signal that it shall be done. On the other hand, `or_or_else` with constant value lambda would be always inlined and thus have same performance as before.\r\n2. _(Optional)_ Remove `ok_or`. Replace it with `ok_or_else` implementation. `ok_or_else` could be a deprecated alias for `ok_or` with lambda as parameter.\r\n\r\nThe phase 2 looks a bit confusing, but as said it would save some typing. Or it could be done in one big step. It would break the existing code, however it's an ok breakage as it's easy to fix it automatically (via just `grep` replace). We are already going to break some code with `dyn Trait` so it's not new for us.\r\n\r\nThis probably requires an RFC, I didn't do one yet, but I think we may collect some feedback here. Do you feel that compiler is smart enough to inline constant functions and we can remove some confusion and possible bottlenecks? Do you accept to type a bit more (`else(||` part) or it's too high cost (among others like deprecation and code breakage)?","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51289","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51289/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51289/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51289/events","html_url":"https://github.com/rust-lang/rust/issues/51289","id":328712569,"node_id":"MDU6SXNzdWUzMjg3MTI1Njk=","number":51289,"title":"FAQ on \"How do I return a closure from a function?\" no longer correct because impl Fn","user":{"login":"FranklinChen","id":134491,"node_id":"MDQ6VXNlcjEzNDQ5MQ==","avatar_url":"https://avatars1.githubusercontent.com/u/134491?v=4","gravatar_id":"","url":"https://api.github.com/users/FranklinChen","html_url":"https://github.com/FranklinChen","followers_url":"https://api.github.com/users/FranklinChen/followers","following_url":"https://api.github.com/users/FranklinChen/following{/other_user}","gists_url":"https://api.github.com/users/FranklinChen/gists{/gist_id}","starred_url":"https://api.github.com/users/FranklinChen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FranklinChen/subscriptions","organizations_url":"https://api.github.com/users/FranklinChen/orgs","repos_url":"https://api.github.com/users/FranklinChen/repos","events_url":"https://api.github.com/users/FranklinChen/events{/privacy}","received_events_url":"https://api.github.com/users/FranklinChen/received_events","type":"User","site_admin":false},"labels":[{"id":431251592,"node_id":"MDU6TGFiZWw0MzEyNTE1OTI=","url":"https://api.github.com/repos/rust-lang/rust/labels/T-doc","name":"T-doc","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-02T04:35:12Z","updated_at":"2018-06-03T21:11:43Z","closed_at":"2018-06-03T21:11:42Z","author_association":"CONTRIBUTOR","body":"https://www.rust-lang.org/en-US/faq.html#how-do-i-return-a-closure-from-a-function is no longer correct because now it is possible to return a closure without boxing it thanks to returning `impl Fn`.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51279","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51279/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51279/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51279/events","html_url":"https://github.com/rust-lang/rust/issues/51279","id":328606673,"node_id":"MDU6SXNzdWUzMjg2MDY2NzM=","number":51279,"title":"Disallow `cfg` attribute (maybe others) on generic parameters","user":{"login":"Havvy","id":731722,"node_id":"MDQ6VXNlcjczMTcyMg==","avatar_url":"https://avatars0.githubusercontent.com/u/731722?v=4","gravatar_id":"","url":"https://api.github.com/users/Havvy","html_url":"https://github.com/Havvy","followers_url":"https://api.github.com/users/Havvy/followers","following_url":"https://api.github.com/users/Havvy/following{/other_user}","gists_url":"https://api.github.com/users/Havvy/gists{/gist_id}","starred_url":"https://api.github.com/users/Havvy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Havvy/subscriptions","organizations_url":"https://api.github.com/users/Havvy/orgs","repos_url":"https://api.github.com/users/Havvy/repos","events_url":"https://api.github.com/users/Havvy/events{/privacy}","received_events_url":"https://api.github.com/users/Havvy/received_events","type":"User","site_admin":false},"labels":[{"id":234948,"node_id":"MDU6TGFiZWwyMzQ5NDg=","url":"https://api.github.com/repos/rust-lang/rust/labels/A-attributes","name":"A-attributes","color":"d7e102","default":false},{"id":211668019,"node_id":"MDU6TGFiZWwyMTE2NjgwMTk=","url":"https://api.github.com/repos/rust-lang/rust/labels/T-lang","name":"T-lang","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-06-01T17:50:02Z","updated_at":"2018-06-08T02:01:06Z","closed_at":"2018-06-08T02:01:06Z","author_association":"CONTRIBUTOR","body":"As of 1.27, it is legal to put attributes on generic parameters. E.g. `fn foo<#[allow(dead_code)] T>(_t: T){}`, although none of the current attributes do anything. This includes attributes we may want to use in the future, such as `cfg`. To avoid doing the warning song and dance we did with `#[must_use]` on functions, we should disallow them before the feature actually stabilizes.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51273","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51273/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51273/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51273/events","html_url":"https://github.com/rust-lang/rust/issues/51273","id":328503361,"node_id":"MDU6SXNzdWUzMjg1MDMzNjE=","number":51273,"title":"When type inference depends on the content of a closure, earlier statements do not make use of this information","user":{"login":"dylanede","id":10339269,"node_id":"MDQ6VXNlcjEwMzM5MjY5","avatar_url":"https://avatars3.githubusercontent.com/u/10339269?v=4","gravatar_id":"","url":"https://api.github.com/users/dylanede","html_url":"https://github.com/dylanede","followers_url":"https://api.github.com/users/dylanede/followers","following_url":"h
679b
ttps://api.github.com/users/dylanede/following{/other_user}","gists_url":"https://api.github.com/users/dylanede/gists{/gist_id}","starred_url":"https://api.github.com/users/dylanede/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dylanede/subscriptions","organizations_url":"https://api.github.com/users/dylanede/orgs","repos_url":"https://api.github.com/users/dylanede/repos","events_url":"https://api.github.com/users/dylanede/events{/privacy}","received_events_url":"https://api.github.com/users/dylanede/received_events","type":"User","site_admin":false},"labels":[{"id":604454086,"node_id":"MDU6TGFiZWw2MDQ0NTQwODY=","url":"https://api.github.com/repos/rust-lang/rust/labels/A-inference","name":"A-inference","color":"d7e102","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-06-01T12:35:49Z","updated_at":"2018-06-01T18:48:09Z","closed_at":"2018-06-01T15:22:36Z","author_association":"CONTRIBUTOR","body":"Minimal example:\r\n\r\n```rust\r\nfn main() {\r\n    // Behaviour does not appear linked to the use of unimplemented!()\r\n    let x = unimplemented!();\r\n\r\n    // Move the definition of g above this line to get this to compile\r\n    x.0; // E0282: cannot infer type for `_`\r\n    let g = || {\r\n        let x: (i32, i32) = x;\r\n    };\r\n}\r\n```\r\n[playground](http://play.rust-lang.org/?gist=9990b078745e0f65827b1820940e9080&version=nightly&mode=debug)\r\n\r\nThis appears in stable, beta and nightly.\r\n\r\nThis appears to be a case where type inference should not depend on the order of these statements in the function.\r\n\r\nThis problem can be a deal-breaker when unnameable types are involved and reordering the statements isn't possible.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51271","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51271/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51271/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51271/events","html_url":"https://github.com/rust-lang/rust/issues/51271","id":328470973,"node_id":"MDU6SXNzdWUzMjg0NzA5NzM=","number":51271,"title":"Fix of a borrow checking soundness bug that exists on stable","user":{"login":"golddranks","id":2675542,"node_id":"MDQ6VXNlcjI2NzU1NDI=","avatar_url":"https://avatars1.githubusercontent.com/u/2675542?v=4","gravatar_id":"","url":"https://api.github.com/users/golddranks","html_url":"https://github.com/golddranks","followers_url":"https://api.github.com/users/golddranks/followers","following_url":"https://api.github.com/users/golddranks/following{/other_user}","gists_url":"https://api.github.com/users/golddranks/gists{/gist_id}","starred_url":"https://api.github.com/users/golddranks/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/golddranks/subscriptions","organizations_url":"https://api.github.com/users/golddranks/orgs","repos_url":"https://api.github.com/users/golddranks/repos","events_url":"https://api.github.com/users/golddranks/events{/privacy}","received_events_url":"https://api.github.com/users/golddranks/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-06-01T10:48:28Z","updated_at":"2018-06-01T15:56:36Z","closed_at":"2018-06-01T15:56:36Z","author_association":"CONTRIBUTOR","body":"My code apparently used to rely (accidentally) on a soundness bug on the borrow checker. Compile this on 1.26.1 (and 1.26) and it runs; compile on a nightly newer than `524ad9b9e 2018-05-30` and it errors. It's a good thing that this got fixed, but I couldn't find the commit that fixed it right away. Is this a known fix for a known problem?\r\n\r\nA minimized example: https://play.rust-lang.org/?gist=30a66d680ee0b69bbadb2c83f7ccb27f&version=stable&mode=debug\r\n\r\nI was able to create a segfault on 1.26.1 by mutating the borrowed value: https://play.rust-lang.org/?gist=02f748c8c4fd56af77f77961eae11d48&version=stable&mode=debug\r\n\r\n(The original code was something like this)\r\nhttps://play.rust-lang.org/?gist=d0b21febdd80775ebe280fb6e7bd5f30&version=stable&mode=debug","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51266","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51266/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51266/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51266/events","html_url":"https://github.com/rust-lang/rust/issues/51266","id":328348859,"node_id":"MDU6SXNzdWUzMjgzNDg4NTk=","number":51266,"title":"\"Could not copy\" (Operation not permitted) when compiling in a docker container","user":{"login":"mattgodbolt","id":633973,"node_id":"MDQ6VXNlcjYzMzk3Mw==","avatar_url":"https://avatars1.githubusercontent.com/u/633973?v=4","gravatar_id":"","url":"https://api.github.com/users/mattgodbolt","html_url":"https://github.com/mattgodbolt","followers_url":"https://api.github.com/users/mattgodbolt/followers","following_url":"https://api.github.com/users/mattgodbolt/following{/other_user}","gists_url":"https://api.github.com/users/mattgodbolt/gists{/gist_id}","starred_url":"https://api.github.com/users/mattgodbolt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattgodbolt/subscriptions","organizations_url":"https://api.github.com/users/mattgodbolt/orgs","repos_url":"https://api.github.com/users/mattgodbolt/repos","events_url":"https://api.github.com/users/mattgodbolt/events{/privacy}","received_events_url":"https://api.github.com/users/mattgodbolt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-06-01T01:23:41Z","updated_at":"2018-06-02T05:15:51Z","closed_at":"2018-06-02T05:15:51Z","author_association":"NONE","body":"I'm the maintainer of Compiler Explorer, and recently (in the last 2-3 days) the nightly build of Rust has started reporting an error when I try and compile using it from within a Docker container:\r\n\r\n```\r\nroot@c45dac5bb5c7:/tmp# cat > test.rs\r\npub fn square(num: i32) -> i32 {\r\n    num * num\r\n}\r\nroot@c45dac5bb5c7:/tmp# strace -f -o/tmp/moo /opt/compiler-explorer/rust-nightly/bin/rustc -C debuginfo=1 -o /tmp/moose.s --emit asm test.rs --crate-type rlib                                                     \r\nerror: could not copy \"/tmp/moose.test0.rcgu.s\" to \"/tmp/moose.s\": Operation not permitted (os error 1)\r\n\r\nerror: aborting due to previous error\r\n\r\n```\r\n\r\nThe same compile works just fine outside of a container. The `strace` call yields the problem call:\r\n\r\n```\r\n4809  stat(\"/tmp/moose.test0.rcgu.s\", {st_mode=S_IFREG|0644, st_size=3360, ...}) = 0\r\n4809  open(\"/tmp/moose.test0.rcgu.s\", O_RDONLY|O_CLOEXEC) = 5\r\n4809  open(\"/tmp/moose.s\", O_WRONLY|O_CREAT|O_TRUNC|O_CLOEXEC, 0666) = 6\r\n4809  fstat(5, {st_mode=S_IFREG|0644, st_size=3360, ...}) = 0\r\n4809  syscall_18446744073709551615(0x5, 0, 0x6, 0, 0xd20, 0x7f3200000000) = -1 (errno 1)\r\n4809  close(6)                          = 0\r\n4809  close(5)                          = 0\r\n4809  write(2, \"\\33[0m\\33[1m\\33[38;5;9merror\\33[0m\\33[0m\\33[\"..., 137) = 137\r\n4809  write(2, \"\\n\", 1)                 = 1\r\n4809  unlink(\"/tmp/moose.test0.rcgu.s\") = 0\r\n```\r\n\r\nIt seems whatever \"syscall_18446744073709551615\" is, it's getting `EPERM`.\r\n\r\nCross checking from outside a docker container:\r\n\r\n```\r\n6206  open(\"/tmp/moose.s\", O_WRONLY|O_CREAT|O_TRUNC|O_CLOEXEC, 0666) = 6\r\n6206  fstat(5, {st_mode=S_IFREG|0664, st_size=3360, ...}) = 0\r\n6206  syscall_326(0x5, 0, 0x6, 0, 0xd20, 0x7f3f00000000) = -1 (errno 38)\r\n6206  read(5, \"\\t.text\\n\\t.file\\t\\\"test0-8787f43e282\"..., 8192) = 3360\r\n6206  write(6, \"\\t.text\\n\\t.file\\t\\\"test0-8787f43e282\"..., 3360) = 3360\r\n6206  read(5, \"\", 8192)                 = 0\r\n6206  chmod(\"/tmp/moose.s\", 0100664)    = 0\r\n6206  close(6)                          = 0\r\n6206  close(5)                          = 0\r\n6206  unlink(\"/tmp/moose.test0.rcgu.s\") = 0\r\n```\r\n\r\nin this case things succeed (although the syscall_326, whatever that is still fails, but with `ENOSYS`).\r\n\r\nCan anyone shed any light on this as this is outside of my experience! As I say, it only happens on the nightly build, and it has started happening in the last day or two (e.g. sometime around 29th May 2018).\r\n\r\nI wonder if some new (unsupported on Ubuntu 16) libc function is being called, and in the docker environment `EPERM` is returned instead of `ENOSYS`, which confuses some bailout code in `rustc`?\r\n\r\nThanks in advance, Matt\r\n\r\n(See also https://github.com/mattgodbolt/compiler-explorer/issues/942 )","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51238","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51238/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51238/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51238/events","html_url":"https://github.com/rust-lang/rust/issues/51238","id":327991715,"node_id":"MDU6SXNzdWUzMjc5OTE3MTU=","number":51238,"title":"Consider providing math functions for targets without them","user":{"login":"jD91mZM2","id":12830969,"node_id":"MDQ6VXNlcjEyODMwOTY5","avatar_url":"https://avatars0.githubusercontent.com/u/12830969?v=4","gravatar_id":"","url":"https://api.github.com/users/jD91mZM2","html_url":"https://github.com/jD91mZM2","followers_url":"https://api.github.com/users/jD91mZM2/followers","following_url":"https://api.github.com/users/jD91mZM2/following{/other_user}","gists_url":"https://api.github.com/users/jD91mZM2/gists{/gist_id}","starred_url":"https://api.github.com/users/jD91mZM2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jD91mZM2/subscriptions","organizations_url":"https://api.github.com/users/jD91mZM2/orgs","repos_url":"https://api.github.com/users/jD91mZM2/repos","events_url":"https://api.github.com/users/jD91mZM2/events{/privacy}","received_events_url":"https://api.github.com/users/jD91mZM2/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-31T04:40:40Z","updated_at":"2018-06-02T14:41:41Z","closed_at":"2018-06-02T14:41:41Z","author_association":"NONE","body":"[See this stackoverflow post](https://stackoverflow.com/a/47998925/5069285)","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51234","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51234/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51234/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51234/events","html_url":"https://github.com/rust-lang/rust/issues/51234","id":327923306,"node_id":"MDU6SXNzdWUzMjc5MjMzMDY=","number":51234,"title":"Proc macro dependencies bleed into another crate's","user":{"login":"TooManyBees","id":5176286,"node_id":"MDQ6VXNlcjUxNzYyODY=","avatar_url":"https://avatars1.githubusercontent.com/u/5176286?v=4","gravatar_id":"","url":"https://api.github.com/users/TooManyBees","html_url":"https://github.com/TooManyBees","followers_url":"https://api.github.com/users/TooManyBees/followers","following_url":"https://api.github.com/users/TooManyBees/following{/other_user}","gists_url":"https://api.github.com/users/TooManyBees/gists{/gist_id}","starred_url":"https://api.github.com/users/TooManyBees/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TooManyBees/subscriptions","organizations_url":"https://api.github.com/users/TooManyBees/orgs","repos_url":"https://api.github.com/users/TooManyBees/repos","events_url":"https://api.github.com/users/TooManyBees/events{/privacy}","received_events_url":"https://api.github.com/users/TooManyBees/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-30T22:33:55Z","updated_at":"2018-05-31T04:28:25Z","closed_at":"2018-05-31T04:28:25Z","author_association":"NONE","body":"Not 100% sure if this is an issue with Cargo or Rust. I'm also not sure if it's a bug, or just my expectations butting up against reality.\r\n\r\nWhen a project depends on some proc macro `Crate P`, and both `Crate P` and the project separately depend on `Crate L`, some library, `Crate L` will be compiled into both with the same feature sets, even when the parent project and the proc macro request different features.\r\n\r\nIt's my understanding that when a crate is required multiple times as a dependency, its feature sets are unified together. **What I see as a bug is the fact that this is happening with the dependencies of proc macro crates and the project that uses the proc macro crate to generate its code.** (More detailed example below.) My expectation is that, since the proc macro is a build dependency rather than a runtime dep, its own dependencies should be \"insulated\" from those of the project that's using it.\r\n\r\n## example\r\n\r\nA Rust project needs some structs written into the code with a proc macro. These structs come from `Library L`. `Library L`'s structs implement Quote's `ToTokens` trait. Since we do not want `Quote` to be compiled into the final binary, `Library L` has a feature `codegen` that includes Quote and enables the trait impls. `Proc Macro P` requires `Library L` with the codegen feature. The parent project requires `Library L` without it.\r\n\r\nUltimately, both the parent project and the proc macro end up using `Library L` with the `codegen` feature turned on. You wouldn't notice that Quote snuck into the projects dependencies until you compiled it as a `cdylib` crate type (say, in order to build it for the wasm32-unknown-unknown target) which Quote can't be compiled for (or maybe it was Syn that couldn't be compiled for cdylibs? I can't remember), and compilation fails.\r\n\r\nMy solution for this was to abandon crate features and just write `Library L`'s structs' constructor literals right into the `quote!` macros in `Proc Macro P`, which is a shame because now the proc macro crate and the library are coupled tightly and must be updated together if the internals of a struct changes.\r\n\r\n## p.s.\r\n\r\nI suspect(???) but have not yet confirmed that the same issue causes the `std` crate to get pulled into `#![no_std]` projects if it uses a proc macro that uses `std`. Rustc fails when `panic_fmt` is not defined due to no_std, but also fails when it is defined because `std` was mysteriously pulled in (by the proc macro crate?) which already defined it.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51229","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51229/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51229/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51229/events","html_url":"https://github.com/rust-lang/rust/issues/51229","id":327895473,"node_id":"MDU6SXNzdWUzMjc4OTU0NzM=","number":51229,"title":"rustdoc errors on files with punctuation","user":{"login":"cramertj","id":5963049,"node_id":"MDQ6VXNlcjU5NjMwNDk=","avatar_url":"https://avatars1.githubusercontent.com/u/5963049?v=4","gravatar_id":"","url":"https://api.github.com/users/cramertj","html_url":"https://github.com/cramertj","followers_url":"https://api.github.com/users/cramertj/followers","following_url":"https://api.github.com/users/cramertj/following{/other_user}","gists_url":"https://api.github.com/users/cramertj/gists{/gist_id}","starred_url":"https://api.github.com/users/cramertj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cramertj/subscriptions","organizations_url":"https://api.github.com/users/cramertj/orgs","repos_url":"https://api.github.com/users/cramertj/repos","events_url":"https://api.github.com/users/cramertj/events{/privacy}","received_events_url":"https://api.github.com/users/cramertj/received_events","type":"User","site_admin":false},"labels":[{"id":203738,"node_id":"MDU6TGFiZWwyMDM3Mzg=","url":"https://api.github.com/repos/rust-lang/rust/labels/T-rustdoc","name":"T-rustdoc","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-05-30T20:54:45Z","updated_at":"2018-06-05T18:19:54Z","closed_at":"2018-06-05T18:19:54Z","author_association":"MEMBER","body":"`rustdoc main.rs --crate-name foo` succeeds and outputs documentation for a crate called `foo`, but `rustdoc main.bane.rs --crate-name foo` errors with \"invalid character `.` in crate name: `main.bane`\".","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51209","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51209/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51209/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51209/events","html_url":"https://github.com/rust-lang/rust/issues/51209","id":327646449,"node_id":"MDU6SXNzdWUzMjc2NDY0NDk=","number":51209,"title":"rand fails to migrate","user":{"login":"nikomatsakis","id":155238,"node_id":"MDQ6VXNlcjE1NTIzOA==","avatar_url":"https://avatars0.githubusercontent.com/u/155238?v=4","gravatar_id":"","url":"https://api.github.com/users/nikomatsakis","html_url":"https://github.com/nikomatsakis","followers_url":"https://api.github.com/users/nikomatsakis/followers","following_url":"https://api.github.com/users/nikomatsakis/following{/other_user}","gists_url":"https://api.github.com/users/nikomatsakis/gists{/gist_id}","starred_url":"https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikomatsakis/subscriptions","organizations_url":"https://api.github.com/users/nikomatsakis/orgs","repos_url":"https://api.github.com/users/nikomatsakis/repos","events_url":"https://api.github.com/users/nikomatsakis/events{/privacy}","received_events_url":"https://api.github.com/users/nikomatsakis/received_events","type":"User","site_admin":false},"labels":[{"id":930400927,"node_id":"MDU6TGFiZWw5MzA0MDA5Mjc=","url":"https://api.github.com/repos/rust-lang/rust/labels/A-rust-2018-preview","name":"A-rust-2018-preview","color":"d7e102","default":false},{"id":211668100,"node_id":"MDU6TGFiZWwyMTE2NjgxMDA=","url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":858360099,"node_id":"MDU6TGFiZWw4NTgzNjAwOTk=","url":"https://api.github.com/repos/rust-lang/rust/labels/WG-epoch","name":"WG-epoch","color":"c2e0c6","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/52","html_url":"https://github.com/rust-lang/rust/milestone/52","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/52/labels","id":3408363,"node_id":"MDk6TWlsZXN0b25lMzQwODM2Mw==","number":52,"title":"Rust 2018 Alpha","description":"","creator":{"login":"Mark-Simulacrum","id":5047365,"node_id":"MDQ6VXNlcjUwNDczNjU=","avatar_url":"https://avatars0.githubusercontent.com/u/5047365?v=4","gravatar_id":"","url":"https://api.github.com/users/Mark-Simulacrum","html_url":"https://github.com/Mark-Simulacrum","followers_url":"https://api.github.com/users/Mark-Simulacrum/followers","following_url":"https://api.github.com/users/Mark-Simulacrum/following{/other_user}","gists_url":"https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}","starred_url":"https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mark-Simulacrum/subscriptions","organizations_url":"https://api.github.com/users/Mark-Simulacrum/orgs","repos_url":"https://api.github.com/users/Mark-Simulacrum/repos","events_url":"https://api.github.com/users/Mark-Simulacrum/events{/privacy}","received_events_url":"https://api.github.com/users/Mark-Simulacrum/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":1,"state":"open","created_at":"2018-06-07T16:23:00Z","updated_at":"2018-06-08T13:58:33Z","due_on":null,"closed_at":null},"comments":1,"created_at":"2018-05-30T09:25:10Z","updated_at":"2018-06-07T21:52:41Z","closed_at":"2018-06-07T21:52:41Z","author_association":"CONTRIBUTOR","body":"@teiesti [helpfully reported](https://github.com/rust-lang/rust/issues/51180#issuecomment-392940606) that `rand` fails to migrate successfully:\r\n\r\n[branch here](https://github.com/teiesti/rand/tree/rust-2018-migration)\r\n\r\n```\r\n$ cargo +nightly build\r\n   Compiling rand v0.5.0 (file:///home/tobias/dev/rand)\r\nerror[E0463]: can't find crate for `distributions`\r\n   --> src/distributions/uniform.rs:104:5\r\n    |\r\n104 | use distributions::Distribution;\r\n    |     ^^^^^^^^^^^^^ can't find crate\r\n\r\nerror: aborting due to previous error\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51204","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51204/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51204/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51204/events","html_url":"https://github.com/rust-lang/rust/issues/51204","id":327618884,"node_id":"MDU6SXNzdWUzMjc2MTg4ODQ=","number":51204,"title":"Compiletest should detect when a `.nll.stderr` file matches the `.stderr` file","user":{"login":"oli-obk","id":332036,"node_id":"MDQ6VXNlcjMzMjAzNg==","avatar_url":"https://avatars2.githubusercontent.com/u/332036?v=4","gravatar_id":"","url":"https://api.github.com/users/oli-obk","html_url":"https://github.com/oli-obk","followers_url":"https://api.github.com/users/oli-obk/followers","following_url":"https://api.github.com/users/oli-obk/following{/other_user}","gists_url":"https://api.github.com/users/oli-obk/gists{/gist_id}","starred_url":"https://api.github.com/users/oli-obk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oli-obk/subscriptions","organizations_url":"https://api.github.com/users/oli-obk/orgs","repos_url":"https://api.github.com/users/oli-obk/repos","events_url":"https://api.github.com/users/oli-obk/events{/privacy}","received_events_url":"https://api.github.com/users/oli-obk/received_events","type":"User","site_admin":false},"labels":[{"id":120005,"node_id":"MDU6TGFiZWwxMjAwMDU=","url":"https://api.github.com/repos/rust-lang/rust/labels/A-testsuite","name":"A-testsuite","color":"d7e102","default":false},{"id":67766349,"node_id":"MDU6TGFiZWw2Nzc2NjM0OQ==","url":"https://api.github.com/repos/rust-lang/rust/labels/E-mentor","name":"E-mentor","color":"02E10C","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-30T08:08:13Z","updated_at":"2018-06-09T01:33:05Z","closed_at":"2018-06-09T01:33:05Z","author_association":"CONTRIBUTOR","body":"This happens when NLL has been fixed up to the point where it reproduces borrowck's output. (example: https://github.com/rust-lang/rust/pull/51186)\r\n\r\nIf both are the same, automatically remove the `.nll.stderr` in `--bless` mode and emit an error without `--bless`.\r\n\r\n[Here's](https://github.com/rust-lang/rust/blob/master/src/tools/compiletest/src/runtest.rs#L2972-L3002) what `--bless` does when it detects that the output of files has changed. Something similar can be done as a new check for equality of the `.nll.*` and `.*` files. It would probably be best to extract the replacing code from the current `--bless` impl to a separate function so it can be reused.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/51199","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/51199/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/51199/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/51199/events","html_url":"https://github.com/rust-lang/rust/issues/51199","id":327552696,"node_id":"MDU6SXNzdWUzMjc1NTI2OTY=","number":51199,"title":"rustup still fail to install stable rust on ppc64le (even 1.26.1)","user":{"login":"lu-zero","id":239012,"node_id":"MDQ6VXNlcjIzOTAxMg==","avatar_url":"https://avatars1.githubusercontent.com/u/239012?v=4","gravatar_id":"","url":"https://api.github.com/users/lu-zero","html_url":"https://github.com/lu-zero","followers_url":"https://api.github.com/users/lu-zero/followers","following_url":"https://api.github.com/users/lu-zero/following{/other_user}","gists_url":"https://api.github.com/users/lu-zero/gists{/gist_id}","starred_url":"https://api.github.com/users/lu-zero/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lu-zero/subscriptions","organizations_url":"https://api.github.com/users/lu-zero/orgs","repos_url":"https://api.github.com/users/lu-zero/repos","events_url":"https://api.github.com/users/lu-zero/events{/privacy}","received_events_url":"https://api.github.com/users/lu-zero/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-05-30T02:37:50Z","updated_at":"2018-05-30T09:33:59Z","closed_at":"2018-05-30T09:33:59Z","author_association":"CONTRIBUTOR","body":"```\r\n# rustup stable install\r\ninfo: syncing channel updates for 'stable-powerpc64le-unknown-linux-gnu'\r\ninfo: latest update on 2018-05-29, rust version 1.26.1 (827013a31 2018-05-25)\r\nerror: component 'rust-docs' for 'powerpc64le-unknown-linux-gnu' is unavailable for download\r\n```\r\n\r\n`ppc64be` seems to install fine.","score":1.0}]}
0

