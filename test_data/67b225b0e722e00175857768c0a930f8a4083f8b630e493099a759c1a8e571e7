HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 21 Apr 2018 14:37:41 GMT
Link: <https://api.github.com/search/issues?q=repo%3Arust-lang%2Frust+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Arust-lang%2Frust+type%3Aissue+state%3Aclosed&page=34>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: D8FA:3705:2DDCA28:636C769:5ADB4CB4
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 28
X-Ratelimit-Reset: 1524321520
X-Runtime-Rack: 0.366843
X-Xss-Protection: 1; mode=block

8000
{"total_count":21289,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/rust-lang/rust/issues/50136","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50136/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50136/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50136/events","html_url":"https://github.com/rust-lang/rust/issues/50136","id":316475110,"number":50136,"title":"Match arms don't work with ()? in one arm and Ok(()) in the other","user":{"login":"hkcorac","id":38052255,"avatar_url":"https://avatars1.githubusercontent.com/u/38052255?v=4","gravatar_id":"","url":"https://api.github.com/users/hkcorac","html_url":"https://github.com/hkcorac","followers_url":"https://api.github.com/users/hkcorac/followers","following_url":"https://api.github.com/users/hkcorac/following{/other_user}","gists_url":"https://api.github.com/users/hkcorac/gists{/gist_id}","starred_url":"https://api.github.com/users/hkcorac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hkcorac/subscriptions","organizations_url":"https://api.github.com/users/hkcorac/orgs","repos_url":"https://api.github.com/users/hkcorac/repos","events_url":"https://api.github.com/users/hkcorac/events{/privacy}","received_events_url":"https://api.github.com/users/hkcorac/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-21T08:55:22Z","updated_at":"2018-04-21T09:12:03Z","closed_at":"2018-04-21T09:12:03Z","author_association":"NONE","body":"My `rustc` version: `1.25.0`.\r\n\r\n---\r\n\r\nCurrently this doesn't compile:\r\n\r\n```rust\r\nuse std::fmt::Display;\r\nuse std::fmt::Error;\r\nuse std::fmt::Formatter;\r\n\r\nstruct A { s: Option<String>, }\r\n\r\nimpl Display for A {\r\n\r\n    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\r\n        match self.s {\r\n            // This is either Ok(()) or Err(_)\r\n            Some(ref s) => write!(f, \"{}\", s)?,\r\n            // This is obviously Ok(())\r\n            None => Ok(()),\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\nError message:\r\n\r\n```shell\r\nerror[E0308]: match arms have incompatible types\r\n  --> tests/src/main.rs:13:28\r\n   |\r\n13 |             Some(ref s) => write!(f, \"{}\", s)?,\r\n   |                            ^^^^^^^^^^^^^^^^^^^\r\n   |                            |\r\n   |                            expected enum `std::result::Result`, found ()\r\n   |                            match arm with an incompatible type\r\n   |\r\n   = note: expected type `std::result::Result<(), std::fmt::Error>`\r\n              found type `()`\r\n\r\nerror: aborting due to previous error\r\n\r\nerror: Could not compile `tests`.\r\n```\r\n\r\nWork around:\r\n\r\n```rust\r\nimpl Display for A {\r\n\r\n    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\r\n        match self.s {\r\n            Some(ref s) => write!(f, \"{}\", s)?,\r\n            None => (),\r\n        };\r\n        Ok(())\r\n    }\r\n\r\n}\r\n```\r\n\r\nI think the work around looks... weird, where one arm returns `Result<>`, the other returns `()`. While the first code looks pretty clear: both arms return `Result<>`.\r\n\r\n---\r\n\r\nPerhaps #24157 is related, I'm not sure.\r\n\r\nThank you,","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50113","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50113/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50113/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50113/events","html_url":"https://github.com/rust-lang/rust/issues/50113","id":316261019,"number":50113,"title":"stderr from ui tests is being generated to wrong place (recent regression)","user":{"login":"pnkfelix","id":173127,"avatar_url":"https://avatars0.githubusercontent.com/u/173127?v=4","gravatar_id":"","url":"https://api.github.com/users/pnkfelix","html_url":"https://github.com/pnkfelix","followers_url":"https://api.github.com/users/pnkfelix/followers","following_url":"https://api.github.com/users/pnkfelix/following{/other_user}","gists_url":"https://api.github.com/users/pnkfelix/gists{/gist_id}","starred_url":"https://api.github.com/users/pnkfelix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnkfelix/subscriptions","organizations_url":"https://api.github.com/users/pnkfelix/orgs","repos_url":"https://api.github.com/users/pnkfelix/repos","events_url":"https://api.github.com/users/pnkfelix/events{/privacy}","received_events_url":"https://api.github.com/users/pnkfelix/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-20T13:09:11Z","updated_at":"2018-04-20T19:03:32Z","closed_at":"2018-04-20T19:03:32Z","author_association":"MEMBER","body":"I think I messed something up in #49900. Some work I've been doing locally has indicated that each time I run `compiletest` with the `ui` test suite, it is *overwriting* the expected stderr files in the source tree. (**oops!**)\r\n\r\nsorry about that.\r\n\r\nWill put up PR to fix that pronto.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50075","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50075/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50075/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50075/events","html_url":"https://github.com/rust-lang/rust/issues/50075","id":315876083,"number":50075,"title":"Wrong warning: `value assigned never read` because used in return","user":{"login":"tforgione","id":3015402,"avatar_url":"https://avatars2.githubusercontent.com/u/3015402?v=4","gravatar_id":"","url":"https://api.github.com/users/tforgione","html_url":"https://github.com/tforgione","followers_url":"https://api.github.com/users/tforgione/followers","following_url":"https://api.github.com/users/tforgione/following{/other_user}","gists_url":"https://api.github.com/users/tforgione/gists{/gist_id}","starred_url":"https://api.github.com/users/tforgione/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tforgione/subscriptions","organizations_url":"https://api.github.com/users/tforgione/orgs","repos_url":"https://api.github.com/users/tforgione/repos","events_url":"https://api.github.com/users/tforgione/events{/privacy}","received_events_url":"https://api.github.com/users/tforgione/received_events","type":"User","site_admin":false},"labels":[{"id":235137,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-lint","name":"A-lint","color":"d7e102","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-19T13:23:56Z","updated_at":"2018-04-19T15:14:52Z","closed_at":"2018-04-19T15:14:52Z","author_association":"NONE","body":"I admit this code looks stupid, but it's my minimal working example:\r\n\r\n``` rust\r\nfn compute_test() -> u32 {\r\n    let mut test: u32 = 0;\r\n    test = 1;\r\n    test\r\n}\r\n\r\nfn main() {\r\n    println!(\"{}\", compute_test());\r\n}\r\n```\r\n\r\n[This snippet](https://play.rust-lang.org/?gist=c2f735f23e616a0846aca07d5a263bd1&version=nightly) compiles and give the following warning:\r\n```\r\nwarning: value assigned to `test` is never read\r\n --> src/main.rs:2:9\r\n  |\r\n2 |     let mut test: u32 = 0;\r\n  |         ^^^^^^^^\r\n  |\r\n```\r\n\r\neven though it's being used in the return statement. I feel like this warning is kind of missleading.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50074","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50074/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50074/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50074/events","html_url":"https://github.com/rust-lang/rust/issues/50074","id":315849005,"number":50074,"title":"Search anything that starts with 's' on docs.rs","user":{"login":"ivanovaleksey","id":11523473,"avatar_url":"https://avatars1.githubusercontent.com/u/11523473?v=4","gravatar_id":"","url":"https://api.github.com/users/ivanovaleksey","html_url":"https://github.com/ivanovaleksey","followers_url":"https://api.github.com/users/ivanovaleksey/followers","following_url":"https://api.github.com/users/ivanovaleksey/following{/other_user}","gists_url":"https://api.github.com/users/ivanovaleksey/gists{/gist_id}","starred_url":"https://api.github.com/users/ivanovaleksey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivanovaleksey/subscriptions","organizations_url":"https://api.github.com/users/ivanovaleksey/orgs","repos_url":"https://api.github.com/users/ivanovaleksey/repos","events_url":"https://api.github.com/users/ivanovaleksey/events{/privacy}","received_events_url":"https://api.github.com/users/ivanovaleksey/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-19T12:09:16Z","updated_at":"2018-04-19T12:43:46Z","closed_at":"2018-04-19T12:43:46Z","author_association":"NONE","body":"Hello, \r\n\r\nIt seems I have noticed a bug on docs.rs.\r\n\r\nI am not able to search anything that start with 'S'.\r\nI guess it is because of\r\n> Click or press ‘S’ to search, ‘?’ for more options…\r\n\r\nSo, when one presses 'S' search field takes a focus but consequent 'S' presses do nothing. \r\nIt results in very inconvenient way to search without leading 'S' and to hope that autocomplete will help me.\r\n\r\nI have opened [a topic](https://users.rust-lang.org/t/search-anything-that-starts-with-s-on-docs-rs/16949) on Rust Forum.\r\nThere are interesting points from others:\r\n\r\n> It’s worth noting that this does not happen if you try searching sufficiently old docs. Here’s an example of sufficiently old docs that don’t exhibit this problem.\r\n\r\n> Just tried. Also sometimes does not work when second is s.\r\n\r\nI don't know where this issue should be filed.\r\nPlease, correct me if I am doing something wrong.\r\n\r\nThank you.\r\n\r\nP. S.\r\nI tried on macOS with:\r\n- Chrome 65.0.3325.181\r\n- Safari 11.0.3 (13604.5.6)\r\n\r\nAlso, it works fine on https://doc.rust-lang.org/std/","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50063","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50063/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50063/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50063/events","html_url":"https://github.com/rust-lang/rust/issues/50063","id":315635897,"number":50063,"title":"Flash of dark theme in rustdoc","user":{"login":"ruuda","id":506953,"avatar_url":"https://avatars0.githubusercontent.com/u/506953?v=4","gravatar_id":"","url":"https://api.github.com/users/ruuda","html_url":"https://github.com/ruuda","followers_url":"https://api.github.com/users/ruuda/followers","following_url":"https://api.github.com/users/ruuda/following{/other_user}","gists_url":"https://api.github.com/users/ruuda/gists{/gist_id}","starred_url":"https://api.github.com/users/ruuda/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruuda/subscriptions","organizations_url":"https://api.github.com/users/ruuda/orgs","repos_url":"https://api.github.com/users/ruuda/repos","events_url":"https://api.github.com/users/ruuda/events{/privacy}","received_events_url":"https://api.github.com/users/ruuda/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-18T20:45:18Z","updated_at":"2018-04-18T21:08:14Z","closed_at":"2018-04-18T21:08:14Z","author_association":"CONTRIBUTOR","body":"Currently, for every page I load on https://doc.rust-lang.org/std, there is a “flash of dark theme” for almost a second, as you can see in this timeline:\r\n\r\n![flash-of-dark](https://user-images.githubusercontent.com/506953/38956821-074ada8e-4359-11e8-976d-b6eaf7b4a62d.png)\r\n\r\nFurthermore, the entire docs load very slowly, even with a primed cache. (You can also see fonts kicking in very late.) I suspect part of the reason is that all resources are served with `cache-control: max-age=0, no-store, no-cache, must-revalidate`, including fonts and style sheets. I don’t know if this is done on purpose because the docs are updated frequently? If so, using an etag would probably be a better solution.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50059","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50059/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50059/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50059/events","html_url":"https://github.com/rust-lang/rust/issues/50059","id":315570132,"number":50059,"title":"Filtering file names with ends_with","user":{"login":"msehnout","id":9369632,"avatar_url":"https://avatars0.githubusercontent.com/u/9369632?v=4","gravatar_id":"","url":"https://api.github.com/users/msehnout","html_url":"https://github.com/msehnout","followers_url":"https://api.github.com/users/msehnout/followers","following_url":"https://api.github.com/users/msehnout/following{/other_user}","gists_url":"https://api.github.com/users/msehnout/gists{/gist_id}","starred_url":"https://api.github.com/users/msehnout/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/msehnout/subscriptions","organizations_url":"https://api.github.com/users/msehnout/orgs","repos_url":"https://api.github.com/users/msehnout/repos","events_url":"https://api.github.com/users/msehnout/events{/privacy}","received_events_url":"https://api.github.com/users/msehnout/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-18T17:20:24Z","updated_at":"2018-04-18T17:51:17Z","closed_at":"2018-04-18T17:51:17Z","author_association":"NONE","body":"Let's say that I would like to have a list of all *.conf files from the \"/etc\" directory. The intuitive way to do this is by using `read_dir` and `filter` with `.path().ends_with(\".conf\")`, but it does not seem to work. Am I using the API wrong or is it a bug?\r\n\r\nrustc 1.27.0-nightly (7360d6dd6 2018-04-15)\r\n\r\n[Playground](https://play.rust-lang.org/?gist=e23c35a1f7af99ab3745b644cb5cd80b&version=undefined)\r\n```rust\r\nuse std::fs;\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n    let files = fs::read_dir(\"/etc\").unwrap();\r\n\r\n    files\r\n        .filter(move |n| {\r\n            if let Ok(file) = n {\r\n                println!(\"{:?}\", file.path());\r\n                println!(\"{:?}\", file.path().ends_with(\"conf\"));\r\n                let i = format!(\"{:?}\", file.path());\r\n                println!(\"{}\", i);\r\n                println!(\"{:?}\", i.ends_with(\"conf\\\"\"));\r\n                //file.path().ends_with(\".conf\")\r\n                //true\r\n                false\r\n            } else {\r\n                false\r\n            }\r\n        })\r\n        .for_each(|f| ());//println!(\"{:?}\", f));\r\n}\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50057","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50057/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50057/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50057/events","html_url":"https://github.com/rust-lang/rust/issues/50057","id":315541251,"number":50057,"title":"Always implement `ExactSizeIterator` for `std::iter::Take`","user":{"login":"pitdicker","id":6255050,"avatar_url":"https://avatars1.githubusercontent.com/u/6255050?v=4","gravatar_id":"","url":"https://api.github.com/users/pitdicker","html_url":"https://github.com/pitdicker","followers_url":"https://api.github.com/users/pitdicker/followers","following_url":"https://api.github.com/users/pitdicker/following{/other_user}","gists_url":"https://api.github.com/users/pitdicker/gists{/gist_id}","starred_url":"https://api.github.com/users/pitdicker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pitdicker/subscriptions","organizations_url":"https://api.github.com/users/pitdicker/orgs","repos_url":"https://api.github.com/users/pitdicker/repos","events_url":"https://api.github.com/users/pitdicker/events{/privacy}","received_events_url":"https://api.github.com/users/pitdicker/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-18T15:55:16Z","updated_at":"2018-04-18T16:44:44Z","closed_at":"2018-04-18T16:44:44Z","author_association":"CONTRIBUTOR","body":"Currently `std::iter::Take` only implements `ExactSizeIterator` if its parent iterator implements that. But `Take` knows how many elements it will return at most, so I think it makes sense if it would always implement `ExactSizeIterator`.\r\n\r\nIt would not be correct if the parent iterator produces less items, but this trait is only a best effort to help optimizations, right?","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50042","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50042/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50042/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50042/events","html_url":"https://github.com/rust-lang/rust/issues/50042","id":315346840,"number":50042,"title":"Macro expansion cannot find variable in scope","user":{"login":"akshaynanavati","id":3410061,"avatar_url":"https://avatars2.githubusercontent.com/u/3410061?v=4","gravatar_id":"","url":"https://api.github.com/users/akshaynanavati","html_url":"https://github.com/akshaynanavati","followers_url":"https://api.github.com/users/akshaynanavati/followers","following_url":"https://api.github.com/users/akshaynanavati/following{/other_user}","gists_url":"https://api.github.com/users/akshaynanavati/gists{/gist_id}","starred_url":"https://api.github.com/users/akshaynanavati/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akshaynanavati/subscriptions","organizations_url":"https://api.github.com/users/akshaynanavati/orgs","repos_url":"https://api.github.com/users/akshaynanavati/repos","events_url":"https://api.github.com/users/akshaynanavati/events{/privacy}","received_events_url":"https://api.github.com/users/akshaynanavati/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-18T06:27:37Z","updated_at":"2018-04-18T08:49:43Z","closed_at":"2018-04-18T08:49:43Z","author_association":"NONE","body":"Macro expansion cannot find variable in scope\r\n\r\nI tried this code:\r\n\r\n```\r\nmacro_rules! foo {\r\n    (@inner foo) => {\r\n        return bar;\r\n    };\r\n    (bar) => {\r\n        fn f() -> String {\r\n            let bar = \"hello\".to_string();\r\n            foo!(@inner foo);\r\n        }\r\n    };\r\n}\r\n\r\nfoo!(bar);\r\n\r\nfn main() {\r\n    f();\r\n}\r\n\r\n```\r\n\r\nI expected to see this happen: I expected this to compile.\r\n\r\nInstead, this happened: It did not compile with the following error message:\r\n\r\n```\r\nerror[E0425]: cannot find value `bar` in this scope\r\n  --> macro.rs:3:16\r\n   |\r\n3  |         return bar;\r\n   |                ^^^ not found in this scope\r\n...\r\n13 | foo!(bar);\r\n   | ---------- in this macro invocation\r\n```\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.27.0-nightly (4b9b70c39 2018-04-09)\r\nbinary: rustc\r\ncommit-hash: 4b9b70c394e7f341b4016fce4cbf763d404b26f9\r\ncommit-date: 2018-04-09\r\nhost: x86_64-apple-darwin\r\nrelease: 1.27.0-nightly\r\nLLVM version: 6.0\r\n```\r\n\r\nBacktrace: When I compiled with `-Z unstable-options --pretty=expanded`, I get:\r\n\r\n```\r\n#![feature(prelude_import)]\r\n#![no_std]\r\n#[prelude_import]\r\nuse std::prelude::v1::*;\r\n#[macro_use]\r\nextern crate std;\r\nmacro_rules! foo(( @ inner foo ) => { return bar ; } ; ( bar ) => {\r\n                 fn f (  ) -> String {\r\n                 let bar = \"hello\" . to_string (  ) ; foo ! ( @ inner foo ) ;\r\n                 } } ;);\r\nfn f() -> String { let bar = \"hello\".to_string(); return bar; }\r\n\r\n\r\nfn main() { f(); }\r\n```\r\n\r\nwhich on its own compiles, because `bar` is indeed in scope in the function `f`.\r\n\r\n[Playground link to macro code](https://play.rust-lang.org/?gist=c118d578edd1da866f03fe69d1d81929&version=stable)\r\n\r\n[Playground link to macro expansion which compiles](https://play.rust-lang.org/?gist=762f6dca25b7a9aae0f02450220612c3&version=stable)","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50041","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50041/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50041/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50041/events","html_url":"https://github.com/rust-lang/rust/issues/50041","id":315327055,"number":50041,"title":"MIR inlining leads to LLVM error around box_free","user":{"login":"glandium","id":1038527,"avatar_url":"https://avatars3.githubusercontent.com/u/1038527?v=4","gravatar_id":"","url":"https://api.github.com/users/glandium","html_url":"https://github.com/glandium","followers_url":"https://api.github.com/users/glandium/followers","following_url":"https://api.github.com/users/glandium/following{/other_user}","gists_url":"https://api.github.com/users/glandium/gists{/gist_id}","starred_url":"https://api.github.com/users/glandium/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glandium/subscriptions","organizations_url":"https://api.github.com/users/glandium/orgs","repos_url":"https://api.github.com/users/glandium/repos","events_url":"https://api.github.com/users/glandium/events{/privacy}","received_events_url":"https://api.github.com/users/glandium/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-04-18T04:28:48Z","updated_at":"2018-04-19T03:53:51Z","closed_at":"2018-04-19T03:53:51Z","author_association":"CONTRIBUTOR","body":"Context: In order to experiment with an `Alloc`-aware `Box`, I was preparing to modify the `box_free` lang item signature, and my first step was to ensure MIR passes the right type to begin with, as noted in https://github.com/rust-lang/rust/blob/b91e6a2672a6f69e404d87fa62a5900a390622cf/src/librustc_mir/transform/inline.rs#L465-L467\r\n\r\nLegitimately, I assumed that the MIR inline code was doing the right thing, so I mimicked it in `elaborate_drops.rs`. The resulting code actually works fine, as far as completing the 3 stages of rustc bootstrapping is involved.\r\n\r\nBut before going the `box_free` route for the `Alloc`-aware `Box`, I first tried removing the special handling of `Box`'s `Drop`, trying to leave it to `boxed.rs`, shortcutting the `box_free` lang item. This didn't go well, and produced a stage 1 compiler that would crash on a bad `free` in libsyntax's `ThinVec`. From which I derived a small test case that would exhibit the problem with my code. Anyways, I was going well over my head with this approach, thus switched to the `box_free` signature change.\r\n\r\nSo, what's the deal with this issue, will you ask? Well, it turns out that my MIR changes, essentially copied from MIR inlining, while they worked to produce an apparently working compiler, failed to compile that reduced testcase with an LLVM ERROR. I was wondering if I did something significantly different from what the MIT inlining pass was doing, so I tried to trigger it manually (since it's not enabled by default), and after some trial and error, got it to happen on a plain nightly compiler, with the following reduced testcase:\r\n```rust\r\n#![crate_type=\"lib\"]\r\n#![feature(lang_items)]\r\n#![no_std]\r\n\r\n#[lang = \"owned_box\"]\r\npub struct Box<T: ?Sized>(*mut T);\r\n\r\nimpl<T: ?Sized> Drop for Box<T> {\r\n    fn drop(&mut self) {\r\n    }\r\n}\r\n\r\n#[lang = \"box_free\"]\r\n#[inline(always)]\r\nunsafe fn box_free<T: ?Sized>(ptr: *mut T) {\r\n    dealloc(ptr)\r\n}\r\n\r\n#[inline(never)]\r\nfn dealloc<T: ?Sized>(_: *mut T) {\r\n}\r\n\r\npub struct Foo<T>(T);\r\n\r\npub fn foo(a: Option<Box<Foo<usize>>>) -> usize {\r\n    let f = match a {\r\n        None => Foo(0),\r\n        Some(vec) => *vec,\r\n    };\r\n    f.0\r\n}\r\n```\r\n\r\nBuilding with `rustc +nightly -Z mir_opt_level=2 test.rs` yields:\r\n```\r\nInstruction does not dominate all uses!\r\n  %14 = load i64*, i64** %13, align 8\r\n  call void @_ZN4test7dealloc17hb146efc385cf7afbE(i64* %14)\r\nLLVM ERROR: Broken function found, compilation aborted!\r\n```\r\n\r\n(Note the `#[inline(always)]` is only there to force MIR inlining to happen without having to go over the required threshold ; liballoc's `box_free` has `#[inline]` ; similarly, the `#[inline(never)]` on `dealloc` avoids inlining of dealloc, to limit the effects on the MIR)\r\n\r\nInterestingly enough, `--emit mir` and `--emit llvm-ir` fail with the same error. The former outputs a truncated MIR (truncated at the entry of the first basic block), and the latter outputs nothing.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50037","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50037/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50037/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50037/events","html_url":"https://github.com/rust-lang/rust/issues/50037","id":315280174,"number":50037,"title":"x.py check doesn't take previous x.py build into account","user":{"login":"varkor","id":3943692,"avatar_url":"https://avatars1.githubusercontent.com/u/3943692?v=4","gravatar_id":"","url":"https://api.github.com/users/varkor","html_url":"https://github.com/varkor","followers_url":"https://api.github.com/users/varkor/followers","following_url":"https://api.github.com/users/varkor/following{/other_user}","gists_url":"https://api.github.com/users/varkor/gists{/gist_id}","starred_url":"https://api.github.com/users/varkor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/varkor/subscriptions","organizations_url":"https://api.github.com/users/varkor/orgs","repos_url":"https://api.github.com/users/varkor/repos","events_url":"https://api.github.com/users/varkor/events{/privacy}","received_events_url":"https://api.github.com/users/varkor/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-17T23:47:31Z","updated_at":"2018-04-17T23:58:29Z","closed_at":"2018-04-17T23:58:29Z","author_association":"CONTRIBUTOR","body":"After successfully running `x.py build`, we know `x.py check` is also going to succeed. It shouldn't then try re-checking `rustc`. (This should probably take into account the build on an incremental basis.)\r\n\r\nIssue on cargo: https://github.com/rust-lang/cargo/issues/3501","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50019","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50019/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50019/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50019/events","html_url":"https://github.com/rust-lang/rust/issues/50019","id":314932230,"number":50019,"title":"Disk space requirement when building should be indicated in the readme","user":{"login":"krk","id":1447853,"avatar_url":"https://avatars0.githubusercontent.com/u/1447853?v=4","gravatar_id":"","url":"https://api.github.com/users/krk","html_url":"https://github.com/krk","followers_url":"https://api.github.com/users/krk/followers","following_url":"https://api.github.com/users/krk/following{/other_user}","gists_url":"https://api.github.com/users/krk/gists{/gist_id}","starred_url":"https://api.github.com/users/krk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krk/subscriptions","organizations_url":"https://api.github.com/users/krk/orgs","repos_url":"https://api.github.com/users/krk/repos","events_url":"https://api.github.com/users/krk/events{/privacy}","received_events_url":"https://api.github.com/users/krk/received_events","type":"User","site_admin":false},"labels":[{"id":325438536,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-rustbuild","name":"A-rustbuild","color":"d7e102","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-17T07:10:40Z","updated_at":"2018-04-20T19:03:26Z","closed_at":"2018-04-20T19:03:26Z","author_association":"CONTRIBUTOR","body":"Currently, around 54 GB is required for a default incremental build (`x.py build -i`). \r\n\r\nWe may include some tips to decrease disk space requirements in the readme, potentially not building all LLVM targets etc.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50018","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50018/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50018/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50018/events","html_url":"https://github.com/rust-lang/rust/issues/50018","id":314911495,"number":50018,"title":"Illegal instruction when running on the latest nightly ","user":{"login":"edwin0cheng","id":11014119,"avatar_url":"https://avatars2.githubusercontent.com/u/11014119?v=4","gravatar_id":"","url":"https://api.github.com/users/edwin0cheng","html_url":"https://github.com/edwin0cheng","followers_url":"https://api.github.com/users/edwin0cheng/followers","following_url":"https://api.github.com/users/edwin0cheng/following{/other_user}","gists_url":"https://api.github.com/users/edwin0cheng/gists{/gist_id}","starred_url":"https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/edwin0cheng/subscriptions","organizations_url":"https://api.github.com/users/edwin0cheng/orgs","repos_url":"https://api.github.com/users/edwin0cheng/repos","events_url":"https://api.github.com/users/edwin0cheng/events{/privacy}","received_events_url":"https://api.github.com/users/edwin0cheng/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-17T05:34:23Z","updated_at":"2018-04-17T06:19:04Z","closed_at":"2018-04-17T06:19:03Z","author_association":"NONE","body":"Our project [unrust](https://github.com/edwin0cheng/unrust) failed to run in the latest nightly on macos. \r\n\r\n```\r\nRUST_BACKTRACE=1 cargo run --example boxes\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.62 secs\r\n     Running `target/debug/examples/boxes`\r\n[1]    3842 illegal hardware instruction \r\n```\r\nAnd i try to get the callstack from `rust-lldb`, the output is :\r\n\r\n```\r\nwarning: (x86_64) /Users/user/Sandbox/rust-root/unrust/target/debug/examples/boxes 0x00573393: DW_TAG_member bitfield named \"(null)\" has invalid bit offset (0x100000000) member will be ignored. Please file a bug against the comp
8000
iler and include the preprocessed output for /Users/user/.cargo/registry/src/github.com-1ecc6299db9ec823/winit-0.11.2/src/lib.rs/@/winit1\r\n\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)\r\n  * frame #0: 0x0000000100551914 boxes`__rde_oom [inlined] core::alloc::GlobalAlloc::oom::hc99f615df1681084 at alloc.rs:463 [opt]\r\n    frame #1: 0x0000000100551914 boxes`__rde_oom at lib.rs:106 [opt]\r\n    frame #2: 0x0000000100545ee9 boxes`_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..GlobalAlloc$GT$::oom::h989c0ea00140659f at alloc.rs:115 [opt]\r\n    frame #3: 0x0000000100545ed9 boxes`_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Alloc$GT$::oom::hb14ed44cdf58fae1 at alloc.rs:150 [opt]\r\n    frame #4: 0x0000000100545e08 boxes`_$LT$alloc..raw_vec..RawVec$LT$T$C$$u20$A$GT$$GT$::reserve::h3e9bbd9db601cb18 at raw_vec.rs:555 [opt]\r\n    frame #5: 0x000000010053c9ff boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$GT$::reserve::h3bfe470ddfe9946b at vec.rs:465 [opt]\r\n    frame #6: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$$RF$$u27$a$u20$T$C$$u20$core..slice..Iter$LT$$u27$a$C$$u20$T$GT$$GT$$GT$::spec_extend::h6cf9cea0e78a6c9b at vec.rs:1938 [opt]\r\n    frame #7: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$GT$::extend_from_slice::ha3fae55d527f52a2 at vec.rs:1389 [opt]\r\n    frame #8: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] alloc::string::String::push_str::he8eb30d69e1cdbaa at string.rs:805 [opt]\r\n    frame #9: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..string..String$u20$as$u20$core..fmt..Write$GT$::write_str::h1fc58b934dc3c6b2 at string.rs:2276 [opt]\r\n    frame #10: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 at mod.rs:214 [opt]\r\n    frame #11: 0x00000001004bbfa2 boxes`_$LT$alloc..string..String$u20$as$u20$core..fmt..Display$GT$::fmt::hf7458daa58f84baa(self=&0x7ffeefbfd700, f=&0x7ffeefbfd1e8) at string.rs:1859\r\n    frame #12: 0x00000001004be778 boxes`_$LT$objc..message..MessageError$u20$as$u20$core..fmt..Display$GT$::fmt::he58ba1de80240101(self=&0x7ffeefbfd700, f=&0x7ffeefbfd1e8) at mod.rs:157\r\n    frame #13: 0x0000000100582a59 boxes`core::fmt::write::hec9be063f9765085 [inlined] core::fmt::Formatter::run::hc388f0271ef4555a at mod.rs:1099 [opt]\r\n    frame #14: 0x00000001005828d4 boxes`core::fmt::write::hec9be063f9765085 at mod.rs:1046 [opt]\r\n    frame #15: 0x000000010053ee94 boxes`std::panicking::begin_panic_fmt::hc347cc3f81bf78ac [inlined] core::fmt::Write::write_fmt::hc2f2c5baf0cae4c5 at mod.rs:226 [opt]\r\n    frame #16: 0x000000010053ee59 boxes`std::panicking::begin_panic_fmt::hc347cc3f81bf78ac at panicking.rs:346 [opt]\r\n    frame #17: 0x000000010048aad0 boxes`winit::platform::platform::window::Window2::new::h1fdd023b4fab8d45(shared=Weak<winit::platform::platform::events_loop::Shared> {\r\nptr: NonNull<alloc::arc::ArcInner<winit::platform::platform::events_loop::Shared>> {\r\npointer: NonZero<*const alloc::arc::ArcInner<winit::platform::platform::events_loop::Shared>>(&0x101632000)\r\n}\r\n}, win_attribs=&0x7ffeefbfdd58, pl_attribs=&0x7ffeefbfdda8) at window.rs:349\r\n    frame #18: 0x000000010049e721 boxes`winit::platform::platform::Window::new::hbe0a024e59caeb59(events_loop=&0x7ffeefbfe358, attributes=&0x7ffeefbfdd58, pl_attribs=&0x7ffeefbfdda8) at mod.rs:32\r\n    frame #19: 0x00000001004a0850 boxes`winit::window::_$LT$impl$u20$winit..WindowBuilder$GT$::build::h2bbc9788fce51aef(self=WindowBuilder {\r\nwindow: WindowAttributes {\r\ndimensions: Some((800, 600)),\r\nmin_dimensions: Some((1, 23162944)),\r\nmax_dimensions: Some((1, 8)),\r\nfullscreen: None,\r\ntitle: \"Boxes with physics demo\",\r\nmaximized: false,\r\nvisible: true,\r\ntransparent: false,\r\ndecorations: true,\r\nmultitouch: false\r\n},\r\nplatform_specific: PlatformSpecificWindowBuilderAttributes {\r\nactivation_policy: Regular,\r\nmovable_by_window_background: false\r\n}\r\n}, events_loop=&0x7ffeefbfe358) at window.rs:119\r\n    frame #20: 0x000000010047c054 boxes`glutin::platform::platform::Context::new::h51fee33892b00e5c(window_builder=<unavailable>, events_loop=&0x7ffeefbfe358, pf_reqs=&0x7ffeefbfe218, gl_attr=&0x7ffeefbfe248) at mod.rs:48\r\n    frame #21: 0x000000010047b4c6 boxes`glutin::GlWindow::new::ha00482bc1e0c3486(window_builder=WindowBuilder {\r\nwindow: WindowAttributes {\r\ndimensions: Some((800, 600)),\r\nmin_dimensions: Some((1, 23162944)),\r\nmax_dimensions: Some((1, 8)),\r\nfullscreen: None,\r\ntitle: \"Boxes with physics demo\",\r\nmaximized: false,\r\nvisible: true,\r\ntransparent: false,\r\ndecorations: true,\r\nmultitouch: false\r\n},\r\nplatform_specific: PlatformSpecificWindowBuilderAttributes {\r\nactivation_policy: Regular,\r\nmovable_by_window_background: false\r\n}\r\n}, context_builder=<unavailable>, events_loop=&0x7ffeefbfe358) at lib.rs:313\r\n    frame #22: 0x0000000100477669 boxes`uni_app::sys::App::new::h2fcc0a1ea444c987(config=AppConfig {\r\ntitle: \"Boxes with physics demo\",\r\nsize: (800, 600),\r\nvsync: true,\r\nshow_cursor: true\r\n}) at native_app.rs:101\r\n    frame #23: 0x0000000100146b14 boxes`unrust::world::world::WorldBuilder::build::h3cc5a151c2db52aa(self=WorldBuilder {\r\ntitle: \"Boxes with physics demo\",\r\nsize: Some((800, 600)),\r\nshown_stats: Some(true),\r\nwatcher_builder: TypeWatcherBuilder {\r\nobject_containers: vec![(Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n})]\r\n},\r\nprocessor_builders: vec![Rc<alloc::boxed::Box<IProcessorBuilder>> {\r\nptr: NonNull<alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>> {\r\npointer: NonZero<*const alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>>(&0x101625000)\r\n},\r\nphantom: PhantomData<alloc::boxed::Box<IProcessorBuilder>> {\r\n\r\n}\r\n}, Rc<alloc::boxed::Box<IProcessorBuilder>> {\r\nptr: NonNull<alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>> {\r\npointer: NonZero<*const alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>>(&0x101625040)\r\n},\r\nphantom: PhantomData<alloc::boxed::Box<IProcessorBuilder>> {\r\n\r\n}\r\n}]\r\n}) at world.rs:83\r\n    frame #24: 0x0000000100050121 boxes`boxes::main::h764cba78803c84b6 at boxes.rs:374\r\n    frame #25: 0x000000010007e9e2 boxes`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hde1ba53376b193ac at rt.rs:74\r\n    frame #26: 0x000000010053ed78 boxes`std::panicking::try::do_call::h6688c75b958424d8 [inlined] std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h577272da3909533e at rt.rs:59 [opt]\r\n    frame #27: 0x000000010053ed6c boxes`std::panicking::try::do_call::h6688c75b958424d8 at panicking.rs:305 [opt]\r\n    frame #28: 0x000000010055150f boxes`__rust_maybe_catch_panic at lib.rs:101 [opt]\r\n    frame #29: 0x000000010053b598 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc [inlined] std::panicking::try::h6dbcd1a44c5bb721 at panicking.rs:284 [opt]\r\n    frame #30: 0x000000010053b565 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc [inlined] std::panic::catch_unwind::hdd63a658020b6001 at panic.rs:361 [opt]\r\n    frame #31: 0x000000010053b565 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc at rt.rs:58 [opt]\r\n    frame #32: 0x000000010007e9c2 boxes`std::rt::lang_start::h8a69fb836933fb1c(main=&0x100050060, argc=1, argv=&0x7ffeefbff990) at rt.rs:74\r\n    frame #33: 0x0000000100050355 boxes`main + 37\r\n    frame #34: 0x00007fff744bf015 libdyld.dylib`start + 1\r\n(lldb) thread backtrace\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)\r\n  * frame #0: 0x0000000100551914 boxes`__rde_oom [inlined] core::alloc::GlobalAlloc::oom::hc99f615df1681084 at alloc.rs:463 [opt]\r\n    frame #1: 0x0000000100551914 boxes`__rde_oom at lib.rs:106 [opt]\r\n    frame #2: 0x0000000100545ee9 boxes`_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..GlobalAlloc$GT$::oom::h989c0ea00140659f at alloc.rs:115 [opt]\r\n    frame #3: 0x0000000100545ed9 boxes`_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Alloc$GT$::oom::hb14ed44cdf58fae1 at alloc.rs:150 [opt]\r\n    frame #4: 0x0000000100545e08 boxes`_$LT$alloc..raw_vec..RawVec$LT$T$C$$u20$A$GT$$GT$::reserve::h3e9bbd9db601cb18 at raw_vec.rs:555 [opt]\r\n    frame #5: 0x000000010053c9ff boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$GT$::reserve::h3bfe470ddfe9946b at vec.rs:465 [opt]\r\n    frame #6: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$$RF$$u27$a$u20$T$C$$u20$core..slice..Iter$LT$$u27$a$C$$u20$T$GT$$GT$$GT$::spec_extend::h6cf9cea0e78a6c9b at vec.rs:1938 [opt]\r\n    frame #7: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$GT$::extend_from_slice::ha3fae55d527f52a2 at vec.rs:1389 [opt]\r\n    frame #8: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] alloc::string::String::push_str::he8eb30d69e1cdbaa at string.rs:805 [opt]\r\n    frame #9: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..string..String$u20$as$u20$core..fmt..Write$GT$::write_str::h1fc58b934dc3c6b2 at string.rs:2276 [opt]\r\n    frame #10: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 at mod.rs:214 [opt]\r\n    frame #11: 0x00000001004bbfa2 boxes`_$LT$alloc..string..String$u20$as$u20$core..fmt..Display$GT$::fmt::hf7458daa58f84baa(self=&0x7ffeefbfd700, f=&0x7ffeefbfd1e8) at string.rs:1859\r\n    frame #12: 0x00000001004be778 boxes`_$LT$objc..message..MessageError$u20$as$u20$core..fmt..Display$GT$::fmt::he58ba1de80240101(self=&0x7ffeefbfd700, f=&0x7ffeefbfd1e8) at mod.rs:157\r\n    frame #13: 0x0000000100582a59 boxes`core::fmt::write::hec9be063f9765085 [inlined] core::fmt::Formatter::run::hc388f0271ef4555a at mod.rs:1099 [opt]\r\n    frame #14: 0x00000001005828d4 boxes`core::fmt::write::hec9be063f9765085 at mod.rs:1046 [opt]\r\n    frame #15: 0x000000010053ee94 boxes`std::panicking::begin_panic_fmt::hc347cc3f81bf78ac [inlined] core::fmt::Write::write_fmt::hc2f2c5baf0cae4c5 at mod.rs:226 [opt]\r\n    frame #16: 0x000000010053ee59 boxes`std::panicking::begin_panic_fmt::hc347cc3f81bf78ac at panicking.rs:346 [opt]\r\n    frame #17: 0x000000010048aad0 boxes`winit::platform::platform::window::Window2::new::h1fdd023b4fab8d45(shared=Weak<winit::platform::platform::events_loop::Shared> {\r\nptr: NonNull<alloc::arc::ArcInner<winit::platform::platform::events_loop::Shared>> {\r\npointer: NonZero<*const alloc::arc::ArcInner<winit::platform::platform::events_loop::Shared>>(&0x101632000)\r\n}\r\n}, win_attribs=&0x7ffeefbfdd58, pl_attribs=&0x7ffeefbfdda8) at window.rs:349\r\n    frame #18: 0x000000010049e721 boxes`winit::platform::platform::Window::new::hbe0a024e59caeb59(events_loop=&0x7ffeefbfe358, attributes=&0x7ffeefbfdd58, pl_attribs=&0x7ffeefbfdda8) at mod.rs:32\r\n    frame #19: 0x00000001004a0850 boxes`winit::window::_$LT$impl$u20$winit..WindowBuilder$GT$::build::h2bbc9788fce51aef(self=WindowBuilder {\r\nwindow: WindowAttributes {\r\ndimensions: Some((800, 600)),\r\nmin_dimensions: Some((1, 23162944)),\r\nmax_dimensions: Some((1, 8)),\r\nfullscreen: None,\r\ntitle: \"Boxes with physics demo\",\r\nmaximized: false,\r\nvisible: true,\r\ntransparent: false,\r\ndecorations: true,\r\nmultitouch: false\r\n},\r\nplatform_specific: PlatformSpecificWindowBuilderAttributes {\r\nactivation_policy: Regular,\r\nmovable_by_window_background: false\r\n}\r\n}, events_loop=&0x7ffeefbfe358) at window.rs:119\r\n    frame #20: 0x000000010047c054 boxes`glutin::platform::platform::Context::new::h51fee33892b00e5c(window_builder=<unavailable>, events_loop=&0x7ffeefbfe358, pf_reqs=&0x7ffeefbfe218, gl_attr=&0x7ffeefbfe248) at mod.rs:48\r\n    frame #21: 0x000000010047b4c6 boxes`glutin::GlWindow::new::ha00482bc1e0c3486(window_builder=WindowBuilder {\r\nwindow: WindowAttributes {\r\ndimensions: Some((800, 600)),\r\nmin_dimensions: Some((1, 23162944)),\r\nmax_dimensions: Some((1, 8)),\r\nfullscreen: None,\r\ntitle: \"Boxes with physics demo\",\r\nmaximized: false,\r\nvisible: true,\r\ntransparent: false,\r\ndecorations: true,\r\nmultitouch: false\r\n},\r\nplatform_specific: PlatformSpecificWindowBuilderAttributes {\r\nactivation_policy: Regular,\r\nmovable_by_window_background: false\r\n}\r\n}, context_builder=<unavailable>, events_loop=&0x7ffeefbfe358) at lib.rs:313\r\n    frame #22: 0x0000000100477669 boxes`uni_app::sys::App::new::h2fcc0a1ea444c987(config=AppConfig {\r\ntitle: \"Boxes with physics demo\",\r\nsize: (800, 600),\r\nvsync: true,\r\nshow_cursor: true\r\n}) at native_app.rs:101\r\n    frame #23: 0x0000000100146b14 boxes`unrust::world::world::WorldBuilder::build::h3cc5a151c2db52aa(self=WorldBuilder {\r\ntitle: \"Boxes with physics demo\",\r\nsize: Some((800, 600)),\r\nshown_stats: Some(true),\r\nwatcher_builder: TypeWatcherBuilder {\r\nobject_containers: vec![(Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n})]\r\n},\r\nprocessor_builders: vec![Rc<alloc::boxed::Box<IProcessorBuilder>> {\r\nptr: NonNull<alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>> {\r\npointer: NonZero<*const alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>>(&0x101625000)\r\n},\r\nphantom: PhantomData<alloc::boxed::Box<IProcessorBuilder>> {\r\n\r\n}\r\n}, Rc<alloc::boxed::Box<IProcessorBuilder>> {\r\nptr: NonNull<alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>> {\r\npointer: NonZero<*const alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>>(&0x101625040)\r\n},\r\nphantom: PhantomData<alloc::boxed::Box<IProcessorBuilder>> {\r\n\r\n}\r\n}]\r\n}) at world.rs:83\r\n    frame #24: 0x0000000100050121 boxes`boxes::main::h764cba78803c84b6 at boxes.rs:374\r\n    frame #25: 0x000000010007e9e2 boxes`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hde1ba53376b193ac at rt.rs:74\r\n    frame #26: 0x000000010053ed78 boxes`std::panicking::try::do_call::h6688c75b958424d8 [inlined] std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h577272da3909533e at rt.rs:59 [opt]\r\n    frame #27: 0x000000010053ed6c boxes`std::panicking::try::do_call::h6688c75b958424d8 at panicking.rs:305 [opt]\r\n    frame #28: 0x000000010055150f boxes`__rust_maybe_catch_panic at lib.rs:101 [opt]\r\n    frame #29: 0x000000010053b598 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc [inlined] std::panicking::try::h6dbcd1a44c5bb721 at panicking.rs:284 [opt]\r\n    frame #30: 0x000000010053b565 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc [inlined] std::panic::catch_unwind::hdd63a658020b6001 at panic.rs:361 [opt]\r\n    frame #31: 0x000000010053b565 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc at rt.rs:58 [opt]\r\n    frame #32: 0x000000010007e9c2 boxes`std::rt::lang_start::h8a69fb836933fb1c(main=&0x100050060, argc=1, argv=&0x7ffeefbff990) at rt.rs:74\r\n    frame #33: 0x0000000100050355 boxes`main + 37\r\n    frame #34: 0x00007fff744bf015 libdyld.dylib`start + 1\r\n(lldb) frame info\r\nframe #0: 0x0000000100551914 boxes`__rde_oom [inlined] core::alloc::GlobalAlloc::oom::hc99f615df1681084 at alloc.rs:463 [opt]\r\n(lldb) thread backtrace\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)\r\n  * frame #0: 0x0000000100551914 boxes`__rde_oom [inlined] core::alloc::GlobalAlloc::oom::hc99f615df1681084 at alloc.rs:463 [opt]\r\n    frame #1: 0x0000000100551914 boxes`__rde_oom at lib.rs:106 [opt]\r\n    frame #2: 0x0000000100545ee9 boxes`_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..GlobalAlloc$GT$::oom::h989c0ea00140659f at alloc.rs:115 [opt]\r\n    frame #3: 0x0000000100545ed9 boxes`_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Alloc$GT$::oom::hb14ed44cdf58fae1 at alloc.rs:150 [opt]\r\n    frame #4: 0x0000000100545e08 boxes`_$LT$alloc..raw_vec..RawVec$LT$T$C$$u20$A$GT$$GT$::reserve::h3e9bbd9db601cb18 at raw_vec.rs:555 [opt]\r\n    frame #5: 0x000000010053c9ff boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$GT$::reserve::h3bfe470ddfe9946b at vec.rs:465 [opt]\r\n    frame #6: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$$RF$$u27$a$u20$T$C$$u20$core..slice..Iter$LT$$u27$a$C$$u20$T$GT$$GT$$GT$::spec_extend::h6cf9cea0e78a6c9b at vec.rs:1938 [opt]\r\n    frame #7: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..vec..Vec$LT$T$GT$$GT$::extend_from_slice::ha3fae55d527f52a2 at vec.rs:1389 [opt]\r\n    frame #8: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] alloc::string::String::push_str::he8eb30d69e1cdbaa at string.rs:805 [opt]\r\n    frame #9: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 [inlined] _$LT$alloc..string..String$u20$as$u20$core..fmt..Write$GT$::write_str::h1fc58b934dc3c6b2 at string.rs:2276 [opt]\r\n    frame #10: 0x000000010053c9f3 boxes`_$LT$core..fmt..Write..write_fmt..Adapter$LT$$u27$a$C$$u20$T$GT$$u20$as$u20$core..fmt..Write$GT$::write_str::h2f40abe13bfd95b1 at mod.rs:214 [opt]\r\n    frame #11: 0x00000001004bbfa2 boxes`_$LT$alloc..string..String$u20$as$u20$core..fmt..Display$GT$::fmt::hf7458daa58f84baa(self=&0x7ffeefbfd700, f=&0x7ffeefbfd1e8) at string.rs:1859\r\n    frame #12: 0x00000001004be778 boxes`_$LT$objc..message..MessageError$u20$as$u20$core..fmt..Display$GT$::fmt::he58ba1de80240101(self=&0x7ffeefbfd700, f=&0x7ffeefbfd1e8) at mod.rs:157\r\n    frame #13: 0x0000000100582a59 boxes`core::fmt::write::hec9be063f9765085 [inlined] core::fmt::Formatter::run::hc388f0271ef4555a at mod.rs:1099 [opt]\r\n    frame #14: 0x00000001005828d4 boxes`core::fmt::write::hec9be063f9765085 at mod.rs:1046 [opt]\r\n    frame #15: 0x000000010053ee94 boxes`std::panicking::begin_panic_fmt::hc347cc3f81bf78ac [inlined] core::fmt::Write::write_fmt::hc2f2c5baf0cae4c5 at mod.rs:226 [opt]\r\n    frame #16: 0x000000010053ee59 boxes`std::panicking::begin_panic_fmt::hc347cc3f81bf78ac at panicking.rs:346 [opt]\r\n    frame #17: 0x000000010048aad0 boxes`winit::platform::platform::window::Window2::new::h1fdd023b4fab8d45(shared=Weak<winit::platform::platform::events_loop::Shared> {\r\nptr: NonNull<alloc::arc::ArcInner<winit::platform::platform::events_loop::Shared>> {\r\npointer: NonZero<*const alloc::arc::ArcInner<winit::platform::platform::events_loop::Shared>>(&0x101632000)\r\n}\r\n}, win_attribs=&0x7ffeefbfdd58, pl_attribs=&0x7ffeefbfdda8) at window.rs:349\r\n    frame #18: 0x000000010049e721 boxes`winit::platform::platform::Window::new::hbe0a024e59caeb59(events_loop=&0x7ffeefbfe358, attributes=&0x7ffeefbfdd58, pl_attribs=&0x7ffeefbfdda8) at mod.rs:32\r\n    frame #19: 0x00000001004a0850 boxes`winit::window::_$LT$impl$u20$winit..WindowBuilder$GT$::build::h2bbc9788fce51aef(self=WindowBuilder {\r\nwindow: WindowAttributes {\r\ndimensions: Some((800, 600)),\r\nmin_dimensions: Some((1, 23162944)),\r\nmax_dimensions: Some((1, 8)),\r\nfullscreen: None,\r\ntitle: \"Boxes with physics demo\",\r\nmaximized: false,\r\nvisible: true,\r\ntransparent: false,\r\ndecorations: true,\r\nmultitouch: false\r\n},\r\nplatform_specific: PlatformSpecificWindowBuilderAttributes {\r\nactivation_policy: Regular,\r\nmovable_by_window_background: false\r\n}\r\n}, events_loop=&0x7ffeefbfe358) at window.rs:119\r\n    frame #20: 0x000000010047c054 boxes`glutin::platform::platform::Context::new::h51fee33892b00e5c(window_builder=<unavailable>, events_loop=&0x7ffeefbfe358, pf_reqs=&0x7ffeefbfe218, gl_attr=&0x7ffeefbfe248) at mod.rs:48\r\n    frame #21: 0x000000010047b4c6 boxes`glutin::GlWindow::new::ha00482bc1e0c3486(window_builder=WindowBuilder {\r\nwindow: WindowAttributes {\r\ndimensions: Some((800, 600)),\r\nmin_dimensions: Some((1, 23162944)),\r\nmax_dimensions: Some((1, 8)),\r\nfullscreen: None,\r\ntitle: \"Boxes with physics demo\",\r\nmaximized: false,\r\nvisible: true,\r\ntransparent: false,\r\ndecorations: true,\r\nmultitouch: false\r\n},\r\nplatform_specific: PlatformSpecificWindowBuilderAttributes {\r\nactivation_policy: Regular,\r\nmovable_by_window_background: false\r\n}\r\n}, context_builder=<unavailable>, events_loop=&0x7ffeefbfe358) at lib.rs:313\r\n    frame #22: 0x0000000100477669 boxes`uni_app::sys::App::new::h2fcc0a1ea444c987(config=AppConfig {\r\ntitle: \"Boxes with physics demo\",\r\nsize: (800, 600),\r\nvsync: true,\r\nshow_cursor: true\r\n}) at native_app.rs:101\r\n    frame #23: 0x0000000100146b14 boxes`unrust::world::world::WorldBuilder::build::h3cc5a151c2db52aa(self=WorldBuilder {\r\ntitle: \"Boxes with physics demo\",\r\nsize: Some((800, 600)),\r\nshown_stats: Some(true),\r\nwatcher_builder: TypeWatcherBuilder {\r\nobject_containers: vec![(Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewObjectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n}), (Box<Watcher> {\r\n\r\n}, ObjectContainer {\r\nnew_objects: RefCell<unrust::world::type_watcher::NewOb
8000
jectList> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<unrust::world::type_watcher::NewObjectList> {\r\nvalue: NewObjectList {\r\nlist: vec![]\r\n}\r\n}\r\n},\r\nobjects: RefCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nborrow: Cell<usize> {\r\nvalue: UnsafeCell<usize> {\r\nvalue: 0\r\n}\r\n},\r\nvalue: UnsafeCell<alloc::vec::Vec<(alloc::rc::Weak<core::cell::RefCell<unrust::engine::core::game_object::GameObject>>, alloc::arc::Weak<Component>)>> {\r\nvalue: vec![]\r\n}\r\n}\r\n})]\r\n},\r\nprocessor_builders: vec![Rc<alloc::boxed::Box<IProcessorBuilder>> {\r\nptr: NonNull<alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>> {\r\npointer: NonZero<*const alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>>(&0x101625000)\r\n},\r\nphantom: PhantomData<alloc::boxed::Box<IProcessorBuilder>> {\r\n\r\n}\r\n}, Rc<alloc::boxed::Box<IProcessorBuilder>> {\r\nptr: NonNull<alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>> {\r\npointer: NonZero<*const alloc::rc::RcBox<alloc::boxed::Box<IProcessorBuilder>>>(&0x101625040)\r\n},\r\nphantom: PhantomData<alloc::boxed::Box<IProcessorBuilder>> {\r\n\r\n}\r\n}]\r\n}) at world.rs:83\r\n    frame #24: 0x0000000100050121 boxes`boxes::main::h764cba78803c84b6 at boxes.rs:374\r\n    frame #25: 0x000000010007e9e2 boxes`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hde1ba53376b193ac at rt.rs:74\r\n    frame #26: 0x000000010053ed78 boxes`std::panicking::try::do_call::h6688c75b958424d8 [inlined] std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h577272da3909533e at rt.rs:59 [opt]\r\n    frame #27: 0x000000010053ed6c boxes`std::panicking::try::do_call::h6688c75b958424d8 at panicking.rs:305 [opt]\r\n    frame #28: 0x000000010055150f boxes`__rust_maybe_catch_panic at lib.rs:101 [opt]\r\n    frame #29: 0x000000010053b598 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc [inlined] std::panicking::try::h6dbcd1a44c5bb721 at panicking.rs:284 [opt]\r\n    frame #30: 0x000000010053b565 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc [inlined] std::panic::catch_unwind::hdd63a658020b6001 at panic.rs:361 [opt]\r\n    frame #31: 0x000000010053b565 boxes`std::rt::lang_start_internal::h1d7922f9dfd201cc at rt.rs:58 [opt]\r\n    frame #32: 0x000000010007e9c2 boxes`std::rt::lang_start::h8a69fb836933fb1c(main=&0x100050060, argc=1, argv=&0x7ffeefbff990) at rt.rs:74\r\n    frame #33: 0x0000000100050355 boxes`main + 37\r\n    frame #34: 0x00007fff744bf015 libdyld.dylib`start + 1\r\n(lldb)\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49999","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49999/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49999/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49999/events","html_url":"https://github.com/rust-lang/rust/issues/49999","id":314671775,"number":49999,"title":"Support placeholder syntax for length parameter in array types, when length can be inferred","user":{"login":"peterjoel","id":150875,"avatar_url":"https://avatars1.githubusercontent.com/u/150875?v=4","gravatar_id":"","url":"https://api.github.com/users/peterjoel","html_url":"https://github.com/peterjoel","followers_url":"https://api.github.com/users/peterjoel/followers","following_url":"https://api.github.com/users/peterjoel/following{/other_user}","gists_url":"https://api.github.com/users/peterjoel/gists{/gist_id}","starred_url":"https://api.github.com/users/peterjoel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peterjoel/subscriptions","organizations_url":"https://api.github.com/users/peterjoel/orgs","repos_url":"https://api.github.com/users/peterjoel/repos","events_url":"https://api.github.com/users/peterjoel/events{/privacy}","received_events_url":"https://api.github.com/users/peterjoel/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-16T14:19:16Z","updated_at":"2018-04-16T22:07:38Z","closed_at":"2018-04-16T22:07:38Z","author_association":"NONE","body":"Consider code like this:\r\n\r\n```rust\r\nlet values: [i32; 3] = [1, 2, 3];\r\ndo_stuff(&values);\r\n```\r\n\r\nThis becomes annoying when you change the values on the right hand side, because you have to update the length on the left to match. In this case, it's often not necessary to be explicit about the type because it can be fully inferred. But there are cases where it's less convenient, such as with trait objects, where the inference can be too narrow without an annotation:\r\n\r\n```rust\r\nstruct MyStruct;\r\ntrait MyTrait {}\r\nimpl MyTrait for MyStruct {}\r\n\r\nfn main() {\r\n    let values = [&MyStruct, &MyStruct];\r\n    do_stuff(&values);\r\n}\r\n\r\nfn do_stuff(values: &[&MyTrait]) {}\r\n```\r\n\r\nThis is an error unless you give a hint to the compiler that the array is of the trait object and not the impl. You can do it like this:\r\n\r\n```rust\r\nlet values = [&MyStruct as &MyTrait, &MyStruct];\r\n```\r\n\r\nWhich works, but the following would be much clearer:\r\n\r\n```rust\r\nlet values: [&MyTrait; _] =  [&MyStruct, &MyStruct];\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49997","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49997/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49997/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49997/events","html_url":"https://github.com/rust-lang/rust/issues/49997","id":314651110,"number":49997,"title":"PF Sandbox doesnt compile on the latest nightly [linux only]","user":{"login":"rukai","id":5120858,"avatar_url":"https://avatars0.githubusercontent.com/u/5120858?v=4","gravatar_id":"","url":"https://api.github.com/users/rukai","html_url":"https://github.com/rukai","followers_url":"https://api.github.com/users/rukai/followers","following_url":"https://api.github.com/users/rukai/following{/other_user}","gists_url":"https://api.github.com/users/rukai/gists{/gist_id}","starred_url":"https://api.github.com/users/rukai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rukai/subscriptions","organizations_url":"https://api.github.com/users/rukai/orgs","repos_url":"https://api.github.com/users/rukai/repos","events_url":"https://api.github.com/users/rukai/events{/privacy}","received_events_url":"https://api.github.com/users/rukai/received_events","type":"User","site_admin":false},"labels":[{"id":31942528,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-nominated","name":"I-nominated","color":"e10c02","default":false},{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":147085028,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-nightly","name":"regression-from-stable-to-nightly","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-04-16T13:28:33Z","updated_at":"2018-04-18T12:21:33Z","closed_at":"2018-04-18T12:21:32Z","author_association":"NONE","body":"My crate PF Sandbox no longer compiles on linux on the latest nightly: https://github.com/rukai/PF_Sandbox\r\nIt was known working on linux at the last commit 26 days ago.\r\nI have tested it on windows and it compiles fine.\r\n\r\nI did have to update to the latest version of syn 0.13.1 and proc_macro2 0.3.6\r\nAs the old version of proc_macro2 seemed to no longer work, and gave me compile errors on the latest nightly.\r\nAfter fixing that I got these errors which dont seem relevent to that.\r\n\r\nI have both NLL and incremental compilation enabled so I tried with both disabled and it gives the same error.\r\nI can try to create a smaller repro later but I dont have time at the moment.\r\n```\r\nerror[E0277]: `std::sync::mpsc::Sender<(u64, i16, i16)>` cannot be shared between threads safely\r\n   --> pf_sandbox/src/vulkan/mod.rs:182:25\r\n    |\r\n182 |         let draw_text = DrawText::new(device.clone(), queue.clone(), swapchain.clone(), &images);\r\n    |                         ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<(u64, i16, i16)>` cannot be shared between threads safely\r\n    |\r\n    = help: within `winit::Window`, the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<(u64, i16, i16)>`\r\n    = note: required because it appears within the type `winit::os::unix::x11::Window`\r\n    = note: required because it appears within the type `winit::platform::platform::Window`\r\n    = note: required because it appears within the type `winit::Window`\r\n    = note: required by `vulkano_text::DrawText::new`\r\n\r\nerror[E0277]: `std::sync::mpsc::Sender<(u64, i16, i16)>` cannot be shared between threads safely\r\n   --> pf_sandbox/src/vulkan/mod.rs:271:13\r\n    |\r\n271 | /             Arc::new(\r\n272 | |                 Framebuffer::start(render_pass.clone())\r\n273 | |                 .add(multisampled_image.clone()).unwrap()\r\n274 | |                 .add(image.clone()).unwrap()\r\n...   |\r\n277 | |                 .build().unwrap()\r\n278 | |             ) as Arc<FramebufferAbstract + Send + Sync>\r\n    | |_____________^ `std::sync::mpsc::Sender<(u64, i16, i16)>` cannot be shared between threads safely\r\n    |\r\n    = help: within `vulkano::swapchain::Surface<winit::Window>`, the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<(u64, i16, i16)>`\r\n    = note: required because it appears within the type `winit::os::unix::x11::Window`\r\n    = note: required because it appears within the type `winit::platform::platform::Window`\r\n    = note: required because it appears within the type `winit::Window`\r\n    = note: required because it appears within the type `vulkano::swapchain::Surface<winit::Window>`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<vulkano::swapchain::Surface<winit::Window>>`\r\n    = note: required because it appears within the type `vulkano::swapchain::Swapchain<winit::Window>`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<vulkano::swapchain::Swapchain<winit::Window>>`\r\n    = note: required because it appears within the type `vulkano::image::SwapchainImage<winit::Window>`\r\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `std::sync::Arc<vulkano::image::SwapchainImage<winit::Window>>`\r\n    = note: required because it appears within the type `(((), std::sync::Arc<vulkano::image::AttachmentImage>), std::sync::Arc<vulkano::image::SwapchainImage<winit::Window>>)`\r\n    = note: required because it appears within the type `((((), std::sync::Arc<vulkano::image::AttachmentImage>), std::sync::Arc<vulkano::image::SwapchainImage<winit::Window>>), std::sync::Arc<vulkano::image::AttachmentImage>)`\r\n    = note: required because it appears within the type `(((((), std::sync::Arc<vulkano::image::AttachmentImage>), std::sync::Arc<vulkano::image::SwapchainImage<winit::Window>>), std::sync::Arc<vulkano::image::AttachmentImage>), std::sync::Arc<vulkano::image::AttachmentImage>)`\r\n    = note: required because it appears within the type `vulkano::framebuffer::Framebuffer<std::sync::Arc<vulkano::framebuffer::RenderPassAbstract + std::marker::Sync + std::marker::Send>, (((((), std::sync::Arc<vulkano::image::AttachmentImage>), std::sync::Arc<vulkano::image::SwapchainImage<winit::Window>>), std::sync::Arc<vulkano::image::AttachmentImage>), std::sync::Arc<vulkano::image::AttachmentImage>)>`\r\n    = note: required for the cast to the object type `vulkano::framebuffer::FramebufferAbstract + std::marker::Sync + std::marker::Send`\r\n\r\nerror[E0277]: `std::sync::mpsc::Sender<(u64, i16, i16)>` cannot be shared between threads safely\r\n   --> pf_sandbox/src/vulkan/mod.rs:431:34\r\n    |\r\n431 |                 self.draw_text = DrawText::new(self.device.clone(), self.queue.clone(), self.swapchain.clone(), &new_images);\r\n    |                                  ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<(u64, i16, i16)>` cannot be shared between threads safely\r\n    |\r\n    = help: within `winit::Window`, the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<(u64, i16, i16)>`\r\n    = note: required because it appears within the type `winit::os::unix::x11::Window`\r\n    = note: required because it appears within the type `winit::platform::platform::Window`\r\n    = note: required because it appears within the type `winit::Window`\r\n    = note: required by `vulkano_text::DrawText::new`\r\n\r\nerror: aborting due to 3 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: Could not compile `pf_sandbox`.\r\n\r\nTo learn more, run the command again with --verbose.\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49992","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49992/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49992/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49992/events","html_url":"https://github.com/rust-lang/rust/issues/49992","id":314492744,"number":49992,"title":"Rustc doesn't know when libstd function implements ops::Try","user":{"login":"ripread","id":7513944,"avatar_url":"https://avatars1.githubusercontent.com/u/7513944?v=4","gravatar_id":"","url":"https://api.github.com/users/ripread","html_url":"https://github.com/ripread","followers_url":"https://api.github.com/users/ripread/followers","following_url":"https://api.github.com/users/ripread/following{/other_user}","gists_url":"https://api.github.com/users/ripread/gists{/gist_id}","starred_url":"https://api.github.com/users/ripread/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ripread/subscriptions","organizations_url":"https://api.github.com/users/ripread/orgs","repos_url":"https://api.github.com/users/ripread/repos","events_url":"https://api.github.com/users/ripread/events{/privacy}","received_events_url":"https://api.github.com/users/ripread/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-16T03:55:46Z","updated_at":"2018-04-16T04:05:34Z","closed_at":"2018-04-16T04:05:34Z","author_association":"NONE","body":"When I compile and run this code\r\n\r\n    fn main() {\r\n        let temp = &env::current_dir();\r\n        println(\"{:?}\", temp);\r\n    }\r\n\r\nI get this output `Ok(\"/playground\")` [link](https://play.rust-lang.org/?gist=57e0be34e383545b97ef42d0cadfed6f&version=stable)\r\n\r\nWhen I add a `?` to the function call as seen in this code \r\n\r\n    fn main() {\r\n        let temp = &env::current_dir()?;\r\n        println(\"{:?}\", temp);\r\n    }\r\n\r\nI get the this compile error `error[E0277]: the '?' operator can only be used in a function that returns 'Result' ...` [link](https://play.rust-lang.org/?gist=1c2acf9ae581ec12cef074030ac673a1&version=stable)\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49978","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49978/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49978/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49978/events","html_url":"https://github.com/rust-lang/rust/issues/49978","id":314384050,"number":49978,"title":"How could I compile the Rust to JavaScript or asm.js?","user":{"login":"3442853561","id":21147967,"avatar_url":"https://avatars2.githubusercontent.com/u/21147967?v=4","gravatar_id":"","url":"https://api.github.com/users/3442853561","html_url":"https://github.com/3442853561","followers_url":"https://api.github.com/users/3442853561/followers","following_url":"https://api.github.com/users/3442853561/following{/other_user}","gists_url":"https://api.github.com/users/3442853561/gists{/gist_id}","starred_url":"https://api.github.com/users/3442853561/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/3442853561/subscriptions","organizations_url":"https://api.github.com/users/3442853561/orgs","repos_url":"https://api.github.com/users/3442853561/repos","events_url":"https://api.github.com/users/3442853561/events{/privacy}","received_events_url":"https://api.github.com/users/3442853561/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-15T04:13:26Z","updated_at":"2018-04-15T06:06:17Z","closed_at":"2018-04-15T06:06:17Z","author_association":"NONE","body":"There is a platform(WeChat Minigame) can not support the wasm.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49977","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49977/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49977/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49977/events","html_url":"https://github.com/rust-lang/rust/issues/49977","id":314383514,"number":49977,"title":"rust nightly install error (libwinthread-1.dll)","user":{"login":"sailfish009","id":17582766,"avatar_url":"https://avatars2.githubusercontent.com/u/17582766?v=4","gravatar_id":"","url":"https://api.github.com/users/sailfish009","html_url":"https://github.com/sailfish009","followers_url":"https://api.github.com/users/sailfish009/followers","following_url":"https://api.github.com/users/sailfish009/following{/other_user}","gists_url":"https://api.github.com/users/sailfish009/gists{/gist_id}","starred_url":"https://api.github.com/users/sailfish009/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sailfish009/subscriptions","organizations_url":"https://api.github.com/users/sailfish009/orgs","repos_url":"https://api.github.com/users/sailfish009/repos","events_url":"https://api.github.com/users/sailfish009/events{/privacy}","received_events_url":"https://api.github.com/users/sailfish009/received_events","type":"User","site_admin":false},"labels":[{"id":325438536,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-rustbuild","name":"A-rustbuild","color":"d7e102","default":false},{"id":266005714,"url":"https://api.github.com/repos/rust-lang/rust/labels/O-windows-gnu","name":"O-windows-gnu","color":"6e6ec0","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-15T04:00:13Z","updated_at":"2018-04-21T05:31:27Z","closed_at":"2018-04-21T05:31:27Z","author_association":"NONE","body":"i am trying to build rust nightly version ( https://github.com/rust-lang/rust/commit/21dae950bebab7376d2bcb92299861e6cd05299d )\r\n\r\n$ ./x.py build \r\n\r\n```\r\n   Compiling rustdoc v0.0.0 (file:///C:/msys32/work/rust/src/librustdoc)\r\n   Compiling rustdoc-tool v0.0.0 (file:///C:/msys32/work/rust/src/tools/rustdoc)\r\n    Finished release [optimized] target(s) in 129.28 secs\r\nBuild completed successfully in 0:42:32\r\n```\r\n\r\n$ ./x.py install\r\n\r\n```\r\n    Finished release [optimized] target(s) in 233.83 secs\r\nInstall docs stage2 (Some(\"i686-pc-windows-gnu\"))\r\ninstall: uninstalling component 'rust-docs'\r\ninstall: creating uninstall script at /usr/local/lib/rustlib/uninstall.sh\r\ninstall: installing component 'rust-docs'\r\n\r\n    Rust documentation is installed.\r\n\r\nDist std stage2 (i686-pc-windows-gnu -> i686-pc-windows-gnu)\r\nInstall std stage2 (Some(\"i686-pc-windows-gnu\"))\r\ninstall: uninstalling component 'rust-std-i686-pc-windows-gnu'\r\ninstall: creating uninstall script at /usr/local/lib/rustlib/uninstall.sh\r\ninstall: installing component 'rust-std-i686-pc-windows-gnu'\r\n\r\n    std is standing at the ready.\r\n\r\nDist rustc stage2 (i686-pc-windows-gnu)\r\nthread 'main' panicked at 'failed to copy `C:\\msys32\\mingw32\\bin\\libwinpthread-1.dll` to `C:/msys32/work/rust/build\\tmp/dist\\rustc-1.27.0-dev-i686-pc-windows-gnu-image\\bin/libwinthread-1.dll`: Process can not access because another process is using the file. (os error 32)', bootstrap\\lib.rs:1058:13\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nfailed to run: C:/msys32/work/rust/build/bootstrap/debug/bootstrap install\r\nBuild completed unsuccessfully in 0:23:04\r\n```\r\n\r\n$ pacman -S  mingw-w64-i686-gcc\r\n\r\n$ gcc -v\r\n\r\n```\r\nUsing built-in specs.\r\nCOLLECT_GCC=C:\\msys32\\mingw32\\bin\\gcc.exe\r\nCOLLECT_LTO_WRAPPER=C:/msys32/mingw32/bin/../lib/gcc/i686-w64-mingw32/7.3.0/lto-wrapper.exe\r\nTarget: i686-w64-mingw32\r\nConfigured with: ../gcc-7.3.0/configure --prefix=/mingw32 --with-local-prefix=/mingw32/local --build=i686-w64-mingw32 --host=i686-w64-mingw32 --target=i686-w64-mingw32 --with-native-system-header-dir=/mingw32/i686-w64-mingw32/include --libexecdir=/mingw32/lib --enable-bootstrap --with-arch=i686 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --enable-libstdcxx-filesystem-ts=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw32 --with-mpfr=/mingw32 --with-mpc=/mingw32 --with-isl=/mingw32 --with-pkgversion='Rev1, Built by MSYS2 project' --with-bugurl=https://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld --disable-sjlj-exceptions --with-dwarf2\r\nThread model: posix\r\ngcc version 7.3.0 (Rev1, Built by MSYS2 project)\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49973","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49973/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49973/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49973/events","html_url":"https://github.com/rust-lang/rust/issues/49973","id":314375565,"number":49973,"title":"Incorrect niche filling if enum contains both i32 min and i32 max variants","user":{"login":"dtolnay","id":1940490,"avatar_url":"https://avatars2.githubusercontent.com/u/1940490?v=4","gravatar_id":"","url":"https://api.github.com/users/dtolnay","html_url":"https://github.com/dtolnay","followers_url":"https://api.github.com/users/dtolnay/followers","following_url":"https://api.github.com/users/dtolnay/following{/other_user}","gists_url":"https://api.github.com/users/dtolnay/gists{/gist_id}","starred_url":"https://api.github.com/users/dtolnay/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dtolnay/subscriptions","organizations_url":"https://api.github.com/users/dtolnay/orgs","repos_url":"https://api.github.com/users/dtolnay/repos","events_url":"https://api.github.com/users/dtolnay/events{/privacy}","received_events_url":"https://api.github.com/users/dtolnay/received_events","type":"User","site_admin":false},"labels":[{"id":267612997,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-unsound%20%F0%9F%92%A5","name":"I-unsound 💥","color":"e11d21","default":false},{"id":262252840,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable","name":"regression-from-stable-to-stable","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-15T01:05:53Z","updated_at":"2018-04-18T14:45:15Z","closed_at":"2018-04-18T14:45:15Z","author_association":"MEMBER","body":"```rust\r\n#![allow(dead_code)]\r\n\r\n#[derive(Debug)]\r\n#[repr(i32)]\r\nenum E {\r\n    Min = -2147483648i32,\r\n    Max = 2147483647i32,\r\n}\r\n\r\nfn main() {\r\n    println!(\"{:?}\", Some(E::Min));\r\n}\r\n```\r\n\r\nRust 1.23.0 correctly prints `Some(Min)`. Rust 1.24.0 incorrectly prints `None`.\r\n\r\nMentioning @eddyb because this sounds potentially relevant to #45225 or follow-on optimization.\r\n\r\n(Discovered by @udoprog in #rust.)","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49964","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49964/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49964/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49964/events","html_url":"https://github.com/rust-lang/rust/issues/49964","id":314331318,"number":49964,"title":"Confused by the error message","user":{"login":"juchiast","id":20658608,"avatar_url":"https://avatars1.githubusercontent.com/u/20658608?v=4","gravatar_id":"","url":"https://api.github.com/users/juchiast","html_url":"https://github.com/juchiast","followers_url":"https://api.github.com/users/juchiast/followers","following_url":"https://api.github.com/users/juchiast/following{/other_user}","gists_url":"https://api.github.com/users/juchiast/gists{/gist_id}","starred_url":"https://api.github.com/users/juchiast/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/juchiast/subscriptions","organizations_url":"https://api.github.com/users/juchiast/orgs","repos_url":"https://api.github.com/users/juchiast/repos","events_url":"https://api.github.com/users/juchiast/events{/privacy}","received_events_url":"https://api.github.com/users/juchiast/received_events","type":"User","site_admin":false},"labels":[{"id":268744493,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-const-fn","name":"A-const-fn","color":"d7e102","default":false},{"id":235791,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics","name":"A-diagnostics","color":"d7e102","default":false},{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-14T14:01:24Z","updated_at":"2018-04-15T00:46:43Z","closed_at":"2018-04-15T00:46:43Z","author_association":"NONE","body":"I'm trying to write this code:\r\n``` rust\r\nfn binary_dump<T: Sized>(f: T) -> String {\r\n    let v = [0u8; std::mem::size_of::<T>()];\r\n    String::new()\r\n}\r\n```\r\n\r\n`rustc` gives this error message:\r\n```\r\nerror[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\r\n --> src/main.rs:2:19\r\n  |\r\n2 |     let v = [0u8; std::mem::size_of::<T>()];\r\n  |                   ^^^^^^^^^^^^^^^^^^^^^^ `T` does not have a constant size known at compile-time\r\n  |\r\n  = help: the trait `std::marker::Sized` is not implemented for `T`\r\n  = help: consider adding a `where T: std::marker::Sized` bound\r\n  = note: required by `std::mem::size_of`\r\n```\r\n\r\nThis is confusing because `T` already have `Sized`.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49961","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49961/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49961/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49961/events","html_url":"https://github.com/rust-lang/rust/issues/49961","id":314318333,"number":49961,"title":"Trait method `std::os::windows::fs::OpenOptionsExt::security_qos_flags()` returns a `&mut OpenOptions` instead of `&mut Self`","user":{"login":"Ereski","id":92037,"avatar_url":"https://avatars2.githubusercontent.com/u/92037?v=4","gravatar_id":"","url":"https://api.github.com/users/Ereski","html_url":"https://github.com/Ereski","followers_url":"https://api.github.com/users/Ereski/followers","following_url":"https://api.github.com/users/Ereski/following{/other_user}","gists_url":"https://api.github.com/users/Ereski/gists{/gist_id}","starred_url":"https://api.github.com/users/Ereski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Ereski/subscriptions","organizations_url":"https://api.github.com/users/Ereski/orgs","repos_url":"https://api.github.com/users/Ereski/repos","events_url":"https://api.github.com/users/Ereski/events{/privacy}","received_events_url":"https://api.github.com/users/Ereski/received_events","type":"User","site_admin":false},"labels":[{"id":123109,"url":"https://api.github.com/repos/rust-lang/rust/labels/O-windows","name":"O-windows","color":"6e6ec0","default":false},{"id":211668062,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-libs","name":"T-libs","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-04-14T10:29:30Z","updated_at":"2018-04-19T19:49:07Z","closed_at":"2018-04-19T19:49:07Z","author_association":"NONE","body":"https://doc.rust-lang.org/src/std/sys/windows/ext/fs.rs.html#279-281\r\n\r\nThere's no reason for that method to return a concrete type instead of `Self`. I am currently writing an `OpenOptions` wrapper and that method is preventing me from implementing `OpenOptionsExt` for the wrapper. However, the trait is already stable (even if most likely unimplemented outside `libstd`) so I'm not sure what's the proper way of changing this?","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49960","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49960/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49960/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49960/events","html_url":"https://github.com/rust-lang/rust/issues/49960","id":314309948,"number":49960,"title":"Shouldn't ICE when owned_box has wrong type","user":{"login":"glandium","id":1038527,"avatar_url":"https://avatars3.githubusercontent.com/u/1038527?v=4","gravatar_id":"","url":"https://api.github.com/users/glandium","html_url":"https://github.com/glandium","followers_url":"https://api.github.com/users/glandium/followers","following_url":"https://api.github.com/users/glandium/following{/other_user}","gists_url":"https://api.github.com/users/glandium/gists{/gist_id}","starred_url":"https://api.github.com/users/glandium/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glandium/subscriptions","organizations_url":"https://api.github.com/users/glandium/orgs","repos_url":"https://api.github.com/users/glandium/repos","events_url":"https://api.github.com/users/glandium/events{/privacy}","received_events_url":"https://api.github.com/users/glandium/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-04-14T08:11:22Z","updated_at":"2018-04-14T08:41:41Z","closed_at":"2018-04-14T08:41:41Z","author_association":"CONTRIBUTOR","body":"Starting from this code:\r\n\r\n```rust\r\n#![feature(lang_items, box_syntax, owned_box, start)]\r\n#![no_std]\r\n\r\n#[start]\r\npub fn start(_: isize, _: *const *const u8) -> isize { \r\n    let x = box 1i32;\r\n    0\r\n}\r\n\r\n#[lang = \"eh_personality\"] extern fn eh_personality() {}\r\n#[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\r\n#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\r\n\r\n#[lang = \"exchange_malloc\"]\r\nunsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\r\n    core::ptr::null_mut()\r\n}\r\n```\r\n\r\nAdding various `owned_box` patterns leads to different kinds of ICE:\r\n```rust\r\n#[lang = \"owned_box\"]\r\nstruct Box;\r\n```\r\nyields\r\n```\r\nthread 
8000
'main' panicked at 'index out of bounds: the len is 0 but the index is 0', /checkout/src/libcore/slice/mod.rs:865:10\r\n```\r\n\r\n```rust\r\n#[lang = \"owned_box\"]\r\nstruct Box<T>(Option<T>);\r\n```\r\n\r\nyields\r\n```\r\nerror: internal compiler error: librustc_trans/mir/operand.rs:175: Deref of by-Ref operand OperandRef(Ref((%\"Box<i32>\"*:  %3 = alloca %\"Box<i32>\", align 4), Align { abi: 2, pref: 3 }) @ TyLayout { ty: Box<i32>, details: LayoutDetails { variants: Single { index: 0 }, fields: Arbitrary { offsets: [Size { raw: 0 }], memory_index: [0] }, abi: Aggregate { sized: true }, align: Align { abi: 2, pref: 3 }, size: Size { raw: 8 } } })\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:542:9\r\n```\r\n\r\n```rust\r\n#[lang = \"owned_box\"]\r\nstruct Box<T>(u8, T);\r\n```\r\nyields\r\n```\r\nerror: internal compiler error: librustc/ty/layout.rs:2245: TyLayout::field_type(TyLayout { ty: *mut i32, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Pointer, valid_range: 0..=18446744073709551615 }), align: Align { abi: 3, pref: 3 }, size: Size { raw: 8 } } }): not applicable\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:542:9\r\n```\r\n\r\n```rust\r\n#[lang = \"owned_box\"]\r\nstruct Box<T, U>(T, U);\r\n```\r\nyields\r\n```\r\nerror: internal compiler error: librustc/ty/subst.rs:493: Type parameter `U/#1` (U/1) out of range when substituting (root type=Some(U)) substs=[i32]\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:487:9\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49944","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49944/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49944/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49944/events","html_url":"https://github.com/rust-lang/rust/issues/49944","id":314153156,"number":49944,"title":"Inference regression in 1.26","user":{"login":"pietroalbini","id":2299951,"avatar_url":"https://avatars3.githubusercontent.com/u/2299951?v=4","gravatar_id":"","url":"https://api.github.com/users/pietroalbini","html_url":"https://github.com/pietroalbini","followers_url":"https://api.github.com/users/pietroalbini/followers","following_url":"https://api.github.com/users/pietroalbini/following{/other_user}","gists_url":"https://api.github.com/users/pietroalbini/gists{/gist_id}","starred_url":"https://api.github.com/users/pietroalbini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pietroalbini/subscriptions","organizations_url":"https://api.github.com/users/pietroalbini/orgs","repos_url":"https://api.github.com/users/pietroalbini/repos","events_url":"https://api.github.com/users/pietroalbini/events{/privacy}","received_events_url":"https://api.github.com/users/pietroalbini/received_events","type":"User","site_admin":false},"labels":[{"id":604454086,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-inference","name":"A-inference","color":"d7e102","default":false},{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":203429200,"url":"https://api.github.com/repos/rust-lang/rust/labels/P-high","name":"P-high","color":"eb6420","default":false},{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/48","html_url":"https://github.com/rust-lang/rust/milestone/48","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/48/labels","id":3125374,"number":48,"title":"1.26","description":"","creator":{"login":"Mark-Simulacrum","id":5047365,"avatar_url":"https://avatars0.githubusercontent.com/u/5047365?v=4","gravatar_id":"","url":"https://api.github.com/users/Mark-Simulacrum","html_url":"https://github.com/Mark-Simulacrum","followers_url":"https://api.github.com/users/Mark-Simulacrum/followers","following_url":"https://api.github.com/users/Mark-Simulacrum/following{/other_user}","gists_url":"https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}","starred_url":"https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mark-Simulacrum/subscriptions","organizations_url":"https://api.github.com/users/Mark-Simulacrum/orgs","repos_url":"https://api.github.com/users/Mark-Simulacrum/repos","events_url":"https://api.github.com/users/Mark-Simulacrum/events{/privacy}","received_events_url":"https://api.github.com/users/Mark-Simulacrum/received_events","type":"User","site_admin":false},"open_issues":15,"closed_issues":10,"state":"open","created_at":"2018-02-19T01:33:50Z","updated_at":"2018-04-21T07:16:40Z","due_on":"2018-05-10T07:00:00Z","closed_at":null},"comments":8,"created_at":"2018-04-13T15:30:20Z","updated_at":"2018-04-20T20:58:39Z","closed_at":"2018-04-20T20:58:39Z","author_association":"MEMBER","body":"There is an inference regression for a rust project.\r\n\r\n* [jonhoo/rust-at-sunrise](https://github.com/jonhoo/rust-at-sunrise) regressed from stable to beta ([build log](http://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/gh/jonhoo.rust-at-sunrise.52fcbf516f1f051d8cacad852f4a800b264194fc/log.txt)) cc @jonhoo","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49942","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49942/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49942/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49942/events","html_url":"https://github.com/rust-lang/rust/issues/49942","id":314151064,"number":49942,"title":"Regression in 1.26: cannot find function `assert_test_result` in module `self::test`","user":{"login":"pietroalbini","id":2299951,"avatar_url":"https://avatars3.githubusercontent.com/u/2299951?v=4","gravatar_id":"","url":"https://api.github.com/users/pietroalbini","html_url":"https://github.com/pietroalbini","followers_url":"https://api.github.com/users/pietroalbini/followers","following_url":"https://api.github.com/users/pietroalbini/following{/other_user}","gists_url":"https://api.github.com/users/pietroalbini/gists{/gist_id}","starred_url":"https://api.github.com/users/pietroalbini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pietroalbini/subscriptions","organizations_url":"https://api.github.com/users/pietroalbini/orgs","repos_url":"https://api.github.com/users/pietroalbini/repos","events_url":"https://api.github.com/users/pietroalbini/events{/privacy}","received_events_url":"https://api.github.com/users/pietroalbini/received_events","type":"User","site_admin":false},"labels":[{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":31942528,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-nominated","name":"I-nominated","color":"e10c02","default":false},{"id":211668062,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-libs","name":"T-libs","color":"bfd4f2","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/48","html_url":"https://github.com/rust-lang/rust/milestone/48","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/48/labels","id":3125374,"number":48,"title":"1.26","description":"","creator":{"login":"Mark-Simulacrum","id":5047365,"avatar_url":"https://avatars0.githubusercontent.com/u/5047365?v=4","gravatar_id":"","url":"https://api.github.com/users/Mark-Simulacrum","html_url":"https://github.com/Mark-Simulacrum","followers_url":"https://api.github.com/users/Mark-Simulacrum/followers","following_url":"https://api.github.com/users/Mark-Simulacrum/following{/other_user}","gists_url":"https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}","starred_url":"https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mark-Simulacrum/subscriptions","organizations_url":"https://api.github.com/users/Mark-Simulacrum/orgs","repos_url":"https://api.github.com/users/Mark-Simulacrum/repos","events_url":"https://api.github.com/users/Mark-Simulacrum/events{/privacy}","received_events_url":"https://api.github.com/users/Mark-Simulacrum/received_events","type":"User","site_admin":false},"open_issues":15,"closed_issues":10,"state":"open","created_at":"2018-02-19T01:33:50Z","updated_at":"2018-04-21T07:16:40Z","due_on":"2018-05-10T07:00:00Z","closed_at":null},"comments":5,"created_at":"2018-04-13T15:24:42Z","updated_at":"2018-04-19T22:50:02Z","closed_at":"2018-04-19T22:50:01Z","author_association":"MEMBER","body":"Multiple crates are failing with the error `cannot find function 'assert_test_result' in module 'self::test'\r\n`.\r\n\r\n* [html5ever](https://crates.io/crates/html5ever) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/html5ever-0.22.0/log.txt)) cc @SimonSapin\r\n* [idna](https://crates.io/crates/idna) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/idna-0.1.4/log.txt)) cc @SimonSapin\r\n* [rustc-test](https://crates.io/crates/rustc-test) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/rustc-test-0.1.5/log.txt)) cc @SimonSapin\r\n* [url](https://crates.io/crates/url) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/url-1.7.0/log.txt)) cc @SimonSapin\r\n* [xml5ever](https://crates.io/crates/xml5ever) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/xml5ever-0.12.0/log.txt)) cc @SimonSapin\r\n* [xmlparser](https://crates.io/crates/xmlparser) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/xmlparser-0.1.2/log.txt)) cc @RazrFalcon\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49941","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49941/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49941/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49941/events","html_url":"https://github.com/rust-lang/rust/issues/49941","id":314149819,"number":49941,"title":"Regression in 1.26: duplicate name `Bound`","user":{"login":"pietroalbini","id":2299951,"avatar_url":"https://avatars3.githubusercontent.com/u/2299951?v=4","gravatar_id":"","url":"https://api.github.com/users/pietroalbini","html_url":"https://github.com/pietroalbini","followers_url":"https://api.github.com/users/pietroalbini/followers","following_url":"https://api.github.com/users/pietroalbini/following{/other_user}","gists_url":"https://api.github.com/users/pietroalbini/gists{/gist_id}","starred_url":"https://api.github.com/users/pietroalbini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pietroalbini/subscriptions","organizations_url":"https://api.github.com/users/pietroalbini/orgs","repos_url":"https://api.github.com/users/pietroalbini/repos","events_url":"https://api.github.com/users/pietroalbini/events{/privacy}","received_events_url":"https://api.github.com/users/pietroalbini/received_events","type":"User","site_admin":false},"labels":[{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":31942528,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-nominated","name":"I-nominated","color":"e10c02","default":false},{"id":211668062,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-libs","name":"T-libs","color":"bfd4f2","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/48","html_url":"https://github.com/rust-lang/rust/milestone/48","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/48/labels","id":3125374,"number":48,"title":"1.26","description":"","creator":{"login":"Mark-Simulacrum","id":5047365,"avatar_url":"https://avatars0.githubusercontent.com/u/5047365?v=4","gravatar_id":"","url":"https://api.github.com/users/Mark-Simulacrum","html_url":"https://github.com/Mark-Simulacrum","followers_url":"https://api.github.com/users/Mark-Simulacrum/followers","following_url":"https://api.github.com/users/Mark-Simulacrum/following{/other_user}","gists_url":"https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}","starred_url":"https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mark-Simulacrum/subscriptions","organizations_url":"https://api.github.com/users/Mark-Simulacrum/orgs","repos_url":"https://api.github.com/users/Mark-Simulacrum/repos","events_url":"https://api.github.com/users/Mark-Simulacrum/events{/privacy}","received_events_url":"https://api.github.com/users/Mark-Simulacrum/received_events","type":"User","site_admin":false},"open_issues":15,"closed_issues":10,"state":"open","created_at":"2018-02-19T01:33:50Z","updated_at":"2018-04-21T07:16:40Z","due_on":"2018-05-10T07:00:00Z","closed_at":null},"comments":4,"created_at":"2018-04-13T15:21:28Z","updated_at":"2018-04-19T22:49:39Z","closed_at":"2018-04-19T22:49:38Z","author_association":"MEMBER","body":"There is a crate that regressed thanks to the introduction of `std::ops::Bound`.\r\n\r\n* [gfx_scene](https://crates.io/crates/gfx_scene) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/gfx_scene-0.8.0/log.txt)) cc @kvark\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49940","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49940/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49940/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49940/events","html_url":"https://github.com/rust-lang/rust/issues/49940","id":314144914,"number":49940,"title":"Regression in 1.26: lower range bound must be less than or equal to upper","user":{"login":"pietroalbini","id":2299951,"avatar_url":"https://avatars3.githubusercontent.com/u/2299951?v=4","gravatar_id":"","url":"https://api.github.com/users/pietroalbini","html_url":"https://github.com/pietroalbini","followers_url":"https://api.github.com/users/pietroalbini/followers","following_url":"https://api.github.com/users/pietroalbini/following{/other_user}","gists_url":"https://api.github.com/users/pietroalbini/gists{/gist_id}","starred_url":"https://api.github.com/users/pietroalbini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pietroalbini/subscriptions","organizations_url":"https://api.github.com/users/pietroalbini/orgs","repos_url":"https://api.github.com/users/pietroalbini/repos","events_url":"https://api.github.com/users/pietroalbini/events{/privacy}","received_events_url":"https://api.github.com/users/pietroalbini/received_events","type":"User","site_admin":false},"labels":[{"id":900795185,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-const-eval","name":"A-const-eval","color":"d7e102","default":false},{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":31942528,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-nominated","name":"I-nominated","color":"e10c02","default":false},{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":{"login":"oli-obk","id":332036,"avatar_url":"https://avatars2.githubusercontent.com/u/332036?v=4","gravatar_id":"","url":"https://api.github.com/users/oli-obk","html_url":"https://github.com/oli-obk","followers_url":"https://api.github.com/users/oli-obk/followers","following_url":"https://api.github.com/users/oli-obk/following{/other_user}","gists_url":"https://api.github.com/users/oli-obk/gists{/gist_id}","starred_url":"https://api.github.com/users/oli-obk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oli-obk/subscriptions","organizations_url":"https://api.github.com/users/oli-obk/orgs","repos_url":"https://api.github.com/users/oli-obk/repos","events_url":"https://api.github.com/users/oli-obk/events{/privacy}","received_events_url":"https://api.github.com/users/oli-obk/received_events","type":"User","site_admin":false},"assignees":[{"login":"oli-obk","id":332036,"avatar_url":"https://avatars2.githubusercontent.com/u/332036?v=4","gravatar_id":"","url":"https://api.github.com/users/oli-obk","html_url":"https://github.com/oli-obk","followers_url":"https://api.github.com/users/oli-obk/followers","following_url":"https://api.github.com/users/oli-obk/following{/other_user}","gists_url":"https://api.github.com/users/oli-obk/gists{/gist_id}","starred_url":"https://api.github.com/users/oli-obk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/oli-obk/subscriptions","organizations_url":"https://api.github.com/users/oli-obk/orgs","repos_url":"https://api.github.com/users/oli-obk/repos","events_url":"https://api.github.com/users/oli-obk/events{/privacy}","received_events_url":"https://api.github.com/users/oli-obk/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/48","html_url":"https://github.com/rust-lang/rust/milestone/48","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/48/labels","id":3125374,"number":48,"title":"1.26","description":"","creator":{"login":"Mark-Simulacrum","id":5047365,"avatar_url":"https://avatars0.githubusercontent.com/u/5047365?v=4","gravatar_id":"","url":"https://api.github.com/users/Mark-Simulacrum","html_url":"https://github.com/Mark-Simulacrum","followers_url":"https://api.github.com/users/Mark-Simulacrum/followers","following_url":"https://api.github.com/users/Mark-Simulacrum/following{/other_user}","gists_url":"https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}","starred_url":"https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mark-Simulacrum/subscriptions","organizations_url":"https://api.github.com/users/Mark-Simulacrum/orgs","repos_url":"https://api.github.com/users/Mark-Simulacrum/repos","events_url":"https://api.github.com/users/Mark-Simulacrum/events{/privacy}","received_events_url":"https://api.github.com/users/Mark-Simulacrum/received_events","type":"User","site_admin":false},"open_issues":15,"closed_issues":10,"state":"open","created_at":"2018-02-19T01:33:50Z","updated_at":"2018-04-21T07:16:40Z","due_on":"2018-05-10T07:00:00Z","closed_at":null},"comments":4,"created_at":"2018-04-13T15:08:27Z","updated_at":"2018-04-20T08:04:31Z","closed_at":"2018-04-20T08:04:31Z","author_association":"MEMBER","body":"The previous version of the `chrono-humanize` crate fails to compile with the `lower range bound must be less than or equal to upper` error (see the build log). No error nor warning was present in the 1.25 release.\r\n\r\n```\r\nerror[E0030]: lower range bound must be less than or equal to upper\r\n   --> src/humantime.rs:88:13\r\n    |\r\n 88 |             MIN...-1 => Tense::Past,\r\n    |             ^^^ lower bound larger than upper bound\r\n```\r\n\r\nSince `MIN` is actually `std::i64::MIN`, the error is wrong and should be fixed.\r\n\r\n* [chrono-humanize 0.0.10](https://crates.io/crates/chrono-humanize/0.0.10) regressed from stable to beta ([build log](https://cargobomb-reports.s3.amazonaws.com/beta-1.26.0-beta.2/beta-2018-04-06/reg/chrono-humanize-0.0.10/log.txt)) cc @imp\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49926","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49926/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49926/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49926/events","html_url":"https://github.com/rust-lang/rust/issues/49926","id":314065036,"number":49926,"title":"impossible case reached on lifetime inference for impl Trait in return position","user":{"login":"nivkner","id":22821514,"avatar_url":"https://avatars0.githubusercontent.com/u/22821514?v=4","gravatar_id":"","url":"https://api.github.com/users/nivkner","html_url":"https://github.com/nivkner","followers_url":"https://api.github.com/users/nivkner/followers","following_url":"https://api.github.com/users/nivkner/following{/other_user}","gists_url":"https://api.github.com/users/nivkner/gists{/gist_id}","starred_url":"https://api.github.com/users/nivkner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nivkner/subscriptions","organizations_url":"https://api.github.com/users/nivkner/orgs","repos_url":"https://api.github.com/users/nivkner/repos","events_url":"https://api.github.com/users/nivkner/events{/privacy}","received_events_url":"https://api.github.com/users/nivkner/received_events","type":"User","site_admin":false},"labels":[{"id":631673608,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-impl-trait","name":"A-impl-trait","color":"d7e102","default":false},{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":9618520,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-ICE","name":"I-ICE","color":"e10c02","default":false},{"id":31942528,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-nominated","name":"I-nominated","color":"e10c02","default":false},{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/48","html_url":"https://github.com/rust-lang/rust/milestone/48","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/48/labels","id":3125374,"number":48,"title":"1.26","description":"","creator":{"login":"Mark-Simulacrum","id":5047365,"avatar_url":"https://avatars0.githubusercontent.com/u/5047365?v=4","gravatar_id":"","url":"https://api.github.com/users/Mark-Simulacrum","html_url":"https://github.com/Mark-Simulacrum","followers_url":"https://api.github.com/users/Mark-Simulacrum/followers","following_url":"https://api.github.com/users/Mark-Simulacrum/following{/other_user}","gists_url":"https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}","starred_url":"https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mark-Simulacrum/subscriptions","organizations_url":"https://api.github.com/users/Mark-Simulacrum/orgs","repos_url":"https://api.github.com/users/Mark-Simulacrum/repos","events_url":"https://api.github.com/users/Mark-Simulacrum/events{/privacy}","received_events_url":"https://api.github.com/users/Mark-Simulacrum/received_events","type":"User","site_admin":false},"open_issues":15,"closed_issues":10,"state":"open","created_at":"2018-02-19T01:33:50Z","updated_at":"2018-04-21T07:16:40Z","due_on":"2018-05-10T07:00:00Z","closed_at":null},"comments":2,"created_at":"2018-04-13T11:07:00Z","updated_at":"2018-04-21T07:16:40Z","closed_at":"2018-04-21T07:16:40Z","author_association":"CONTRIBUTOR","body":"## summery\r\nwhen the inferred associated types of the trait contain lifetimes, the compiler produces an internal error\r\n\r\n## details\r\nI tried this code:\r\n\r\n```rust\r\nfn iter() -> impl Iterator {\r\n    (1..2).map(|_| \"hello\")\r\n}\r\n```\r\n\r\nI expected to see this happen:\r\nthe return type is inferred to be `impl Iterator<Item=&'static str>`,\r\nwhich, when written like that, is accepted by the compiler.\r\n\r\nInstead, this happened:\r\n```\r\nerror: internal compiler error: librustc/infer/error_reporting/mod.rs:184: impossible case reached\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:542:9\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nerror: aborting due to previous error\r\n```\r\n\r\n## Meta\r\n\r\n```\r\nrustc 1.25.0 (84203cac6 2018-03-25)  \r\nbinary: rustc                        \r\ncommit-hash: 84203cac67e65ca8640b8392348411098c856985\r\ncommit-date: 2018-03-25                              \r\nhost: x86_64-unknown-linux-gnu                      \r\nrelease: 1.25.0                                       \r\nLLVM version: 6.0\r\n```\r\n\r\n\r\n<details/>\r\n<summary>Backtrace</summary>\r\n\r\n```\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:206\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:222\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:401\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::session::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::session::opt_span_bug_fmt\r\n  13: rustc::session::bug_fmt\r\n  14: rustc::infer::error_reporting::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::msg_span_from_free_region\r\n  15: <rustc::infer::anon_types::ReverseMapper<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_region\r\n  16: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable<'tcx> for &'tcx rustc::ty::TyS<'tcx>>::super_fold_with\r\n  17: <rustc::infer::anon_types::ReverseMapper<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  18: <rustc_data_structures::accumulate_vec::AccumulateVec<A> as core::iter::traits::FromIterator<<A as rustc_data_structures::array_vec::Array>::Element>>::from_iter\r\n  19: rustc::ty::fold::TypeFoldable::fold_with\r\n  20: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable<'tcx> for &'tcx rustc::ty::TyS<'tcx>>::super_fold_with\r\n  21: <rustc::infer::anon_types::ReverseMapper<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  22: core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &'a mut F>::call_once\r\n  23: <rustc_data_structures::accumulate_vec::AccumulateVec<A> as core::iter::traits::FromIterator<<A as rustc_data_structures::array_vec::Array>::Element>>::from_iter\r\n  24: <T as rustc::ty::context::InternIteratorElement<T, R>>::intern_with\r\n  25: <rustc::infer::anon_types::ReverseMapper<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  26: <rustc_data_structures::accumulate_vec::AccumulateVec<A> as core::iter::traits::FromIterator<<A as rustc_data_structures::array_vec::Array>::Element>>::from_iter\r\n  27: rustc::ty::fold::TypeFoldable::fold_with\r\n  28: rustc::ty::structural_impls::<impl rustc::ty::fold::TypeFoldable<'tcx> for &'tcx rustc::ty::TyS<'tcx>>::super_fold_with\r\n  29: <rustc::infer::anon_types::ReverseMapper<'cx, 'gcx, 'tcx> as rustc::ty::fold::TypeFolder<'gcx, 'tcx>>::fold_ty\r\n  30: rustc::infer::anon_types::<impl rustc::infer::InferCtxt<'a, 'gcx, 'tcx>>::infer_anon_definition_from_instantiation\r\n  31: rustc_typeck::check::writeback::WritebackCx::visit_anon_types\r\n  32: rustc_typeck::check::writeback::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::resolve_type_vars_in_body\r\n  33: rustc::ty::context::tls::with_related_context\r\n  34: rustc::infer::InferCtxtBuilder::enter\r\n  35: rustc_typeck::check::typeck_tables_of\r\n  36: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_tables_of<'tcx>>::compute_result\r\n  37: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  38: rustc::ty::context::tls::with_related_context\r\n  39: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_tables_of<'tcx>>::force_with_lock\r\n  40: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_tables_of<'tcx>>::try_get          \r\n  41: rustc::ty::maps::TyCtxtAt::typeck_tables_of                                                 \r\n  42: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_tables_of<'tcx>>::ensure           \r\n  43: rustc::session::Session::track_errors                                                 \r\n  44: rustc_typeck::check::typeck_item_bodies                                               \r\n  45: rustc::dep_graph::graph::DepGraph::with_task_impl                                        \r\n  46: rustc::ty::context::tls::with_related_context                                    \r\n  47: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_item_bodies<'tcx>>::force_with_lock\r\n  48: rustc::ty::maps::<impl rustc::ty::maps::queries::typeck_item_bodies<'tcx>>::try_get        \r\n  49: rustc::ty::maps::TyCtxtAt::typeck_item_bodies                                      \r\n  50: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::typeck_item_bodies\r\n  51: rustc_typeck::check_crate                                                             \r\n  52: rustc::ty::context::tls::enter_context       \r\n  53: <std::thread::local::LocalKey<T>>::with                                                    \r\n  54: rustc::ty::context::TyCtxt::create_and_enter                                       \r\n  55: rustc_driver::driver::compile_input          \r\n  56: rustc_driver::run_compiler_impl                                                       \r\n  57: syntax::with_globals             \r\n  58: rustc_driver::run                     \r\n  59: rustc_driver::main                           \r\n  60: std::rt::lang_start::{{closure}}              \r\n  61: std::panicking::try::do_call             \r\n             at libstd/rt.rs:59        \r\n             at libstd/panicking.rs:305\r\n  62: __rust_maybe_catch_panic               \r\n             at libpanic_unwind/lib.rs:101                                                                       \r\n  63: std::rt::lang_start_internal                                                                                      \r\n             at libstd/panicking.rs:284                                                                                      \r\n             at libstd/panic.rs:361                                                                                 \r\n             at libstd/rt.rs:58                                                                                                                                        \r\n  64: main                                    \r\n  65: __libc_start_main                                                           
5033
                                           \r\n  66: <unknown>                                                                                                     \r\nquery stack during panic:                                                                       \r\n#0 [typeck_tables_of] processing `iter`                                                                                                                                \r\n --> src/main.rs:1:1                                                     \r\n  |                                                                                                                 \r\n1 | fn iter() -> impl Iterator {                                                                                                                                       \r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^                      \r\n#1 [typeck_item_bodies] type-checking all item bodies                                                                        \r\nend of query stack\r\n```\r\n</details>","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49920","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49920/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49920/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49920/events","html_url":"https://github.com/rust-lang/rust/issues/49920","id":313918484,"number":49920,"title":"Built-in #[derive(...)]s fail when generics don't implement trait, even when the generic isn't directly used","user":{"login":"Osspial","id":16296823,"avatar_url":"https://avatars1.githubusercontent.com/u/16296823?v=4","gravatar_id":"","url":"https://api.github.com/users/Osspial","html_url":"https://github.com/Osspial","followers_url":"https://api.github.com/users/Osspial/followers","following_url":"https://api.github.com/users/Osspial/following{/other_user}","gists_url":"https://api.github.com/users/Osspial/gists{/gist_id}","starred_url":"https://api.github.com/users/Osspial/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Osspial/subscriptions","organizations_url":"https://api.github.com/users/Osspial/orgs","repos_url":"https://api.github.com/users/Osspial/repos","events_url":"https://api.github.com/users/Osspial/events{/privacy}","received_events_url":"https://api.github.com/users/Osspial/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-12T23:14:08Z","updated_at":"2018-04-12T23:42:46Z","closed_at":"2018-04-12T23:42:46Z","author_association":"NONE","body":"Rust's built-in derives add a `where T: $trait` bound any time a generic type is included in the `struct`'s definition, even if the generic type isn't directly used and all of the struct's fields implement the trait.\r\n\r\nThis shouldn't happen. Instead, the derives should implement the traits when all of the struct's fields implement the trait, regardless of whether the generic parameter implements the trait or not. As an example, the following code should compile, but doesn't.\r\n\r\n\r\nhttps://play.rust-lang.org/?gist=9f13519f1d4a1a4414d60c03eecc203b&version=stable\r\n```rust\r\nuse std::marker::PhantomData;\r\n\r\n#[derive(Debug, Clone)]\r\nstruct Foo<T: Trait> {\r\n    a: T::Assoc\r\n}\r\n\r\n#[derive(Debug, Clone)]\r\nstruct Baz<T: Trait> {\r\n    a: PhantomData<T>\r\n}\r\n\r\ntrait Trait {\r\n    type Assoc;\r\n}\r\n\r\nstruct Bar;\r\nimpl Trait for Bar {\r\n    type Assoc = i32;\r\n}\r\n\r\nfn main() {\r\n    let f: Foo<Bar> = Foo {\r\n        a: 0\r\n    };\r\n    \r\n    println!(\"{:?}\", f);\r\n    let _y = f.clone();\r\n    \r\n    \r\n    let b: Baz<Bar> = Baz {\r\n        a: PhantomData\r\n    };\r\n    \r\n    println!(\"{:?}\", b);\r\n    let _z = b.clone();\r\n}\r\n```\r\n\r\n```\r\nerror[E0277]: `Bar` doesn't implement `std::fmt::Debug`\r\n  --> src/main.rs:27:22\r\n   |\r\n27 |     println!(\"{:?}\", f);\r\n   |                      ^ `Bar` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\r\n   |\r\n   = help: the trait `std::fmt::Debug` is not implemented for `Bar`\r\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `Foo<Bar>`\r\n   = note: required by `std::fmt::Debug::fmt`\r\n\r\nerror[E0599]: no method named `clone` found for type `Foo<Bar>` in the current scope\r\n  --> src/main.rs:28:16\r\n   |\r\n4  | struct Foo<T: Trait> {\r\n   | -------------------- method `clone` not found for this\r\n...\r\n28 |     let _y = f.clone();\r\n   |                ^^^^^\r\n   |\r\n   = note: the method `clone` exists but the following trait bounds were not satisfied:\r\n           `Foo<Bar> : std::clone::Clone`\r\n   = help: items from traits can only be used if the trait is implemented and in scope\r\n   = note: the following trait defines an item `clone`, perhaps you need to implement it:\r\n           candidate #1: `std::clone::Clone`\r\n\r\nerror[E0277]: `Bar` doesn't implement `std::fmt::Debug`\r\n  --> src/main.rs:35:22\r\n   |\r\n35 |     println!(\"{:?}\", b);\r\n   |                      ^ `Bar` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\r\n   |\r\n   = help: the trait `std::fmt::Debug` is not implemented for `Bar`\r\n   = note: required because of the requirements on the impl of `std::fmt::Debug` for `Baz<Bar>`\r\n   = note: required by `std::fmt::Debug::fmt`\r\n\r\nerror[E0599]: no method named `clone` found for type `Baz<Bar>` in the current scope\r\n  --> src/main.rs:36:16\r\n   |\r\n9  | struct Baz<T: Trait> {\r\n   | -------------------- method `clone` not found for this\r\n...\r\n36 |     let _z = b.clone();\r\n   |                ^^^^^\r\n   |\r\n   = note: the method `clone` exists but the following trait bounds were not satisfied:\r\n           `Baz<Bar> : std::clone::Clone`\r\n   = help: items from traits can only be used if the trait is implemented and in scope\r\n   = note: the following trait defines an item `clone`, perhaps you need to implement it:\r\n           candidate #1: `std::clone::Clone`\r\n\r\nerror: aborting due to 4 previous errors\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49917","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49917/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49917/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49917/events","html_url":"https://github.com/rust-lang/rust/issues/49917","id":313893571,"number":49917,"title":"x.py check doesn't check rustdoc","user":{"login":"varkor","id":3943692,"avatar_url":"https://avatars1.githubusercontent.com/u/3943692?v=4","gravatar_id":"","url":"https://api.github.com/users/varkor","html_url":"https://github.com/varkor","followers_url":"https://api.github.com/users/varkor/followers","following_url":"https://api.github.com/users/varkor/following{/other_user}","gists_url":"https://api.github.com/users/varkor/gists{/gist_id}","starred_url":"https://api.github.com/users/varkor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/varkor/subscriptions","organizations_url":"https://api.github.com/users/varkor/orgs","repos_url":"https://api.github.com/users/varkor/repos","events_url":"https://api.github.com/users/varkor/events{/privacy}","received_events_url":"https://api.github.com/users/varkor/received_events","type":"User","site_admin":false},"labels":[{"id":325438536,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-rustbuild","name":"A-rustbuild","color":"d7e102","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-12T21:26:44Z","updated_at":"2018-04-20T15:19:00Z","closed_at":"2018-04-20T15:19:00Z","author_association":"CONTRIBUTOR","body":"These are often affected by other compiler changes, so it would be useful if they were included in `x.py check`.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49899","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49899/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49899/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49899/events","html_url":"https://github.com/rust-lang/rust/issues/49899","id":313621262,"number":49899,"title":"Add settings menu in rustdoc","user":{"login":"GuillaumeGomez","id":3050060,"avatar_url":"https://avatars0.githubusercontent.com/u/3050060?v=4","gravatar_id":"","url":"https://api.github.com/users/GuillaumeGomez","html_url":"https://github.com/GuillaumeGomez","followers_url":"https://api.github.com/users/GuillaumeGomez/followers","following_url":"https://api.github.com/users/GuillaumeGomez/following{/other_user}","gists_url":"https://api.github.com/users/GuillaumeGomez/gists{/gist_id}","starred_url":"https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GuillaumeGomez/subscriptions","organizations_url":"https://api.github.com/users/GuillaumeGomez/orgs","repos_url":"https://api.github.com/users/GuillaumeGomez/repos","events_url":"https://api.github.com/users/GuillaumeGomez/events{/privacy}","received_events_url":"https://api.github.com/users/GuillaumeGomez/received_events","type":"User","site_admin":false},"labels":[{"id":203738,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc","name":"A-rustdoc","color":"d7e102","default":false}],"state":"closed","locked":false,"assignee":{"login":"GuillaumeGomez","id":3050060,"avatar_url":"https://avatars0.githubusercontent.com/u/3050060?v=4","gravatar_id":"","url":"https://api.github.com/users/GuillaumeGomez","html_url":"https://github.com/GuillaumeGomez","followers_url":"https://api.github.com/users/GuillaumeGomez/followers","following_url":"https://api.github.com/users/GuillaumeGomez/following{/other_user}","gists_url":"https://api.github.com/users/GuillaumeGomez/gists{/gist_id}","starred_url":"https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GuillaumeGomez/subscriptions","organizations_url":"https://api.github.com/users/GuillaumeGomez/orgs","repos_url":"https://api.github.com/users/GuillaumeGomez/repos","events_url":"https://api.github.com/users/GuillaumeGomez/events{/privacy}","received_events_url":"https://api.github.com/users/GuillaumeGomez/received_events","type":"User","site_admin":false},"assignees":[{"login":"GuillaumeGomez","id":3050060,"avatar_url":"https://avatars0.githubusercontent.com/u/3050060?v=4","gravatar_id":"","url":"https://api.github.com/users/GuillaumeGomez","html_url":"https://github.com/GuillaumeGomez","followers_url":"https://api.github.com/users/GuillaumeGomez/followers","following_url":"https://api.github.com/users/GuillaumeGomez/following{/other_user}","gists_url":"https://api.github.com/users/GuillaumeGomez/gists{/gist_id}","starred_url":"https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GuillaumeGomez/subscriptions","organizations_url":"https://api.github.com/users/GuillaumeGomez/orgs","repos_url":"https://api.github.com/users/GuillaumeGomez/repos","events_url":"https://api.github.com/users/GuillaumeGomez/events{/privacy}","received_events_url":"https://api.github.com/users/GuillaumeGomez/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2018-04-12T08:15:11Z","updated_at":"2018-04-12T15:23:21Z","closed_at":"2018-04-12T15:23:20Z","author_association":"MEMBER","body":"Like this, users' preferences will be able to be saved (for now, it'd be mostly about automatic collapse I assume but who knows what could come later on?).\r\n\r\ncc @rust-lang/docs ","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/49883","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/49883/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/49883/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/49883/events","html_url":"https://github.com/rust-lang/rust/issues/49883","id":313406530,"number":49883,"title":"`cargo doc` fails with panic in rustc.","user":{"login":"omni-viral","id":4456841,"avatar_url":"https://avatars2.githubusercontent.com/u/4456841?v=4","gravatar_id":"","url":"https://api.github.com/users/omni-viral","html_url":"https://github.com/omni-viral","followers_url":"https://api.github.com/users/omni-viral/followers","following_url":"https://api.github.com/users/omni-viral/following{/other_user}","gists_url":"https://api.github.com/users/omni-viral/gists{/gist_id}","starred_url":"https://api.github.com/users/omni-viral/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/omni-viral/subscriptions","organizations_url":"https://api.github.com/users/omni-viral/orgs","repos_url":"https://api.github.com/users/omni-viral/repos","events_url":"https://api.github.com/users/omni-viral/events{/privacy}","received_events_url":"https://api.github.com/users/omni-viral/received_events","type":"User","site_admin":false},"labels":[{"id":203738,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-rustdoc","name":"A-rustdoc","color":"d7e102","default":false},{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":9618520,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-ICE","name":"I-ICE","color":"e10c02","default":false},{"id":699334260,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-dev-tools-rustdoc","name":"T-dev-tools-rustdoc","color":"bfd4f2","default":false},{"id":262252840,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-stable","name":"regression-from-stable-to-stable","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2018-04-11T16:52:04Z","updated_at":"2018-04-21T08:52:25Z","closed_at":"2018-04-21T08:52:24Z","author_association":"NONE","body":"I try to document crate (with `cargo doc`) and `rustc` panics.\r\nAlthough `cargo build` works well\r\nIt seems that those lines causing the panic:\r\n\r\nIn `lib.rs`:\r\n```\r\nextern crate gfx_mesh;\r\npub use gfx_mesh::{Mesh, MeshBuilder};\r\n```\r\n\r\nIn `Cargo.toml`:\r\n```\r\ngfx-mesh = { git = \"https://github.com/omni-viral/gfx-mesh\", rev = \"3ee315b8\" }\r\n```\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n```\r\nrustc 1.25.0 (84203cac6 2018-03-25)\r\nbinary: rustc\r\ncommit-hash: 84203cac67e65ca8640b8392348411098c856985\r\ncommit-date: 2018-03-25\r\nhost: x86_64-apple-darwin\r\nrelease: 1.25.0\r\nLLVM version: 6.0\r\n```\r\n\r\n`RUST_BACKTRACE=full cargo doc `:\r\n```\r\n Documenting test1 v0.1.0 (file:///Users/zakarum/pet/test1)\r\nerror: internal compiler error: librustc_metadata/decoder.rs:289: Cannot decode Span without Session.\r\n\r\nthread 'rustc' panicked at 'Box<Any>', librustc_errors/lib.rs:535:9\r\nstack backtrace:\r\n   0:        0x106897c33 - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::h0d82ff21dbaafa37\r\n   1:        0x10688f0a2 - std::sys_common::backtrace::_print::h8d6c54c009c3f040\r\n   2:        0x1068949ad - std::panicking::default_hook::{{closure}}::h9fa6009de31be346\r\n   3:        0x106894645 - std::panicking::default_hook::h6cdceadee11175c8\r\n   4:        0x106894e56 - std::panicking::rust_panic_with_hook::hfb431ab23831437f\r\n   5:        0x1065d8a0b - std::panicking::begin_panic::h6fc6d7cefc0d4156\r\n   6:        0x1065fb2f8 - rustc_errors::Handler::bug::hb776eb7b63578a78\r\n   7:        0x1051f5de8 - rustc::session::opt_span_bug_fmt::{{closure}}::hb4e6a7d91782852f\r\n   8:        0x1052b3310 - rustc::ty::context::tls::with_opt::{{closure}}::h67ee5dec967f3ca6\r\n   9:        0x104ed7ae8 - <std::thread::local::LocalKey<T>>::try_with::h83302cce55a9bec1\r\n  10:        0x104ed79a4 - <std::thread::local::LocalKey<T>>::with::hef48b88bcdafcec3\r\n  11:        0x1052b30d4 - rustc::ty::context::tls::with::heca45bdf3c9a1d1a\r\n  12:        0x1052b32cf - rustc::ty::context::tls::with_opt::h4cdf0ab166451878\r\n  13:        0x1051f5a74 - rustc::session::opt_span_bug_fmt::h36de7c1db41875d5\r\n  14:        0x1051f5941 - rustc::session::bug_fmt::h41decc888dfbf2e6\r\n  15:        0x10440d06c - <rustc_metadata::decoder::DecodeContext<'a, 'tcx> as serialize::serialize::SpecializedDecoder<syntax_pos::span_encoding::Span>>::specialized_decode::h4c296349ad36a672\r\n  16:        0x10438799b - <rustc::hir::Expr as serialize::serialize::Decodable>::decode::{{closure}}::hbdd7bf8c83a47d59\r\n  17:        0x104387152 - <rustc::hir::Body as serialize::serialize::Decodable>::decode::h5b6241b50756a11c\r\n  18:        0x104413268 - rustc_metadata::decoder::<impl rustc_metadata::cstore::CrateMetadata>::item_body_nested_bodies::hfbae0d4a4f24ecc8\r\n  19:        0x10443ceff - rustc_metadata::cstore_impl::provide_extern::item_body_nested_bodies::he7c82522188ca22d\r\n  20:        0x105082b6b - rustc::dep_graph::graph::DepGraph::with_task_impl::h7fe2b0833d41da61\r\n  21:        0x1053c6be5 - rustc::ty::maps::<impl rustc::ty::maps::queries::item_body_nested_bodies<'tcx>>::force::h1f37875260b763f4\r\n  22:        0x1053c791c - rustc::ty::maps::<impl rustc::ty::maps::queries::item_body_nested_bodies<'tcx>>::try_get::hd52813c28b9c0cfd\r\n  23:        0x1054940b1 - rustc::ty::maps::TyCtxtAt::item_body_nested_bodies::h7db16ad29a2b4eaa\r\n  24:        0x10548f878 - rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::item_body_nested_bodies::hf3045fc98bededdb\r\n  25:        0x103602a18 - rustdoc::clean::inline::print_inlined_const::h8e412b9e23a94ec9\r\n  26:        0x10361cea8 - <rustc::ty::AssociatedItem as rustdoc::clean::Clean<rustdoc::clean::Item>>::clean::hee07e803dcc25ca1\r\n  27:        0x103601196 - rustdoc::clean::inline::build_impl::hd3f2c399005c6cea\r\n  28:        0x1036006bf - rustdoc::clean::inline::build_impls::hf99fd01c6864bd24\r\n  29:        0x1035fd34c - rustdoc::clean::inline::try_inline::h19432d1a13e069a3\r\n  30:        0x103629767 - <rustdoc::doctree::Import as rustdoc::clean::Clean<alloc::vec::Vec<rustdoc::clean::Item>>>::clean::h12f42038fa8b0afa\r\n  31:        0x103609c82 - <rustdoc::doctree::Module as rustdoc::clean::Clean<rustdoc::clean::Item>>::clean::hcd3b4c90d503d265\r\n  32:        0x1036070fd - <rustdoc::visit_ast::RustdocVisitor<'a, 'tcx, 'rcx> as rustdoc::clean::Clean<rustdoc::clean::Crate>>::clean::hfca985fa4a441e9f\r\n  33:        0x1036311b2 - rustdoc::core::run_core::{{closure}}::ha95fee8bdba89da6\r\n  34:        0x10358d803 - rustc::ty::context::TyCtxt::create_and_enter::hdb7b2dcd4696caa0\r\n  35:        0x10362fc49 - rustdoc::core::run_core::hc3958f60514f70ba\r\n  36:        0x103521bf6 - std::sys_common::backtrace::__rust_begin_short_backtrace::hf3094eb672591957\r\n  37:        0x10352592d - std::panicking::try::do_call::h524e0ae617f35cca\r\n  38:        0x1068afa4e - __rust_maybe_catch_panic\r\n  39:        0x1035764e5 - <F as alloc::boxed::FnBox<A>>::call_box::h9ea7b93789e882bb\r\n  40:        0x1068a465b - std::sys::unix::thread::Thread::new::thread_start::h2f926488e05dc513\r\n  41:     0x7fffe2c0193a - _pthread_body\r\n  42:     0x7fffe2c01886 - _pthread_start\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.25.0 (84203cac6 2018-03-25) running on x86_64-apple-darwin\r\n\r\nerror: Could not document `test1`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustdoc --crate-name test1 src/lib.rs -o /Users/zakarum/pet/test1/target/doc -L dependency=/Users/zakarum/pet/test1/target/debug/deps --extern gfx_hal=/Users/zakarum/pet/test1/target/debug/deps/libgfx_hal-a2dbed14be3e1c1d.rmeta --extern gfx_mesh=/Users/zakarum/pet/test1/target/debug/deps/libgfx_mesh-e2a3fc73bd9fdd51.rmeta` (exit code: 101)\r\n```","score":1.0}]}
0

