HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sun, 13 May 2018 12:59:47 GMT
Link: <https://api.github.com/search/issues?q=repo%3Arust-lang%2Frust+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Arust-lang%2Frust+type%3Aissue+state%3Aclosed&page=34>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CCEC:4F40:25F97B3:5726268:5AF836C2
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 27
X-Ratelimit-Reset: 1526216445
X-Runtime-Rack: 0.568902
X-Xss-Protection: 1; mode=block

8000
{"total_count":21478,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/rust-lang/rust/issues/50683","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50683/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50683/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50683/events","html_url":"https://github.com/rust-lang/rust/issues/50683","id":322503909,"number":50683,"title":"ICE with clippy and futures","user":{"login":"Razican","id":597469,"avatar_url":"https://avatars2.githubusercontent.com/u/597469?v=4","gravatar_id":"","url":"https://api.github.com/users/Razican","html_url":"https://github.com/Razican","followers_url":"https://api.github.com/users/Razican/followers","following_url":"https://api.github.com/users/Razican/following{/other_user}","gists_url":"https://api.github.com/users/Razican/gists{/gist_id}","starred_url":"https://api.github.com/users/Razican/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Razican/subscriptions","organizations_url":"https://api.github.com/users/Razican/orgs","repos_url":"https://api.github.com/users/Razican/repos","events_url":"https://api.github.com/users/Razican/events{/privacy}","received_events_url":"https://api.github.com/users/Razican/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-12T11:29:05Z","updated_at":"2018-05-12T11:34:26Z","closed_at":"2018-05-12T11:34:26Z","author_association":"CONTRIBUTOR","body":"Not sure if this is a rustc bug or a clippy bug, but running `cargo clippy` on one library, the compiler panicked.\r\n\r\nI tried the code in the `develop` branch of this repo: https://github.com/Razican/bittrex-rs\r\n\r\nI expected to see the clippy linting results, but instead, the compiler panicked.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.27.0-nightly (e5f80f2a4 2018-05-09)\r\nbinary: rustc\r\ncommit-hash: e5f80f2a4f016bf724a1cfb580619d71c8fd39ec\r\ncommit-date: 2018-05-09\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.27.0-nightly\r\nLLVM version: 6.0\r\n```\r\n\r\nBacktrace:\r\n\r\n```\r\n   Compiling nodrop v0.1.12\r\n   Compiling libc v0.2.40\r\n   Compiling cfg-if v0.1.3\r\n   Compiling byteorder v1.2.2\r\n   Compiling memoffset v0.2.1\r\n   Compiling version_check v0.1.3\r\n   Compiling lazy_static v1.0.0\r\n   Compiling scopeguard v0.3.3\r\n   Compiling slab v0.4.0\r\n   Compiling futures v0.1.21\r\n   Compiling lazycell v0.6.0\r\n   Compiling pkg-config v0.3.11\r\n   Compiling cc v1.0.15\r\n   Compiling siphasher v0.2.2\r\n   Compiling foreign-types-shared v0.1.1\r\n   Compiling openssl v0.9.24\r\n   Compiling scoped-tls v0.1.2\r\nthread 'main' panicked at 'index out of bounds: the len is 1 but the index is 1', /$HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/clippy_lints-0.0.197/src/utils/higher.rs:76:32\r\n   Compiling typenum v1.10.0\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:467\r\n   6: std::panicking::begin_panic_fmt\r\n             at libstd/panicking.rs:350\r\n   7: rust_begin_unwind\r\n             at libstd/panicking.rs:328\r\n   8: core::panicking::panic_fmt\r\n             at libcore/panicking.rs:71\r\n   9: core::panicking::panic_bounds_check\r\n             at libcore/panicking.rs:58\r\n  10: clippy_lints::utils::higher::range\r\n  11: <clippy_lints::ranges::Pass as rustc::lint::LateLintPass<'a, 'tcx>>::check_expr\r\n  12: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_expr\r\n  13: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_block\r\n  14: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_expr\r\n  15: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_body\r\n  16: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_nested_body\r\n  17: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_fn\r\n  18: rustc::hir::intravisit::walk_impl_item\r\n  19: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_impl_item\r\n  20: rustc::hir::intravisit::walk_impl_item_ref\r\n  21: rustc::hir::intravisit::walk_item\r\n  22: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_item\r\n  23: rustc::hir::intravisit::walk_mod\r\n  24: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_mod\r\n  25: rustc::hir::intravisit::walk_item\r\n  26: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_item\r\n  27: rustc::hir::intravisit::walk_mod\r\n  28: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_mod\r\n  29: rustc::hir::intravisit::walk_item\r\n  30: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_item\r\n  31: rustc::hir::intravisit::walk_mod\r\n  32: <rustc::lint::context::LateContext<'a, 'tcx> as rustc::hir::intravisit::Visitor<'tcx>>::visit_mod\r\n  33: rustc::lint::context::check_crate\r\n  34: rustc::ty::context::tls::enter_context\r\n  35: <std::thread::local::LocalKey<T>>::with\r\n  36: rustc::ty::context::TyCtxt::create_and_enter\r\n  37: rustc_driver::driver::compile_input\r\n  38: rustc_driver::run_compiler_impl\r\n  39: <scoped_tls::ScopedKey<T>>::set\r\n  40: syntax::with_globals\r\n  41: rustc_driver::run_compiler\r\n  42: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  43: std::panicking::try::do_call\r\n  44: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  45: rustc_driver::run\r\n  46: clippy_driver::main\r\n  47: std::rt::lang_start::{{closure}}\r\n  48: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:310\r\n  49: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  50: std::rt::lang_start_internal\r\n             at libstd/panicking.rs:289\r\n             at libstd/panic.rs:374\r\n             at libstd/rt.rs:58\r\n  51: main\r\n  52: __libc_start_main\r\n  53: _start\r\nquery stack during panic:\r\nend of query stack\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.27.0-nightly (e5f80f2a4 2018-05-09) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `futures`.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: build failed\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50677","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50677/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50677/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50677/events","html_url":"https://github.com/rust-lang/rust/issues/50677","id":322490437,"number":50677,"title":"Bug: Rust allows redefining an existing variable.","user":{"login":"gilescope","id":803976,"avatar_url":"https://avatars3.githubusercontent.com/u/803976?v=4","gravatar_id":"","url":"https://api.github.com/users/gilescope","html_url":"https://github.com/gilescope","followers_url":"https://api.github.com/users/gilescope/followers","following_url":"https://api.github.com/users/gilescope/following{/other_user}","gists_url":"https://api.github.com/users/gilescope/gists{/gist_id}","starred_url":"https://api.github.com/users/gilescope/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gilescope/subscriptions","organizations_url":"https://api.github.com/users/gilescope/orgs","repos_url":"https://api.github.com/users/gilescope/repos","events_url":"https://api.github.com/users/gilescope/events{/privacy}","received_events_url":"https://api.github.com/users/gilescope/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-12T07:27:49Z","updated_at":"2018-05-13T10:37:21Z","closed_at":"2018-05-12T09:00:49Z","author_association":"CONTRIBUTOR","body":"I can't honestly call this a feature, no matter how much I squint:\r\n\r\n{\r\n    let x = 1;\r\n   <do things with x>\r\n   let x = String::new();\r\n   <do things with different x>\r\n}\r\n\r\nDoes clippy warn about this? The compiler doesn't even give a warning.\r\n\r\nIf our goal is a language where we can engineer software that's rock solid then the above really should not be allowed. It's just a footgun waiting to happen. For example in a large function someone accidently redefines x because they didn't realise that name was already in scope.\r\n\r\nPlease could we consider this a bug for Rust 2018 era, and at least warn now that this was probably not what the developer wanted?","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50668","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50668/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50668/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50668/events","html_url":"https://github.com/rust-lang/rust/issues/50668","id":322398119,"number":50668,"title":"ICE on stable 1.26 and nightly 1.27","user":{"login":"Swoorup","id":3408009,"avatar_url":"https://avatars0.githubusercontent.com/u/3408009?v=4","gravatar_id":"","url":"https://api.github.com/users/Swoorup","html_url":"https://github.com/Swoorup","followers_url":"https://api.github.com/users/Swoorup/followers","following_url":"https://api.github.com/users/Swoorup/following{/other_user}","gists_url":"https://api.github.com/users/Swoorup/gists{/gist_id}","starred_url":"https://api.github.com/users/Swoorup/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Swoorup/subscriptions","organizations_url":"https://api.github.com/users/Swoorup/orgs","repos_url":"https://api.github.com/users/Swoorup/repos","events_url":"https://api.github.com/users/Swoorup/events{/privacy}","received_events_url":"https://api.github.com/users/Swoorup/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-05-11T18:50:12Z","updated_at":"2018-05-13T01:47:46Z","closed_at":"2018-05-13T01:47:46Z","author_association":"NONE","body":"For some reason, the following example fails to compile resulting in ICE. \r\n\r\nI have tested on the latest stable 1.26 and nightly.\r\n\r\nhttps://play.rust-lang.org/?gist=5cc063593994ef7a0ee52b298c83116b&version=stable&mode=debug\r\n\r\n`RUST_BACKTRACE=1` output on 1.27 nightly:\r\n```\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: (MoveData { move_paths: [MovePath { place: _0 }, MovePath { place: _1 }, MovePath { place: _2 }, MovePath { place: _3 }, MovePath { place: _4 }, MovePath { place: _5 }, MovePath { place: _6 }, MovePath { place: _7 }, MovePath { place: _8 }], moves: [mp7@bb0[10], mp7@bb2[1], mp4@bb2[2], mp5@bb2[2], mp3@bb3[0], mp5@bb4[0], mp6@bb4[1], mp6@bb5[0], mp6@bb6[0], mp8@bb6[1], mp4@bb6[2], mp3@bb6[3], mp3@bb7[0], mp0@bb7[1]], loc_map: LocationMap { map: [[[], [], [], [], [], [], [], [], [], [], [mo0]], [[]], [[], [mo1], [mo2, mo3]], [[mo4]], [[mo5], [mo6]], [[mo7]], [[mo8], [mo9], [mo10], [mo11]], [[mo12], [mo13]]] }, path_map: [[mo13], [], [], [mo4, mo11, mo12], [mo2, mo10], [mo3, mo5], [mo6, mo7, mo8], [mo0, mo1], [mo9]], rev_lookup: MovePathLookup { locals: [mp0, mp1, mp2, mp3, mp4, mp5, mp6, mp7, mp8], projections: {} }, inits: [mp1@ice.rs:9:40: 9:72 (Deep), mp2@ice.rs:9:41: 9:48 (Deep), mp3@ice.rs:9:46: 9:47 (Deep), mp4@ice.rs:9:50: 9:51 (Deep), mp8@ice.rs:9:55: 9:60 (Deep), mp7@ice.rs:9:55: 9:60 (Deep), mp6@ice.rs:9:55: 9:72 (NonPanicPathOnly), mp5@ice.rs:9:55: 9:72 (Deep), mp0@ice.rs:9:50: 9:72 (NonPanicPathOnly)], init_loc_map: LocationMap { map: [[[], [in2], [], [in3], [], [], [], [], [in4], [in5], [in6]], [[]], [[in7], [], [in8]], [[]], [[], []], [[]], [[], [], [], []], [[], []]] }, init_path_map: [[in8], [in0], [in1], [in2], [in3], [in7], [in6], [in5], [in4]] }, [IllegalMove { cannot_move_out_of: IllegalMoveOrigin { span: ice.rs:9:46: 9:47, kind: BorrowedContent } }])', libcore/result.rs:945:5\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n   1: std::sys_common::backtrace::print\r\n   2: std::panicking::default_hook::{{closure}}\r\n   3: std::panicking::default_hook\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: std::panicking::begin_panic_fmt\r\n   7: rust_begin_unwind\r\n   8: core::panicking::panic_fmt\r\n   9: core::result::unwrap_failed\r\n  10: <rustc_mir::transform::elaborate_drops::ElaborateDrops as rustc_mir::transform::MirPass>::run_pass\r\n  11: rustc_mir::transform::optimized_mir::{{closure}}\r\n  12: rustc_mir::transform::optimized_mir\r\n  13: rustc::ty::maps::<impl rustc::ty::maps::config::QueryConfig<'tcx> for rustc::ty::maps::queries::optimized_mir<'tcx>>::compute\r\n  14: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  15: rustc::ty::context::tls::with_related_context\r\n  16: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  17: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  18: rustc::ty::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::instance_mir\r\n  19: rustc_mir::monomorphize::collector::collect_items_rec\r\n  20: rustc_mir::monomorphize::collector::collect_items_rec\r\n  21: rustc_mir::monomorphize::collector::collect_items_rec\r\n  22: rustc_mir::monomorphize::collector::collect_items_rec\r\n  23: rustc_mir::monomorphize::collector::collect_items_rec\r\n  24: rustc_mir::monomorphize::collector::collect_items_rec\r\n  25: rustc_mir::monomorphize::collector::collect_items_rec\r\n  26: rustc_mir::monomorphize::collector::collect_items_rec\r\n  27: rustc_mir::monomorphize::collector::collect_crate_mono_items\r\n  28: rustc::util::common::time\r\n  29: rustc_trans::base::collect_and_partition_translation_items\r\n  30: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n  31: rustc::ty::context::tls::with_related_context\r\n  32: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n  33: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n  34: rustc_trans::base::trans_crate\r\n  35: <rustc_trans::LlvmTransCrate as rustc_trans_utils::trans_crate::TransCrate>::trans_crate\r\n  36: rustc::util::common::time\r\n  37: rustc_driver::driver::phase_4_translate_to_llvm\r\n  38: rustc_driver::driver::compile_input::{{closure}}\r\n  39: rustc::ty::context::tls::enter_context\r\n  40: <std::thread::local::LocalKey<T>>::with\r\n  41: rustc::ty::context::TyCtxt::create_and_enter\r\n  42: rustc_driver::driver::compile_input\r\n  43: rustc_driver::run_compiler_impl\r\n  44: <scoped_tls::ScopedKey<T>>::set\r\n  45: syntax::with_globals\r\n  46: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  47: __rust_maybe_catch_panic\r\n  48: rustc_driver::run\r\n  49: rustc_driver::main\r\n  50: std::rt::lang_start::{{closure}}\r\n  51: std::panicking::try::do_call\r\n  52: __rust_maybe_catch_panic\r\n  53: std::rt::lang_start_internal\r\n  54: main\r\nquery stack during panic:\r\n#0 [optimized_mir] processing `main::{{closure}}`\r\n#1 [collect_and_partition_translation_items] collect_and_partition_translation_items\r\nend of query stack\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.27.0-nightly (acd3871ba 2018-05-10) running on x86_64-apple-darwin\r\n\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50662","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50662/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50662/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50662/events","html_url":"https://github.com/rust-lang/rust/issues/50662","id":322351641,"number":50662,"title":"#![feature(rust_2018_preview)] is an error in the 2018 edition","user":{"login":"alexcrichton","id":64996,"avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false},"labels":[{"id":930400927,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-rust-2018-preview","name":"A-rust-2018-preview","color":"d7e102","default":false}],"state":"closed","locked":false,"assignee":{"login":"alexcrichton","id":64996,"avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false},"assignees":[{"login":"alexcrichton","id":64996,"avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2018-05-11T16:06:32Z","updated_at":"2018-05-12T21:12:12Z","closed_at":"2018-05-12T21:12:12Z","author_association":"OWNER","body":"This makes for relatively bad ergonomics, we should make this code a warning only on the 2018 edition (at most):\r\n\r\n```rust\r\n#![feature(rust_2018_preview)]\r\n\r\nfn main() {\r\n}\r\n```\r\n\r\ncompiled with:\r\n\r\n```\r\n$ rustc +nightly foo.rs --edition 2018\r\nerror[E0557]: feature has been removed\r\n --> foo.rs:1:12\r\n  |\r\n1 | #![feature(rust_2018_preview)]\r\n  |            ^^^^^^^^^^^^^^^^^\r\n\r\nerror: aborting due to previous error\r\n\r\nFor more information about this error, try `rustc --explain E0557`.\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50654","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50654/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50654/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50654/events","html_url":"https://github.com/rust-lang/rust/issues/50654","id":322289205,"number":50654,"title":"Function with type parameter name compiles, while using direct type does not","user":{"login":"hkcorac","id":38052255,"avatar_url":"https://avatars1.githubusercontent.com/u/38052255?v=4","gravatar_id":"","url":"https://api.github.com/users/hkcorac","html_url":"https://github.com/hkcorac","followers_url":"https://api.github.com/users/hkcorac/followers","following_url":"https://api.github.com/users/hkcorac/following{/other_user}","gists_url":"https://api.github.com/users/hkcorac/gists{/gist_id}","starred_url":"https://api.github.com/users/hkcorac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hkcorac/subscriptions","organizations_url":"https://api.github.com/users/hkcorac/orgs","repos_url":"https://api.github.com/users/hkcorac/repos","events_url":"https://api.github.com/users/hkcorac/events{/privacy}","received_events_url":"https://api.github.com/users/hkcorac/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-11T13:04:53Z","updated_at":"2018-05-11T14:00:14Z","closed_at":"2018-05-11T14:00:13Z","author_association":"NONE","body":"Hi,\r\n\r\nI have a simple question (not an issue):\r\n\r\nThis code compiles:\r\n\r\n```rust\r\nfn test<T: AsRef<str>>(s: T) {}\r\n```\r\n\r\nWhile this one does not:\r\n\r\n```rust\r\nfn test(s: AsRef<str>) {}\r\n```\r\n\r\nThe error message is:\r\n\r\n```shell\r\n`std::convert::AsRef<str> + 'static` does not have a constant size known at compile-time\r\n```\r\n\r\nMay I ask for an explanation?\r\n\r\nThank you,","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50645","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50645/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50645/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50645/events","html_url":"https://github.com/rust-lang/rust/issues/50645","id":322195215,"number":50645,"title":"TERM=dumb is not respected for warnings in diagnostic annotations","user":{"login":"andreastt","id":399120,"avatar_url":"https://avatars3.githubusercontent.com/u/399120?v=4","gravatar_id":"","url":"https://api.github.com/users/andreastt","html_url":"https://github.com/andreastt","followers_url":"https://api.github.com/users/andreastt/followers","following_url":"https://api.github.com/users/andreastt/following{/other_user}","gists_url":"https://api.github.com/users/andreastt/gists{/gist_id}","starred_url":"https://api.github.com/users/andreastt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andreastt/subscriptions","organizations_url":"https://api.github.com/users/andreastt/orgs","repos_url":"https://api.github.com/users/andreastt/repos","events_url":"https://api.github.com/users/andreastt/events{/privacy}","received_events_url":"https://api.github.com/users/andreastt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2018-05-11T07:23:41Z","updated_at":"2018-05-11T12:25:23Z","closed_at":"2018-05-11T12:17:03Z","author_association":"CONTRIBUTOR","body":"It appears the `TERM=dumb` environment variable is not respected by librustc_errors’ diagnostic annotations for warnings, hints, fatal errors, et al.\r\n\r\nThe below example of compiling a random program I’ve authored shows that the string “Compiling” correctly does not get colourised. This is because it uses termcolor’s [`ColorChoice::Auto`](https://docs.rs/termcolor/0.3.6/termcolor/enum.ColorChoice.html#Auto.v) which cancels colourisation because it checks if the terminal is dumb.\r\n\r\nFarther down in the example, the string starting with “warning” emits a lot of escape sequences for colourisation.\r\n\r\nFor reference, so-called [“dumb terminals”](https://en.wikipedia.org/wiki/Computer_terminal#Dumb_terminals) are terminals that only recognise a limited subset of escape sequences. In my particular case it is the monochrome [rc](https://en.wikipedia.org/wiki/Rc) shell.\r\n\r\n```\r\n% TERM=dumb cargo build\r\n   Compiling build_const v0.2.0\r\n   Compiling cfg-if v0.1.2\r\n   Compiling matches v0.1.6\r\n   Compiling cc v1.0.9\r\n   Compiling num-traits v0.2.0\r\n   Compiling version_check v0.1.3\r\n   Compiling adler32 v1.0.2\r\n   Compiling void v1.0.2\r\n   Compiling unicode-normalization v0.1.5\r\n   Compiling libc v0.2.39\r\n   Compiling percent-encoding v1.0.0\r\n   Compiling lazy_static v1.0.0\r\n   Compiling safemem v0.2.0\r\n   Compiling byteorder v1.2.1\r\n   Compiling typeable v0.1.2\r\n   Compiling language-tags v0.2.2\r\n   Compiling traitobject v0.1.0\r\n   Compiling semver-parser v0.7.0\r\n   Compiling regex-syntax v0.4.1\r\n   Compiling unicode-width v0.1.4\r\n   Compiling httparse v1.2.3\r\n   Compiling utf8-ranges v1.0.0\r\n   Compiling strsim v0.6.0\r\n   Compiling unicode-segmentation v1.1.0\r\n   Compiling bitflags v1.0.1\r\n   Compiling geckodriver v0.20.1 (file:///home/ato/src/gecko/testing/geckodriver)\r\n   Compiling podio v0.1.5\r\n   Compiling rustc-serialize v0.3.24\r\n   Compiling log v0.4.1\r\n   Compiling unreachable v1.0.0\r\n   Compiling unicode-bidi v0.3.4\r\n   Compiling crc v1.7.0\r\n   Compiling base64 v0.6.0\r\n   Compiling unicase v1.4.2\r\n   Compiling num-traits v0.1.43\r\n   Compiling miniz_oxide v0.1.2\r\n   Compiling memchr v1.0.2\r\n   Compiling rand v0.3.18\r\n   Compiling num_cpus v1.7.0\r\n   Compiling time v0.1.38\r\n   Compiling term_size v0.3.0\r\n   Compiling semver v0.6.0\r\n   Compiling thread_local v0.3.5\r\n   Compiling num-integer v0.1.35\r\n   Compiling textwrap v0.9.0\r\n   Compiling aho-corasick v0.6.3\r\n   Compiling log v0.3.9\r\n   Compiling rust-ini v0.10.2\r\n   Compiling miniz_oxide_c_api v0.1.2\r\n   Compiling bzip2-sys v0.1.6\r\n   Compiling idna v0.1.4\r\n   Compiling tempdir v0.3.5\r\n   Compiling cookie v0.10.1\r\n   Compiling msdos_time v0.1.5\r\n   Compiling num-iter v0.1.34\r\n   Compiling num v0.1.40\r\n   Compiling mozprofile v0.3.0 (file:///home/ato/src/gecko/testing/mozbase/rust/mozprofile)\r\n   Compiling mime v0.2.6\r\n   Compiling regex v0.2.2\r\n   Compiling clap v2.29.0\r\n   Compiling chrono v0.2.25\r\n   Compiling flate2 v1.0.1\r\n   Compiling mozrunner v0.6.1 (file:///home/ato/src/gecko/testing/mozbase/rust/mozrunner)\r\n   Compiling bzip2 v0.3.2\r\n   Compiling url v1.7.0\r\n   Compiling uuid v0.1.18\r\n   Compiling zip v0.3.1\r\n   Compiling hyper v0.10.13\r\n   Compiling mozversion v0.1.3 (file:///home/ato/src/gecko/testing/mozbase/rust/mozversion)\r\n   Compiling webdriver v0.35.0 (file:///home/ato/src/gecko/testing/webdriver)\r\n\u001B[0m\u001B[1m\u001B[33mwarning\u001B[0m\u001B[0m\u001B[1m: variant is never constructed: `Quit`\u001B[0m\r\n\u001B[0m  \u001B[0m\u001B[0m\u001B[1m\u001B[38;5;12m--> \u001B[0m\u001B[0mtesting/webdriver/src/server.rs:23:5\u001B[0m\r\n\u001B[0m   \u001B[0m\u001B[0m\u001B[1m\u001B[38;5;12m|\u001B[0m\r\n\u001B[0m\u001B[1m\u001B[38;5;12m23\u001B[0m\u001B[0m \u001B[0m\u001B[0m\u001B[1m\u001B[38;5;12m| \u001B[0m\u001B[0m    Quit\u001B[0m\r\n\u001B[0m   \u001B[0m\u001B[0m\u001B[1m\u001B[38;5;12m| \u001B[0m\u001B[0m    \u001B[0m\u001B[0m\u001B[1m\u001B[33m^^^^\u001B[0m\r\n\u001B[0m   \u001B[0m\u001B[0m\u001B[1m\u001B[38;5;12m|\u001B[0m\r\n\u001B[0m   \u001B[0m\u001B[0m\u001B[1m\u001B[38;5;12m= \u001B[0m\u001B[0m\u001B[1mnote\u001B[0m\u001B[0m: #[warn(dead_code)] on by default\u001B[0m\r\n\r\n    Finished dev [optimized + debuginfo] target(s) in 58.60 secs\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50642","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50642/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50642/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50642/events","html_url":"https://github.com/rust-lang/rust/issues/50642","id":322138322,"number":50642,"title":"match &never {} is an error","user":{"login":"stepancheg","id":28969,"avatar_url":"https://avatars2.githubusercontent.com/u/28969?v=4","gravatar_id":"","url":"https://api.github.com/users/stepancheg","html_url":"https://github.com/stepancheg","followers_url":"https://api.github.com/users/stepancheg/followers","following_url":"https://api.github.com/users/stepancheg/following{/other_user}","gists_url":"https://api.github.com/users/stepancheg/gists{/gist_id}","starred_url":"https://api.github.com/users/stepancheg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stepancheg/subscriptions","organizations_url":"https://api.github.com/users/stepancheg/orgs","repos_url":"https://api.github.com/users/stepancheg/repos","events_url":"https://api.github.com/users/stepancheg/events{/privacy}","received_events_url":"https://api.github.com/users/stepancheg/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-11T01:31:13Z","updated_at":"2018-05-11T01:49:09Z","closed_at":"2018-05-11T01:49:03Z","author_association":"CONTRIBUTOR","body":"```\r\nenum Never {\r\n}\r\n\r\nfn foo(n: Never) {\r\n    match &n {\r\n    };\r\n}\r\n```\r\n\r\nresult is\r\n\r\n```\r\nerror[E0004]: non-exhaustive patterns: type &Never is non-empty\r\n --> src/main.rs:5:11\r\n  |\r\n5 |     match &n {\r\n  |           ^^\r\n  |\r\nhelp: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\r\n --> src/main.rs:5:11\r\n  |\r\n5 |     match &n {\r\n  |           ^^\r\n```\r\n\r\nRust 1.27.\r\n\r\nI'm not 100% sure, but I guess this code should be valid, because following is valid:\r\n\r\n```\r\nenum Never {\r\n}\r\n\r\nfn foo(n: Never) {\r\n    match n {\r\n    };\r\n}\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50641","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50641/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50641/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50641/events","html_url":"https://github.com/rust-lang/rust/issues/50641","id":322135834,"number":50641,"title":"Detected overflow in ranges should suggest inclusive ranges","user":{"login":"porglezomp","id":1690225,"avatar_url":"https://avatars1.githubusercontent.com/u/1690225?v=4","gravatar_id":"","url":"https://api.github.com/users/porglezomp","html_url":"https:
8000
//github.com/porglezomp","followers_url":"https://api.github.com/users/porglezomp/followers","following_url":"https://api.github.com/users/porglezomp/following{/other_user}","gists_url":"https://api.github.com/users/porglezomp/gists{/gist_id}","starred_url":"https://api.github.com/users/porglezomp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/porglezomp/subscriptions","organizations_url":"https://api.github.com/users/porglezomp/orgs","repos_url":"https://api.github.com/users/porglezomp/repos","events_url":"https://api.github.com/users/porglezomp/events{/privacy}","received_events_url":"https://api.github.com/users/porglezomp/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-11T01:13:57Z","updated_at":"2018-05-11T08:27:53Z","closed_at":"2018-05-11T08:27:53Z","author_association":"CONTRIBUTOR","body":"Now that inclusive ranges are stabilized, we have a good way to write (for example) `0..=255u8`. Right now compiling:\r\n```rust\r\nfn main() {\r\n    for i in 0..256u8 {\r\n        println!(\"{}\", i);\r\n    }\r\n}\r\n```\r\nwill give the error message:\r\n```\r\nwarning: literal out of range for u8\r\n --> src/main.rs:2:17\r\n  |\r\n2 |     for i in 0..256u8 {\r\n  |                 ^^^^^\r\n  |\r\n  = note: #[warn(overflowing_literals)] on by default\r\n```\r\nI believe it should additionally suggest using `0..=255u8` as a teaching aid.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50640","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50640/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50640/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50640/events","html_url":"https://github.com/rust-lang/rust/issues/50640","id":322129751,"number":50640,"title":"ICE when proc-macro crate and non proc-macro crate share Cargo project","user":{"login":"SergioBenitez","id":1480321,"avatar_url":"https://avatars3.githubusercontent.com/u/1480321?v=4","gravatar_id":"","url":"https://api.github.com/users/SergioBenitez","html_url":"https://github.com/SergioBenitez","followers_url":"https://api.github.com/users/SergioBenitez/followers","following_url":"https://api.github.com/users/SergioBenitez/following{/other_user}","gists_url":"https://api.github.com/users/SergioBenitez/gists{/gist_id}","starred_url":"https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SergioBenitez/subscriptions","organizations_url":"https://api.github.com/users/SergioBenitez/orgs","repos_url":"https://api.github.com/users/SergioBenitez/repos","events_url":"https://api.github.com/users/SergioBenitez/events{/privacy}","received_events_url":"https://api.github.com/users/SergioBenitez/received_events","type":"User","site_admin":false},"labels":[{"id":632573348,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-macros-2.0","name":"A-macros-2.0","color":"d7e102","default":false},{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":9618520,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-ICE","name":"I-ICE","color":"e10c02","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/50","html_url":"https://github.com/rust-lang/rust/milestone/50","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/50/labels","id":3245333,"number":50,"title":"1.27","description":"","creator":{"login":"alexcrichton","id":64996,"avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false},"open_issues":3,"closed_issues":9,"state":"open","created_at":"2018-04-05T13:55:36Z","updated_at":"2018-05-13T11:32:40Z","due_on":"2018-06-21T07:00:00Z","closed_at":null},"comments":3,"created_at":"2018-05-11T00:29:13Z","updated_at":"2018-05-11T23:29:52Z","closed_at":"2018-05-11T23:29:52Z","author_association":"CONTRIBUTOR","body":"This is a regression introduced in a recent nightly.\r\n\r\nWhen a lib and a bin are declared in the same Cargo project, where the lib is of type `proc-macro`, `rustc` experiences an ICE with a message of `thread 'main' panicked at 'librustc_metadata/creader.rs:520: proc-macro crate not dylib', librustc/session/mod.rs:1281:26`. This error _does not_ occur when the proc-macro lib and the bin are split into independent Cargo projects. Running with `CARGO_INCREMENTAL=0` does not change the outcome.\r\n\r\n`Cargo.toml` looks as follows:\r\n\r\n```toml\r\n[package]\r\nname = \"demo\"\r\nversion = \"0.0.1\"\r\n\r\n[lib]\r\nname = \"codegen\"\r\nproc-macro = true\r\npath = \"src/lib.rs\"\r\n\r\n[[bin]]\r\nname = \"main\"\r\npath = \"src/main.rs\"\r\n\r\n[dependencies]\r\n```\r\n\r\n`src/lib.rs` looks as follows:\r\n\r\n```rust\r\n#![feature(proc_macro)]\r\n\r\nextern crate proc_macro;\r\n\r\nuse proc_macro::TokenStream;\r\n\r\n#[proc_macro_attribute]\r\npub fn demo(_args: TokenStream, input: TokenStream) -> TokenStream {\r\n    input\r\n}\r\n```\r\n\r\n`src/main.rs` looks as follows:\r\n\r\n```rust\r\n#![feature(proc_macro)]\r\n\r\nextern crate codegen;\r\n\r\nuse codegen::demo;\r\n\r\n#[demo]\r\nfn test() { }\r\n\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n}\r\n```\r\n\r\nThe full error log:\r\n\r\n<details>\r\n<pre>\r\n❯ rustc --version --verbose\r\nrustc 1.27.0-nightly (e5f80f2a4 2018-05-09)\r\nbinary: rustc\r\ncommit-hash: e5f80f2a4f016bf724a1cfb580619d71c8fd39ec\r\ncommit-date: 2018-05-09\r\nhost: x86_64-apple-darwin\r\nrelease: 1.27.0-nightly\r\nLLVM version: 6.0\r\n\r\n❯ RUST_BACKTRACE=1  cargo check -v\r\n    Checking demo v0.0.1 (file:///rustc-bug)\r\n     Running `rustc --crate-name main src/main.rs --crate-type bin --emit=dep-info,metadata -C debuginfo=2 -C metadata=411579df123c68f9 -C extra-filename=-411579df123c68f9 --out-dir /rustc-bug/target/debug/deps -C incremental=/rustc-bug/target/debug/incremental -L dependency=/rustc-bug/target/debug/deps --extern codegen=/rustc-bug/target/debug/deps/libcodegen-c52c60a16469d04d.rmeta`\r\nthread 'main' panicked at 'librustc_metadata/creader.rs:520: proc-macro crate not dylib', librustc/session/mod.rs:1281:26\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n   1: std::sys_common::backtrace::print\r\n   2: std::panicking::default_hook::{{closure}}\r\n   3: std::panicking::default_hook\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: std::panicking::begin_panic\r\n   7: rustc::session::opt_span_bug_fmt::{{closure}}\r\n   8: rustc::ty::context::tls::with_opt::{{closure}}\r\n   9: rustc::ty::context::tls::with_context_opt\r\n  10: rustc::ty::context::tls::with_opt\r\n  11: rustc::session::opt_span_bug_fmt\r\n  12: rustc::session::span_bug_fmt\r\n  13: rustc_metadata::creader::CrateLoader::resolve_crate\r\n  14: <rustc_metadata::creader::CrateLoader<'a> as rustc::middle::cstore::CrateLoader>::process_extern_crate\r\n  15: rustc_resolve::build_reduced_graph::<impl rustc_resolve::Resolver<'a>>::build_reduced_graph_for_item\r\n  16: <rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor<'a, 'b> as syntax::visit::Visitor<'a>>::visit_item\r\n  17: syntax::visit::walk_item\r\n  18: <rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor<'a, 'b> as syntax::visit::Visitor<'a>>::visit_item\r\n  19: syntax::ext::expand::Expansion::visit_with\r\n  20: rustc_resolve::macros::<impl syntax::ext::base::Resolver for rustc_resolve::Resolver<'a>>::visit_expansion\r\n  21: syntax::ext::expand::MacroExpander::collect_invocations\r\n  22: syntax::ext::expand::MacroExpander::expand\r\n  23: syntax::ext::expand::MacroExpander::expand_crate\r\n  24: rustc_driver::driver::phase_2_configure_and_expand_inner::{{closure}}\r\n  25: rustc::util::common::time\r\n  26: rustc_driver::driver::phase_2_configure_and_expand\r\n  27: rustc_driver::driver::compile_input\r\n  28: rustc_driver::run_compiler_impl\r\n  29: <scoped_tls::ScopedKey<T>>::set\r\n  30: syntax::with_globals\r\n  31: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n  32: __rust_maybe_catch_panic\r\n  33: rustc_driver::run\r\n  34: rustc_driver::main\r\n  35: std::rt::lang_start::{{closure}}\r\n  36: std::panicking::try::do_call\r\n  37: __rust_maybe_catch_panic\r\n  38: std::rt::lang_start_internal\r\n  39: main\r\nquery stack during panic:\r\nend of query stack\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.27.0-nightly (e5f80f2a4 2018-05-09) running on x86_64-apple-darwin\r\n\r\nnote: compiler flags: -C debuginfo=2 -C incremental --crate-type bin\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n\r\nerror: Could not compile `demo`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name main src/main.rs --crate-type bin --emit=dep-info,metadata -C debuginfo=2 -C metadata=411579df123c68f9 -C extra-filename=-411579df123c68f9 --out-dir /rustc-bug/target/debug/deps -C incremental=/rustc-bug/target/debug/incremental -L dependency=/rustc-bug/target/debug/deps --extern codegen=/rustc-bug/target/debug/deps/libcodegen-c52c60a16469d04d.rmeta` (exit code: 101)\r\n</pre>\r\n</details>","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50639","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50639/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50639/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50639/events","html_url":"https://github.com/rust-lang/rust/issues/50639","id":322125187,"number":50639,"title":"Slice patterns complain about move if type is not Copy","user":{"login":"dgriffen","id":8010244,"avatar_url":"https://avatars2.githubusercontent.com/u/8010244?v=4","gravatar_id":"","url":"https://api.github.com/users/dgriffen","html_url":"https://github.com/dgriffen","followers_url":"https://api.github.com/users/dgriffen/followers","following_url":"https://api.github.com/users/dgriffen/following{/other_user}","gists_url":"https://api.github.com/users/dgriffen/gists{/gist_id}","starred_url":"https://api.github.com/users/dgriffen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dgriffen/subscriptions","organizations_url":"https://api.github.com/users/dgriffen/orgs","repos_url":"https://api.github.com/users/dgriffen/repos","events_url":"https://api.github.com/users/dgriffen/events{/privacy}","received_events_url":"https://api.github.com/users/dgriffen/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-10T23:58:53Z","updated_at":"2018-05-11T08:27:13Z","closed_at":"2018-05-11T08:27:13Z","author_association":"NONE","body":"**Compiler Version**: 1.26\r\n\r\nConsider the following code:\r\n\r\n```rust\r\nstruct Foo;\r\n\r\nfn main() {\r\n    let arr=[Foo,Foo];\r\n    let [a,b]=arr;\r\n}\r\n```\r\n\r\nCompiling will produce the following error:\r\n\r\n```\r\nerror[E0382]: use of moved value: `arr[..]`\r\n --> src/main.rs:8:12\r\n  |\r\n8 |     let [a,b]=arr;\r\n  |          - ^ value used here after move\r\n  |          |\r\n  |          value moved here\r\n  |\r\n  = note: move occurs because `arr[..]` has type `Foo`, which does not implement the `Copy` trait\r\n```\r\n\r\nThe odd part is this works with tuple patterns:\r\n\r\n```rust\r\nstruct Foo;\r\n\r\nfn main() {\r\n    let arr=(Foo,Foo);\r\n    let (a,b)=arr;\r\n}\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50635","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50635/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50635/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50635/events","html_url":"https://github.com/rust-lang/rust/issues/50635","id":322118997,"number":50635,"title":"extern absolute paths no longer works with new nightly","user":{"login":"nikomatsakis","id":155238,"avatar_url":"https://avatars0.githubusercontent.com/u/155238?v=4","gravatar_id":"","url":"https://api.github.com/users/nikomatsakis","html_url":"https://github.com/nikomatsakis","followers_url":"https://api.github.com/users/nikomatsakis/followers","following_url":"https://api.github.com/users/nikomatsakis/following{/other_user}","gists_url":"https://api.github.com/users/nikomatsakis/gists{/gist_id}","starred_url":"https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikomatsakis/subscriptions","organizations_url":"https://api.github.com/users/nikomatsakis/orgs","repos_url":"https://api.github.com/users/nikomatsakis/repos","events_url":"https://api.github.com/users/nikomatsakis/events{/privacy}","received_events_url":"https://api.github.com/users/nikomatsakis/received_events","type":"User","site_admin":false},"labels":[{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-10T23:21:41Z","updated_at":"2018-05-11T00:54:35Z","closed_at":"2018-05-10T23:25:49Z","author_association":"CONTRIBUTOR","body":"For example, I believe this used to work on play:\r\n\r\n```rust\r\n#![feature(extern_absolute_paths)]\r\nuse rayon::join;\r\nfn main() { }\r\n```\r\n\r\nThe [borrow-check repository](https://github.com/rust-lang-nursery/borrow-check/pull/21) is also hitting this. See for example [this recent travis failure](https://travis-ci.org/rust-lang-nursery/borrow-check/builds/377509266?utm_source=github_status&utm_medium=notification). \r\n\r\nThe code in that repository builds with 2018-05-04 nightly, but it won't build now.\r\n\r\ncc @petrochenkov \r\n\r\nI'm going to try and bisect with https://github.com/rust-lang-nursery/cargo-bisect-rustc","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50633","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50633/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50633/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50633/events","html_url":"https://github.com/rust-lang/rust/issues/50633","id":322107540,"number":50633,"title":"Turn the overflowing_literals lint from warn to deny for the 2018 edition","user":{"login":"bstrie","id":865233,"avatar_url":"https://avatars2.githubusercontent.com/u/865233?v=4","gravatar_id":"","url":"https://api.github.com/users/bstrie","html_url":"https://github.com/bstrie","followers_url":"https://api.github.com/users/bstrie/followers","following_url":"https://api.github.com/users/bstrie/following{/other_user}","gists_url":"https://api.github.com/users/bstrie/gists{/gist_id}","starred_url":"https://api.github.com/users/bstrie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bstrie/subscriptions","organizations_url":"https://api.github.com/users/bstrie/orgs","repos_url":"https://api.github.com/users/bstrie/repos","events_url":"https://api.github.com/users/bstrie/events{/privacy}","received_events_url":"https://api.github.com/users/bstrie/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-10T22:27:34Z","updated_at":"2018-05-11T08:20:25Z","closed_at":"2018-05-10T23:50:24Z","author_association":"CONTRIBUTOR","body":"This code compiles with a warning:\r\n```rust\r\nlet x: u8 = 256;  // warning: literal out of range for u8\r\n```\r\nI can think of no use case for allowing overflowing literals. The lint has existed since 2012, back before we had any firm story regarding integer overflow and back when literal underflow was also allowed (in modern Rust, integer literal underflow is a parse error). This is a prime candidate for a lint that advances to deny for the 2018 edition.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50627","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50627/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50627/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50627/events","html_url":"https://github.com/rust-lang/rust/issues/50627","id":322068479,"number":50627,"title":"rustc 1.26.0 crashes when compiling some programs using impl Trait","user":{"login":"blucell","id":4368958,"avatar_url":"https://avatars0.githubusercontent.com/u/4368958?v=4","gravatar_id":"","url":"https://api.github.com/users/blucell","html_url":"https://github.com/blucell","followers_url":"https://api.github.com/users/blucell/followers","following_url":"https://api.github.com/users/blucell/following{/other_user}","gists_url":"https://api.github.com/users/blucell/gists{/gist_id}","starred_url":"https://api.github.com/users/blucell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blucell/subscriptions","organizations_url":"https://api.github.com/users/blucell/orgs","repos_url":"https://api.github.com/users/blucell/repos","events_url":"https://api.github.com/users/blucell/events{/privacy}","received_events_url":"https://api.github.com/users/blucell/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-10T20:14:41Z","updated_at":"2018-05-10T22:07:06Z","closed_at":"2018-05-10T22:07:06Z","author_association":"NONE","body":"While testing the new `1.26.0`'s `impl Trait` feature, there were some programs that caused `rustc` to stack overflow without very helpful error message\r\n\r\nI tried this code:\r\n\r\n```rust\r\nuse std::fmt::Debug;\r\n\r\nfn gen() -> impl PartialOrd + Debug { 1 }\r\n\r\nfn main() {\r\n    let a = gen();\r\n\r\n    println!(\"{:?}\", a);\r\n}\r\n```\r\n\r\nI expected to see this happen: the program compiles and just prints `1`\r\n\r\nInstead, this happened: `rustc` crashed with cryptic error message\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.26.0 (a77568041 2018-05-07)\r\nbinary: rustc\r\ncommit-hash: a7756804103447ea4e68a71ccf071e7ad8f7a03e\r\ncommit-date: 2018-05-07\r\nhost: x86_64-apple-darwin\r\nrelease: 1.26.0\r\nLLVM version: 6.0\r\n```\r\n\r\nBacktrace:\r\n\r\n`cargo run --verbose`:\r\n\r\n```\r\n   Compiling impl-trait v0.1.0 (file:///Users/blu/Documents/playground/impl-trait)\r\n     Running `rustc --crate-name impl_trait src/main.rs --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=33cb8f6c497adcee -C extra-filename=-33cb8f6c497adcee --out-dir /Users/blu/Documents/playground/impl-trait/target/debug/deps -C incremental=/Users/blu/Documents/playground/impl-trait/target/debug/incremental -L dependency=/Users/blu/Documents/playground/impl-trait/target/debug/deps`\r\n\r\nthread 'rustc' has overflowed its stack\r\nfatal runtime error: stack overflow\r\nerror: Could not compile `impl-trait`.\r\n\r\nCaused by:\r\n  process didn't exit successfully: `rustc --crate-name impl_trait src/main.rs --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=33cb8f6c497adcee -C extra-filename=-33cb8f6c497adcee --out-dir /Users/blu/Documents/playground/impl-trait/target/debug/deps -C incremental=/Users/blu/Documents/playground/impl-trait/target/debug/incremental -L dependency=/Users/blu/Documents/playground/impl-trait/target/debug/deps` (signal: 6, SIGABRT: process abort signal)\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50618","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50618/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50618/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50618/events","html_url":"https://github.com/rust-lang/rust/issues/50618","id":322029371,"number":50618,"title":"ICE When initializing a struct with update syntax in closure","user":{"login":"dlrobertson","id":7504153,"avatar_url":"https://avatars1.githubusercontent.com/u/7504153?v=4","gravatar_id":"","url":"https://api.github.com/users/dlrobertson","html_url":"https://github.com/dlrobertson","followers_url":"https://api.github.com/users/dlrobertson/followers","following_url":"https://api.github.com/users/dlrobertson/following{/other_user}","gists_url":"https://api.github.com/users/dlrobertson/gists{/gist_id}","starred_url":"https://api.github.com/users/dlrobertson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dlrobertson/subscriptions","organizations_url":"https://api.github.com/users/dlrobertson/orgs","repos_url":"https://api.github.com/users/dlrobertson/repos","events_url":"https://api.github.com/users/dlrobertson/events{/privacy}","received_events_url":"https://api.github.com/users/dlrobertson/received_events","type":"User","site_admin":false},"labels":[{"id":650731663,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-bug","name":"C-bug","color":"f5f1fd","default":false},{"id":9618520,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-ICE","name":"I-ICE","color":"e10c02","default":false},{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/50","html_url":"https://github.com/rust-lang/rust/milestone/50","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/50/labels","id":3245333,"number":50,"title":"1.27","description":"","creator":{"login":"alexcrichton","id":64996,"avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false},"open_issues":3,"closed_issues":9,"state":"open","created_at":"2018-04-05T13:55:36Z","updated_at":"2018-05-13T11:32:40Z","due_on":"2018-06-21T07:00:00Z","closed_at":null},"comments":7,"created_at":"2018-05-10T18:14:03Z","updated_at":"2018-05-13T11:32:40Z","closed_at":"2018-05-13T11:32:40Z","author_association":"CONTRIBUTOR","body":"## TL;DR\r\nWhen initializing a struct with update syntax inside a closure, an ICE occurs if a nonexistent or misspelled member is listed.\r\n\r\n## Example that Triggers ICE\r\n\r\n```rust\r\nstruct Point {\r\n    pub x: u64,\r\n    pub y: u64,\r\n}\r\n\r\nconst TEMPLATE: Point = Point {\r\n    x: 0,\r\n    y: 0\r\n};\r\n\r\nfn main() {\r\n    let x = || {\r\n        Point {\r\n            nonexistent: 0,\r\n            ..TEMPLATE\r\n        }\r\n    };\r\n}\r\n```\r\n\r\n<details>\r\n<summary>Backtrace</summary><p>\r\n\r\n```\r\nthread 'main' panicked at 'no index for a field', libcore/option.rs:914:5\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: rustc::util::common::panic_hook\r\n             at librustc/util/common.rs:54\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:467\r\n   6: std::panicking::begin_panic_fmt\r\n             at libstd/panicking.rs:350\r\n   7: rust_begin_unwind\r\n             at libstd/panicking.rs:328\r\n   8: core::panicking::panic_fmt\r\n             at libcore/panicking.rs:71\r\n   9: core::option::expect_failed\r\n             at libcore/option.rs:914\r\n  10: rustc::ty::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::field_index\r\n             at /home/drobertson/git/rust/src/libcore/option.rs:302\r\n             at librustc/ty/mod.rs:2410\r\n  11: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr\r\n             at librustc/middle/expr_use_visitor.rs:665\r\n             at /home/drobertson/git/rust/src/libcore/iter/iterator.rs:1689\r\n             at /home/drobertson/git/rust/src/libcore/iter/iterator.rs:1519\r\n             at /home/drobertson/git/rust/src/libcore/slice/mod.rs:2693\r\n             at /home/drobertson/git/rust/src/libcore/iter/iterator.rs:1519\r\n             at /home/drobertson/git/rust/src/libcore/iter/iterator.rs:1688\r\n             at librustc/middle/expr_use_visitor.rs:664\r\n             at librustc/middle/expr_use_visitor.rs:423\r\n  12: rustc::middle::expr_use_visitor::ExprUseVisitor::consume_expr\r\n             at librustc/middle/expr_use_visitor.rs:358\r\n  13: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_block\r\n             at librustc/middle/expr_use_visitor.rs:639\r\n  14: rustc::middle::expr_use_visitor::ExprUseVisitor::walk_expr\r\n             at librustc/middle/expr_use_visitor.rs:0\r\n  15: rustc::middle::expr_use_visitor::ExprUseVisitor::consume_expr\r\n             at librustc/middle/expr_use_visitor.rs:358\r\n  16: rustc::middle::expr_use_visitor::ExprUseVisitor::consume_body\r\n             at librustc/middle/expr_use_visitor.rs:329\r\n  17: rustc_typeck::check::upvar::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::analyze_closure\r\n             at librustc_typeck/check/upvar.rs:171\r\n  18: <rustc_typeck::check::upvar::InferBorrowKindVisitor<'a, 'gcx, 'tcx> as rustc::hir::intravisit::Visitor<'gcx>>::visit_expr\r\n             at librustc_typeck/check/upvar.rs:80\r\n  19: rustc::hir::intravisit::walk_local\r\n             at /home/drobertson/git/rust/src/<walk_list macros>:2\r\n  20: rustc::hir::intravisit::walk_block\r\n             at /home/drobertson/git/rust/src/<walk_list macros>:2\r\n  21: rustc_typeck::check::upvar::<impl rustc_typeck::check::FnCtxt<'a, 'gcx, 'tcx>>::closure_analyze                                                                                                                                 \r\n             at librustc_typeck/check/upvar.rs:59\r\n  22: rustc::ty::context::tls::with_related_context\r\n             at librustc_typeck/check/mod.rs:904\r\n             at librustc_typeck/check/mod.rs:617\r\n             at /home/drobertson/git/rust/src/librustc/infer/mod.rs:453\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1578\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1844\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1787\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1843\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1577\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1905\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1889\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1880\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1889\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1900\r\n  23: rustc::ty::context::GlobalCtxt::enter_local\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1570\r\n  24: rustc::infer::InferCtxtBuilder::enter\r\n             at /home/drobertson/git/rust/src/librustc/infer/mod.rs:453\r\n  25: rustc_typeck::check::InheritedBuilder::enter\r\n             at librustc_typeck/check/mod.rs:617\r\n  26: rustc_typeck::check::typeck_tables_of\r\n             at librustc_typeck/check/mod.rs:855\r\n  27: rustc::ty::maps::<impl rustc::ty::maps::config::QueryConfig<'tcx> for rustc::ty::maps::queries::typeck_tables_of<'tcx>>::compute\r\n             at librustc/ty/maps/plumbing.rs:723\r\n  28: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n             at librustc/dep_graph/graph.rs:343\r\n  29: rustc::dep_graph::graph::DepGraph::with_task\r\n             at librustc/dep_graph/graph.rs:209\r\n  30: rustc::ty::context::tls::with_related_context\r\n             at librustc/ty/maps/plumbing.rs:530\r\n             at librustc/ty/maps/plumbing.rs:200\r\n             at librustc/ty/context.rs:1844\r\n             at librustc/ty/context.rs:1787\r\n             at librustc/ty/context.rs:1843\r\n             at librustc/ty/maps/plumbing.rs:199\r\n             at librustc/ty/context.rs:1905\r\n             at librustc/ty/context.rs:1889\r\n             at librustc/ty/context.rs:1880\r\n             at librustc/ty/context.rs:1889\r\n             at librustc/ty/context.rs:1900\r\n  31: <rustc::ty::maps::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n             at librustc/ty/maps/plumbing.rs:189\r\n  32: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n             at librustc/ty/maps/plumbing.rs:523\r\n  33: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n             at librustc/ty/maps/plumbing.rs:372\r\n             at librustc/ty/maps/plumbing.rs:599\r\n             at librustc/ty/maps/plumbing.rs:606\r\n  34: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::ensure_query\r\n             at librustc/ty/maps/plumbing.rs:574\r\n  35: rustc::session::Session::track_errors\r\n             at librustc_typeck/check/mod.rs:715\r\n             at /home/drobertson/git/rust/src/librustc/session/mod.rs:318\r\n  36: rustc_typeck::check::typeck_item_bodies\r\n             at librustc_typeck/check/mod.rs:713\r\n  37: rustc::ty::maps::<impl rustc::ty::maps::config::QueryConfig<'tcx> for rustc::ty::maps::queries::typeck_item_bodies<'tcx>>::compute\r\n             at librustc/ty/maps/plumbing.rs:723\r\n  38: rustc::dep_graph::graph::DepGraph::with_task_impl\r\n             at librustc/dep_graph/graph.rs:343\r\n  39: rustc::dep_graph::graph::DepGraph::with_task\r\n             at librustc/dep_graph/graph.rs:209\r\n  40: rustc::ty::context::tls::with_
8000
related_context\r\n             at librustc/ty/maps/plumbing.rs:530\r\n             at librustc/ty/maps/plumbing.rs:200\r\n             at librustc/ty/context.rs:1844\r\n             at librustc/ty/context.rs:1787\r\n             at librustc/ty/context.rs:1843\r\n             at librustc/ty/maps/plumbing.rs:199\r\n             at librustc/ty/context.rs:1905\r\n             at librustc/ty/context.rs:1889\r\n             at librustc/ty/context.rs:1880\r\n             at librustc/ty/context.rs:1889\r\n             at librustc/ty/context.rs:1900\r\n  41: <rustc::ty::maps::plumbing::JobOwner<'a, 'tcx, Q>>::start\r\n             at librustc/ty/maps/plumbing.rs:189\r\n  42: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::force_query_with_job\r\n             at librustc/ty/maps/plumbing.rs:523\r\n  43: rustc::ty::maps::plumbing::<impl rustc::ty::context::TyCtxt<'a, 'gcx, 'tcx>>::get_query\r\n             at librustc/ty/maps/plumbing.rs:372\r\n             at librustc/ty/maps/plumbing.rs:599\r\n             at librustc/ty/maps/plumbing.rs:606\r\n  44: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::typeck_item_bodies\r\n             at librustc/ty/maps/plumbing.rs:769\r\n  45: rustc::util::common::time\r\n             at librustc_typeck/lib.rs:344\r\n             at /home/drobertson/git/rust/src/librustc/util/common.rs:166\r\n             at /home/drobertson/git/rust/src/librustc/util/common.rs:160\r\n  46: rustc_typeck::check_crate\r\n             at librustc_typeck/lib.rs:344\r\n  47: rustc::ty::context::tls::enter_context\r\n             at librustc_driver/driver.rs:1121\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1867\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1844\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1787\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1843\r\n  48: <std::thread::local::LocalKey<T>>::with\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1866\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1833\r\n             at /home/drobertson/git/rust/src/libstd/thread/local.rs:294\r\n             at /home/drobertson/git/rust/src/libstd/thread/local.rs:248\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1825\r\n             at /home/drobertson/git/rust/src/libstd/thread/local.rs:294\r\n             at /home/drobertson/git/rust/src/libstd/thread/local.rs:248\r\n  49: rustc::ty::context::tls::enter_global\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1817\r\n            at /home/drobertson/git/rust/src/librustc/ty/context.rs:1855\r\n  50: rustc::ty::context::TyCtxt::create_and_enter\r\n             at /home/drobertson/git/rust/src/librustc/ty/context.rs:1299\r\n  51: rustc_driver::driver::phase_3_run_analysis_passes\r\n             at librustc_driver/driver.rs:1095\r\n  52: rustc_driver::driver::compile_input\r\n             at librustc_driver/driver.rs:231\r\n  53: rustc_driver::run_compiler_impl\r\n             at librustc_driver/lib.rs:540\r\n  54: <scoped_tls::ScopedKey<T>>::set\r\n             at librustc_driver/lib.rs:457\r\n             at /home/drobertson/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.1/src/lib.rs:155\r\n             at /home/drobertson/git/rust/src/libsyntax/lib.rs:97\r\n             at /home/drobertson/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-0.1.1/src/lib.rs:155\r\n  55: syntax::with_globals\r\n             at /home/drobertson/git/rust/src/libsyntax/lib.rs:96\r\n  56: rustc_driver::run_compiler\r\n             at librustc_driver/lib.rs:456\r\n  57: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\n             at librustc_driver/lib.rs:1684\r\n             at librustc_driver/lib.rs:174\r\n             at librustc_driver/lib.rs:1598\r\n             at /home/drobertson/git/rust/src/libstd/panic.rs:305\r\n  58: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  59: std::panicking::try\r\n             at /home/drobertson/git/rust/src/libstd/panicking.rs:289\r\n  60: rustc_driver::run\r\n             at librustc_driver/lib.rs:1530\r\n             at librustc_driver/lib.rs:1597\r\n             at librustc_driver/lib.rs:173\r\n  61: rustc_driver::main\r\n             at librustc_driver/lib.rs:1677\r\n  62: std::rt::lang_start::{{closure}}\r\n             at /home/drobertson/git/rust/src/libstd/rt.rs:74\r\n  63: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:310\r\n  64: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  65: std::panicking::try\r\n             at libstd/panicking.rs:289\r\n  66: std::panic::catch_unwind\r\n             at libstd/panic.rs:374\r\n  67: std::rt::lang_start_internal\r\n             at libstd/rt.rs:58\r\n  68: std::rt::lang_start\r\n             at /home/drobertson/git/rust/src/libstd/rt.rs:74\r\n  69: __libc_start_main\r\n  70: _start\r\n```\r\n</details>\r\n\r\n## Meta\r\n\r\n```\r\n$ rustc +stage1 --version --verbose\r\nrustc 1.27.0-dev\r\nbinary: rustc\r\ncommit-hash: unknown\r\ncommit-date: unknown\r\nhost: x86_64-unknown-linux-gnu\r\nrelease: 1.27.0-dev\r\nLLVM version: 6.0\r\n$ git rev-parse HEAD\r\n0a223d139cd26e5bfab23a478a5cad845eaab131\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50601","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50601/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50601/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50601/events","html_url":"https://github.com/rust-lang/rust/issues/50601","id":321854491,"number":50601,"title":"Cannot find existing o lib","user":{"login":"trsh","id":3727523,"avatar_url":"https://avatars0.githubusercontent.com/u/3727523?v=4","gravatar_id":"","url":"https://api.github.com/users/trsh","html_url":"https://github.com/trsh","followers_url":"https://api.github.com/users/trsh/followers","following_url":"https://api.github.com/users/trsh/following{/other_user}","gists_url":"https://api.github.com/users/trsh/gists{/gist_id}","starred_url":"https://api.github.com/users/trsh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/trsh/subscriptions","organizations_url":"https://api.github.com/users/trsh/orgs","repos_url":"https://api.github.com/users/trsh/repos","events_url":"https://api.github.com/users/trsh/events{/privacy}","received_events_url":"https://api.github.com/users/trsh/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-10T08:41:28Z","updated_at":"2018-05-13T06:58:47Z","closed_at":"2018-05-11T15:38:21Z","author_association":"NONE","body":"```\r\n[build]\r\nrustc = \"rustc\"\r\nrustflags = [\"-l /home/trsh/forks/rust-ffi-examples/rust-to-c/src/double.o\"]\r\n```\r\nnote: /usr/bin/ld: cannot find -l /home/trsh/forks/rust-ffi-examples/rust-to-c/src/double.o\r\n\r\n`trsh@trsh-comp:~/forks/rust-ffi-examples/rust-to-c$ ls -l /home/trsh/forks/rust-ffi-examples/rust-to-c/src/`\r\n\r\n```\r\n...\r\n-rw-r--r-- 1 trsh trsh   3520 mai 10 11:22 double.o\r\n...\r\n```\r\n\r\nM?\r\n\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50596","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50596/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50596/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50596/events","html_url":"https://github.com/rust-lang/rust/issues/50596","id":321806550,"number":50596,"title":"\"cargo build\" on nightly rebuilds entire crate after adjacent crate in workplace is built","user":{"login":"tcr","id":80639,"avatar_url":"https://avatars3.githubusercontent.com/u/80639?v=4","gravatar_id":"","url":"https://api.github.com/users/tcr","html_url":"https://github.com/tcr","followers_url":"https://api.github.com/users/tcr/followers","following_url":"https://api.github.com/users/tcr/following{/other_user}","gists_url":"https://api.github.com/users/tcr/gists{/gist_id}","starred_url":"https://api.github.com/users/tcr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tcr/subscriptions","organizations_url":"https://api.github.com/users/tcr/orgs","repos_url":"https://api.github.com/users/tcr/repos","events_url":"https://api.github.com/users/tcr/events{/privacy}","received_events_url":"https://api.github.com/users/tcr/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-10T04:34:19Z","updated_at":"2018-05-11T19:03:35Z","closed_at":"2018-05-11T19:03:34Z","author_association":"NONE","body":"First step, I clone the cargo workspace project that had this error: https://github.com/tcr/edit-text/tree/9d2bd2642a0e796d3eb1a7d1cfd333ed4fe43eeb\r\n\r\nThe `rust-toolchain` version is pegged to `2018-04-08`. With that version of `rustc`, I can do the following:\r\n\r\n* `cd mercutio-server; cargo build` — performs a full build of this crate\r\n* `cd ../test; cargo build` — performs a full build of this crate\r\n* `cd ../mercutio-server; cargo build` — Because this is already built, it just outputs the line \"Finished ...\" indicating the binary does not need recompilation.\r\n\r\nBut then if I change the `rust-toolchain` version to `2018-05-08`, I see the following:\r\n\r\n* `cd mercutio-server; cargo build` — performs a full build of this crate\r\n* `cd ../test; cargo build` — performs a full build of this crate\r\n* `cd ../mercutio-server; cargo build` — A full build of this crate is *again* performed, even though all the result should have been cached.\r\n\r\n## Meta\r\n\r\n`rustc --version --verbose`:\r\n\r\n```\r\nrustc 1.27.0-nightly (056f589fb 2018-04-07)\r\nbinary: rustc\r\ncommit-hash: 056f589fb8bcd70e7caa2bc7b3ede45624bb8e6d\r\ncommit-date: 2018-04-07\r\nhost: x86_64-apple-darwin\r\nrelease: 1.27.0-nightly\r\nLLVM version: 6.0\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50578","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50578/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50578/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50578/events","html_url":"https://github.com/rust-lang/rust/issues/50578","id":321653412,"number":50578,"title":"Incorrect spans for tuple struct fields","user":{"login":"estebank","id":1606434,"avatar_url":"https://avatars2.githubusercontent.com/u/1606434?v=4","gravatar_id":"","url":"https://api.github.com/users/estebank","html_url":"https://github.com/estebank","followers_url":"https://api.github.com/users/estebank/followers","following_url":"https://api.github.com/users/estebank/following{/other_user}","gists_url":"https://api.github.com/users/estebank/gists{/gist_id}","starred_url":"https://api.github.com/users/estebank/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/estebank/subscriptions","organizations_url":"https://api.github.com/users/estebank/orgs","repos_url":"https://api.github.com/users/estebank/repos","events_url":"https://api.github.com/users/estebank/events{/privacy}","received_events_url":"https://api.github.com/users/estebank/received_events","type":"User","site_admin":false},"labels":[{"id":235791,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-diagnostics","name":"A-diagnostics","color":"d7e102","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-05-09T17:11:23Z","updated_at":"2018-05-11T02:03:51Z","closed_at":"2018-05-11T02:03:51Z","author_association":"CONTRIBUTOR","body":"As [identified in a recent PR](https://github.com/rust-lang/rust/pull/50536/files/d19039129ad1ca1fb80606b06968ae87234ce392#r186876378), tuple [struct fields have spans including trailing characters](https://play.rust-lang.org/?gist=d187ee724dace804a779268d43a483e6&version=nightly&mode=debug) (`,` and `)`):\r\n\r\n```\r\nerror[E0204]: the trait `Copy` may not be implemented for this type\r\n --> src/main.rs:1:17\r\n  |\r\n1 | #[derive(Clone, Copy)]\r\n  |                 ^^^^\r\n2 | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\r\n  |            ----------- this field does not implement `Copy`\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50568","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50568/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50568/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50568/events","html_url":"https://github.com/rust-lang/rust/issues/50568","id":321534204,"number":50568,"title":"[QoL] Renaming Generic Types in std to avoid confusion","user":{"login":"shingtaklam1324","id":15098580,"avatar_url":"https://avatars1.githubusercontent.com/u/15098580?v=4","gravatar_id":"","url":"https://api.github.com/users/shingtaklam1324","html_url":"https://github.com/shingtaklam1324","followers_url":"https://api.github.com/users/shingtaklam1324/followers","following_url":"https://api.github.com/users/shingtaklam1324/following{/other_user}","gists_url":"https://api.github.com/users/shingtaklam1324/gists{/gist_id}","starred_url":"https://api.github.com/users/shingtaklam1324/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shingtaklam1324/subscriptions","organizations_url":"https://api.github.com/users/shingtaklam1324/orgs","repos_url":"https://api.github.com/users/shingtaklam1324/repos","events_url":"https://api.github.com/users/shingtaklam1324/events{/privacy}","received_events_url":"https://api.github.com/users/shingtaklam1324/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-09T11:32:39Z","updated_at":"2018-05-09T13:32:43Z","closed_at":"2018-05-09T13:31:23Z","author_association":"NONE","body":"This is not a functional improvement, but a quality of life and learning curve improvement.\r\n\r\nIssue\r\n---\r\n\r\nIn the type `Result<T, E>`, `unwrap_or_else` has the signature `pub fn unwrap_or_else<F>(self, op: F) -> T`, where `F: FnOnce(E) -> T, `. This has the problem of potentially confusing newcomers (and experienced Rust programmers) as the type `T` in this function doesn't have to be the same type as `Result<T, E>`'s `T`.\r\n\r\nReference\r\n---\r\n\r\nhttps://www.reddit.com/r/rust/comments/8hjwvf/hey_rustaceans_got_an_easy_question_ask_here/dyortmr/","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50563","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50563/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50563/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50563/events","html_url":"https://github.com/rust-lang/rust/issues/50563","id":321503167,"number":50563,"title":"Union use unassigned fields","user":{"login":"ZhangHanDong","id":27893,"avatar_url":"https://avatars2.githubusercontent.com/u/27893?v=4","gravatar_id":"","url":"https://api.github.com/users/ZhangHanDong","html_url":"https://github.com/ZhangHanDong","followers_url":"https://api.github.com/users/ZhangHanDong/followers","following_url":"https://api.github.com/users/ZhangHanDong/following{/other_user}","gists_url":"https://api.github.com/users/ZhangHanDong/gists{/gist_id}","starred_url":"https://api.github.com/users/ZhangHanDong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ZhangHanDong/subscriptions","organizations_url":"https://api.github.com/users/ZhangHanDong/orgs","repos_url":"https://api.github.com/users/ZhangHanDong/repos","events_url":"https://api.github.com/users/ZhangHanDong/events{/privacy}","received_events_url":"https://api.github.com/users/ZhangHanDong/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-05-09T09:48:08Z","updated_at":"2018-05-09T10:34:50Z","closed_at":"2018-05-09T09:59:42Z","author_association":"NONE","body":"```rust\r\nunion U {\r\n    i: i32,\r\n    f: f32,\r\n}\r\nfn main() {\r\n    let mut u1 = U { i: 2 };\r\n    let i  = unsafe { &mut u1.f };\r\n    println!(\"{:?}\", i ); //0.000000000000000000000000000000000000000000003 \r\n}\r\n\r\n```\r\n\r\nIs this normal output? \r\n\r\nrustc already knows that the type of `i` is `&mut f32`, which should be normally converted to `2.0`.  Can this undefined behavior be avoided？","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50557","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50557/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50557/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50557/events","html_url":"https://github.com/rust-lang/rust/issues/50557","id":321423223,"number":50557,"title":"Clippy and Miri should not block beta releases","user":{"login":"alexcrichton","id":64996,"avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-05-09T04:04:01Z","updated_at":"2018-05-13T06:05:05Z","closed_at":"2018-05-13T06:05:05Z","author_association":"OWNER","body":"I think this is the fourth beta I'm having to re-figure-out how all this works and figure out how to ignore their failures on beta. @kennytm can we just exclude these tools from toolstate until this is figured out?","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50555","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50555/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50555/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50555/events","html_url":"https://github.com/rust-lang/rust/issues/50555","id":321403220,"number":50555,"title":"Rejecting higher-kinded lifetime bounds is a breaking change","user":{"login":"comex","id":47517,"avatar_url":"https://avatars1.githubusercontent.com/u/47517?v=4","gravatar_id":"","url":"https://api.github.com/users/comex","html_url":"https://github.com/comex","followers_url":"https://api.github.com/users/comex/followers","following_url":"https://api.github.com/users/comex/following{/other_user}","gists_url":"https://api.github.com/users/comex/gists{/gist_id}","starred_url":"https://api.github.com/users/comex/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/comex/subscriptions","organizations_url":"https://api.github.com/users/comex/orgs","repos_url":"https://api.github.com/users/comex/repos","events_url":"https://api.github.com/users/comex/events{/privacy}","received_events_url":"https://api.github.com/users/comex/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-09T01:52:03Z","updated_at":"2018-05-10T23:33:13Z","closed_at":"2018-05-10T23:33:13Z","author_association":"CONTRIBUTOR","body":"```rust\r\nfn foo<'s, F>(s: &'s i32, f: F) where for<'a: 's> F: FnOnce(&'a i32) {\r\n    f(s)\r\n}\r\n\r\nfn main() {\r\n    foo(&42, |x| println!(\"{}\", x));\r\n}\r\n```\r\n\r\n[Playground Link](https://play.rust-lang.org/?gist=ddbae29bc980ea3f4e6b17aa8d4112ec&version=beta&mode=debug)\r\n\r\nThis compiles on stable; on beta and above, it produces:\r\n\r\n    error: lifetime bounds cannot be used in this context\r\n\r\nApparently this is on purpose:\r\n\r\n```\r\ncommit 49abd8748357012e5db10bf11077384f727e2177\r\nAuthor: Ralf Jung <post@ralfj.de>\r\nDate:   Tue Mar 6 11:22:24 2018 +0100\r\n\r\n    make bounds on higher-kinded lifetimes a hard error in ast_validation\r\n    \r\n    Also move the check for not having type parameters into ast_validation.\r\n    \r\n    I was not sure what to do with compile-fail/issue-23046.rs: The issue looks like\r\n    maybe the bounds actually played a role in triggering the ICE, but that seems\r\n    unlikely given that the compiler seems to entirely ignore them.  However, I\r\n    couldn't find a testcase without the bounds, so I figured the best I could do is\r\n    to just remove the bounds and make sure at least that keeps working.\r\n```\r\n\r\nBut it's still a gratuitous breaking change, which seems unfortunate… even if the lifetimes weren't being handled correctly before.\r\n\r\ncc @RalfJung ","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50535","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50535/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50535/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50535/events","html_url":"https://github.com/rust-lang/rust/issues/50535","id":321201622,"number":50535,"title":"tidy script should ignore directories not following the style guide it checks","user":{"login":"gnzlbg","id":904614,"avatar_url":"https://avatars0.githubusercontent.com/u/904614?v=4","gravatar_id":"","url":"https://api.github.com/users/gnzlbg","html_url":"https://github.com/gnzlbg","followers_url":"https://api.github.com/users/gnzlbg/followers","following_url":"https://api.github.com/users/gnzlbg/following{/other_user}","gists_url":"https://api.github.com/users/gnzlbg/gists{/gist_id}","starred_url":"https://api.github.com/users/gnzlbg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gnzlbg/subscriptions","organizations_url":"https://api.github.com/users/gnzlbg/orgs","repos_url":"https://api.github.com/users/gnzlbg/repos","events_url":"https://api.github.com/users/gnzlbg/events{/privacy}","received_events_url":"https://api.github.com/users/gnzlbg/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-08T14:06:28Z","updated_at":"2018-05-08T15:28:53Z","closed_at":"2018-05-08T15:28:53Z","author_association":"CONTRIBUTOR","body":"I get a gazillion error from `rust/src/binaryen` when running the tidy script. If the whole directory does not follow the style guide, it should be ignored.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50534","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50534/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50534/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50534/events","html_url":"https://github.com/rust-lang/rust/issues/50534","id":321199272,"number":50534,"title":"Nightly 2018-05-05 had an unexpected panic","user":{"login":"jcdyer","id":77486,"avatar_url":"https://avatars0.githubusercontent.com/u/77486?v=4","gravatar_id":"","url":"https://api.github.com/users/jcdyer","html_url":"https://github.com/jcdyer","followers_url":"https://api.github.com/users/jcdyer/followers","following_url":"https://api.github.com/users/jcdyer/following{/other_user}","gists_url":"https://api.github.com/users/jcdyer/gists{/gist_id}","starred_url":"https://api.github.com/users/jcdyer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jcdyer/subscriptions","organizations_url":"https://api.github.com/users/jcdyer/orgs","repos_url":"https://api.github.com/users/jcdyer/repos","events_url":"https://api.github.com/users/jcdyer/events{/privacy}","received_events_url":"https://api.github.com/users/jcdyer/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-08T14:00:41Z","updated_at":"2018-05-08T15:05:30Z","closed_at":"2018-05-08T15:05:30Z","author_association":"CONTRIBUTOR","body":"I hit the panic while running clippy as follows:\r\n```\r\ncliff@conakry:~/src/hops$ cargo +nightly clippy\r\n    Checking cfg-if v0.1.3\r\n    Checking libc v0.2.40\r\n    Checking nodrop v0.1.12\r\n    Checking scopeguard v0.3.3\r\n    Checking lazy_static v1.0.0\r\n    Checking byteorder v1.2.2\r\n    Checking memoffset v0.2.1\r\n   Compiling unicode-xid v0.1.0\r\n    Checking slab v0.4.0\r\n    Checking futures v0.1.21\r\nthread 'main' panicked at 'index out of bounds: the len is 1 but the index is 1', /home/cliff/.cargo/registry/src/github.com-1ecc6299db9ec823/clippy_lints-0.0.197/src/utils/higher.rs:76:32\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\n\r\nerror: internal compiler error: unexpected panic\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\r\n\r\nnote: rustc 1.27.0-nightly (f9bfe840f 2018-05-05) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C debuginfo=2 --crate-type lib\r\n\r\nnote: some of the compiler flags provided by cargo are hidden\r\n```\r\n\r\nThe crate under question consists of a single main.rs and a few cargo dependencies, as below:\r\n\r\n### Cargo.toml\r\n\r\n```toml\r\n[package]\r\nname = \"hops\"\r\nversion = \"0.1.0\"\r\nauthors = [\"J. Cliff Dyer <jcd@sdf.org>\"]\r\n\r\n[dependencies]\r\nbytes = \"*\"\r\nclap = \"*\"\r\nrand = \"*\"\r\nserde = \"*\"\r\nserde_derive = \"*\"\r\nserde_json = \"*\"\r\ntokio = \"0.1\"\r\n```\r\n\r\n### src/main.rs\r\n\r\n```rust\r\nextern crate bytes;\r\nextern crate clap;\r\nextern crate rand;\r\nextern crate serde;\r\n#[macro_use] extern crate serde_derive;\r\nextern crate serde_json;\r\nextern crate tokio;\r\n\r\nuse bytes::BytesMut;\r\nuse clap::{Arg, App};\r\nuse rand::random;\r\nuse tokio::io;\r\nuse tokio::net::{TcpListener, UdpSocket, UdpFramed};\r\nuse tokio::prelude::*;\r\nuse tokio_io::codec::{Encoder, Decoder};\r\nuse serde_json::{de, ser};\r\n\r\n\r\npub struct Codec;\r\n\r\n\r\nimpl Codec {\r\n    fn new() -> Codec { Codec }\r\n}\r\n\r\nimpl Encoder for Codec {\r\n    type Item = Ping;\r\n    type Error = io::Error;\r\n    fn encode(&mut self, item: Ping, dst: &mut BytesMut) -> Result<(), io::Error> {\r\n        dst.put(ser::to_string(item)?);\r\n        Ok(())\r\n    }\r\n}\r\n\r\nimpl Decoder for Codec {\r\n    type Item = Ping;\r\n    type Error = io::Error;\r\n    fn decode(&mut self, src: &mut BytesMut) -> Result<Option<Ping>, io::Error> {\r\n        let len = src.len();\r\n        let ping = de::from_str(&src.split_to(len))?;\r\n        Ok(Some(ping));\r\n    }\r\n}\r\n\r\n\r\n#[derive(Clone, Copy, Debug, Serialize, Deserialize)]\r\nstruct Ping{\r\n    source: u16, \r\n    hops: u32\r\n} \r\n\r\n\r\nfn main() {\r\n    let matches = App::new(\"test\")\r\n        .arg(Arg::with_name(\"port\")\r\n             .short(\"p\")\r\n             .long(\"port\")\r\n             .takes_value(true))\r\n        .arg(Arg::with_name(\"neighbors\")\r\n             .multiple(true))\r\n        .get_matches();\r\n    let port = matches.value_of(\"port\").expect(\"port\").parse::<u16>().unwrap();\r\n    let neighbors = matches.values_of(\"neighbors\").expect(\"neighbors\")\r\n        .map(|x| x.parse::<u16>().unwrap())\r\n        .collect::<Vec<_>>();\r\n    let addr = ([0, 0, 0, 0, 0, 0, 0, 1], port).into();\r\n\r\n    let (stream, sink) = UdpFramed::new(\r\n        UdpSocket::bind(&addr).unwrap(),\r\n        Codec::new(),\r\n    ).split();\r\n    stream.for_each(|ping, _socket| {\r\n        if ping.source == port {\r\n            println!(\"Received ping after {} hops\", ping.hops)\r\n        } else {\r\n            let dest = random() % neighbors.len();\r\n            let neighbor = neighbors[dest];\r\n            let dgram = sink.send((Ping { src: ping.src, hops: ping.hops + 1 }, neighbor));\r\n            tokio::spawn(dgram);\r\n        }\r\n        Ok(())\r\n    })\r\n    .map_err(|err| {\r\n        // All tasks must have an `Error` type of `()`. This forces error\r\n        // handling and helps avoid silencing failures.\r\n        //\r\n        // In our example, we are only going to log the error to STDOUT.\r\n        println!(\"accept error = {:?}\", err);\r\n    });\r\n    println!(\"Server running on {:?}\", addr);\r\n    println!(\"Connecting to neighbors at ports: {:?}\", neighbors);\r\n    tokio::run(stream);\r\n}\r\n```\r\n\r\n### Cargo.lock\r\n\r\n```toml\r\n[[package]]\r\nname = \"ansi_term\"\r\nversion = \"0.11.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"arrayvec\"\r\nversion = \"0.4.7\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"atty\"\r\nversion = \"0.2.10\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"bitflags\"\r\nversion = \"1.0.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"byteorder\"\r\nversion = \"1.2.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"bytes\"\r\nversion = \"0.4.7\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"cfg-if\"\r\nversion = \"0.1.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"clap\"\r\nversion = \"2.31.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-deque\"\r\nversion = \"0.3.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"crossbeam-epoch 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"crossbeam-utils 0.3.2 (registry
8000
+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-epoch\"\r\nversion = \"0.4.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"crossbeam-utils 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"crossbeam-utils\"\r\nversion = \"0.3.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"dtoa\"\r\nversion = \"0.4.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"fuchsia-zircon\"\r\nversion = \"0.3.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"fuchsia-zircon-sys\"\r\nversion = \"0.3.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"futures\"\r\nversion = \"0.1.21\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"hops\"\r\nversion = \"0.1.0\"\r\ndependencies = [\r\n \"bytes 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"serde 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"serde_derive 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"serde_json 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"iovec\"\r\nversion = \"0.1.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"itoa\"\r\nversion = \"0.4.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"kernel32-sys\"\r\nversion = \"0.2.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"lazy_static\"\r\nversion = \"1.0.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"lazycell\"\r\nversion = \"0.6.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"libc\"\r\nversion = \"0.2.40\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"log\"\r\nversion = \"0.4.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"memoffset\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"mio\"\r\nversion = \"0.6.14\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"lazycell 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"net2 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"slab 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"miow\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"net2 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"net2\"\r\nversion = \"0.2.32\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"nodrop\"\r\nversion = \"0.1.12\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"num_cpus\"\r\nversion = \"1.8.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"proc-macro2\"\r\nversion = \"0.3.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"quote\"\r\nversion = \"0.5.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"rand\"\r\nversion = \"0.4.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"redox_syscall\"\r\nversion = \"0.1.37\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"redox_termios\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"scopeguard\"\r\nversion = \"0.3.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"serde\"\r\nversion = \"1.0.50\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"serde_derive\"\r\nversion = \"1.0.50\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"quote 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"syn 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"serde_json\"\r\nversion = \"1.0.17\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"itoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"serde 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"slab\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"strsim\"\r\nversion = \"0.7.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"syn\"\r\nversion = \"0.13.7\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"quote 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"termion\"\r\nversion = \"1.5.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"textwrap\"\r\nversion = \"0.9.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio\"\r\nversion = \"0.1.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-fs 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-tcp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-threadpool 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-timer 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-udp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-executor\"\r\nversion = \"0.1.2\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-fs\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-threadpool 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-io\"\r\nversion = \"0.1.6\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"bytes 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-reactor\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"slab 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-tcp\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"bytes 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-threadpool\"\r\nversion = \"0.1.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"crossbeam-deque 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-timer\"\r\nversion = \"0.2.3\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"tokio-udp\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"bytes 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"unicode-width\"\r\nversion = \"0.1.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"unicode-xid\"\r\nversion = \"0.1.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"vec_map\"\r\nversion = \"0.8.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"winapi\"\r\nversion = \"0.2.8\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"winapi\"\r\nversion = \"0.3.4\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[[package]]\r\nname = \"winapi-build\"\r\nversion = \"0.1.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"winapi-i686-pc-windows-gnu\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"winapi-x86_64-pc-windows-gnu\"\r\nversion = \"0.4.0\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\n\r\n[[package]]\r\nname = \"ws2_32-sys\"\r\nversion = \"0.2.1\"\r\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\r\ndependencies = [\r\n \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\r\n]\r\n\r\n[metadata]\r\n\"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\r\n\"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\r\n\"checksum atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fc4a1aa4c24c0718a250f0681885c1af91419d242f29eb8f2ab28502d80dbd1\"\r\n\"checksum bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0c54bb8f454c567f21197eefcdbf5679d0bd99f2ddbe52e84c77061952e6789\"\r\n\"checksum byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73b5bdfe7ee3ad0b99c9801d58807a9dbc9e09196365b0203853b99889ab3c87\"\r\n\"checksum bytes 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f1d50c876fb7545f5f289cd8b2aee3f359d073ae819eed5d6373638e2c61e59\"\r\n\"checksum cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"405216fd8fe65f718daa7102ea808a946b6ce40c742998fbfd3463645552de18\"\r\n\"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536\"\r\n\"checksum crossbeam-deque 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fe8153ef04a7594ded05b427ffad46ddeaf22e63fd48d42b3e1e3bb4db07cae7\"\r\n\"checksum crossbeam-epoch 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b4e2817eb773f770dcb294127c011e22771899c21d18fce7dd739c0b9832e81\"\r\n\"checksum crossbeam-utils 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d636a8b3bcc1b409d7ffd3facef8f21dcb4009626adbd0c5e6c4305c07253c7b\"\r\n\"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\r\n\"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\r\n\"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\r\n\"checksum futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a70b146671de62ec8c8ed572219ca5d594d9b06c0b364d5e67b722fc559b48c\"\r\n\"checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08\"\r\n\"checksum itoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c069bbec61e1ca5a596166e55dfe4773ff745c3d16b700013bcaff9a6df2c682\"\r\n\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\r\n\"checksum lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8f31047daa365f19be14b47c29df4f7c3b581832407daabe6ae77397619237d\"\r\n\"checksum lazycell 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a6f08839bc70ef4a3fe1d566d5350f519c5912ea86be0df1740a7d247c7fc0ef\"\r\n\"checksum libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6fd41f331ac7c5b8ac259b8bf82c75c0fb2e469bbf37d2becbba9a6a2221965b\"\r\n\"checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2\"\r\n\"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\r\n\"checksum mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d771e3ef92d58a8da8df7d6976bfca9371ed1de6619d9d5a5ce5b1f29b85bfe\"\r\n\"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\r\n\"checksum net2 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9044faf1413a1057267be51b5afba8eb1090bd2231c693664aa1db716fe1eae0\"\r\n\"checksum nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a2228dca57108069a5262f2ed8bd2e82496d2e074a06d1ccc7ce1687b6ae0a2\"\r\n\"checksum num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a3322e4bca9d212ad9a158a02abc6934d005490c054a2778df73a70aa0a30\"\r\n\"checksum proc-macro2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1b06e2f335f48d24442b35a19df506a835fb3547bc3c06ef27340da9acf5cae7\"\r\n\"checksum quote 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9949cfe66888ffe1d53e6ec9d9f3b70714083854be20fd5e271b232a017401e8\"\r\n\"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\r\n\"checksum redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d92eecebad22b767915e4d529f89f28ee96dbbf5a4810d2b844373f136417fd\"\r\n\"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\r\n\"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\r\n\"checksum serde 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"428d3d818cb94ee037a17bf4f2200db2552e19b1825d33df2196624290716f92\"\r\n\"checksum serde_derive 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee76093b16868c4c9c8e5329c3d30745833e35390624019738472bd13e996e79\"\r\n\"checksum serde_json 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3ad6d546e765177cf3dded3c2e424a8040f870083a0e64064746b958ece9cb1\"\r\n\"checksum slab 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fdeff4cd9ecff59ec7e3744cbca73dfe5ac35c2aedb2cfba8a1c715a18912e9d\"\r\n\"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\r\n\"checksum syn 0.13.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61b8f1b737f929c6516ba46a3133fd6d5215ad8a62f66760f851f7048aebedfb\"\r\n\"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\r\n\"checksum textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0b59b6b4b44d867f1370ef1bd91bfb262bf07bf0ae65c202ea2fbc16153b693\"\r\n\"checksum tokio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d00555353b013e170ed8bc4e13f648a317d1fd12157dbcae13f7013f6cf29f5\"\r\n\"checksum tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8cac2a7883ff3567e9d66bb09100d09b33d90311feca0206c7ca034bc0c55113\"\r\n\"checksum tokio-fs 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76766830bbf9a2d5bfb50c95350d56a2e79e2c80f675967fff448bc615899708\"\r\n\"checksum tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6af9eb326f64b2d6b68438e1953341e00ab3cf54de7e35d92bfc73af8555313a\"\r\n\"checksum tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3cedc8e5af5131dc3423ffa4f877cce78ad25259a9a62de0613735a13ebc64b\"\r\n\"checksum tokio-tcp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ec9b094851aadd2caf83ba3ad8e8c4ce65a42104f7b94d9e6550023f0407853f\"\r\n\"checksum tokio-threadpool 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5783254b10c7c84a56f62c74766ef7e5b83d1f13053218c7cab8d3f2c826fa0e\"\r\n\"checksum tokio-timer 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"535fed0ccee189f3d48447587697ba3fd234b3dbbb091f0ec4613ddfec0a7c4c\"\r\n\"checksum tokio-udp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"137bda266504893ac4774e0ec4c2108f7ccdbcb7ac8dced6305fe9e4e0b5041a\"\r\n\"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\r\n\"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\r\n\"checksum vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"887b5b631c2ad01628bbbaa7dd4c869f80d3186688f8d0b6f58774fbe324988c\"\r\n\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\r\n\"checksum winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04e3bd221fcbe8a271359c04f21a76db7d0c6028862d1bb5512d85e1e2eb5bb3\"\r\n\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\r\n\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\r\n\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\r\n\"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\r\n```","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50529","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50529/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50529/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50529/events","html_url":"https://github.com/rust-lang/rust/issues/50529","id":321092566,"number":50529,"title":"Reference to a static object within const fn leads to compiler panic.","user":{"login":"dark0ne","id":1084650,"avatar_url":"https://avatars0.githubusercontent.com/u/1084650?v=4","gravatar_id":"","url":"https://api.github.com/users/dark0ne","html_url":"https://github.com/dark0ne","followers_url":"https://api.github.com/users/dark0ne/followers","following_url":"https://api.github.com/users/dark0ne/following{/other_user}","gists_url":"https://api.github.com/users/dark0ne/gists{/gist_id}","starred_url":"https://api.github.com/users/dark0ne/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dark0ne/subscriptions","organizations_url":"https://api.github.com/users/dark0ne/orgs","repos_url":"https://api.github.com/users/dark0ne/repos","events_url":"https://api.github.com/users/dark0ne/events{/privacy}","received_events_url":"https://api.github.com/users/dark0ne/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-08T08:36:21Z","updated_at":"2018-05-08T11:37:22Z","closed_at":"2018-05-08T11:37:22Z","author_association":"NONE","body":"I am initializing a reference to an object with static lifetime within a const function and the compiler panics.\r\nI reduced the code to the following example:\r\n\r\nhttps://play.rust-lang.org/?gist=2581bfb95f9f8e3f306bee0862f9f415&version=nightly&mode=debug\r\n\r\nI get the compiler output:\r\n\r\nerror: internal compiler error: librustc_mir/monomorphize/collector.rs:1162: alloc id without corresponding allocation: 7\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:554:9\r\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\r\nerror: aborting due to previous error\r\n\r\nnote: the compiler unexpectedly panicked. this is a bug.\r\n\r\nnote: rustc 1.27.0-nightly (565235ee7 2018-05-07) running on x86_64-unknown-linux-gnu\r\n\r\nnote: compiler flags: -C codegen-units=1 -C debuginfo=2 --crate-type bin","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50523","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50523/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50523/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50523/events","html_url":"https://github.com/rust-lang/rust/issues/50523","id":321024707,"number":50523,"title":"Mapping booleans to Option","user":{"login":"jonhoo","id":176295,"avatar_url":"https://avatars2.githubusercontent.com/u/176295?v=4","gravatar_id":"","url":"https://api.github.com/users/jonhoo","html_url":"https://github.com/jonhoo","followers_url":"https://api.github.com/users/jonhoo/followers","following_url":"https://api.github.com/users/jonhoo/following{/other_user}","gists_url":"https://api.github.com/users/jonhoo/gists{/gist_id}","starred_url":"https://api.github.com/users/jonhoo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonhoo/subscriptions","organizations_url":"https://api.github.com/users/jonhoo/orgs","repos_url":"https://api.github.com/users/jonhoo/repos","events_url":"https://api.github.com/users/jonhoo/events{/privacy}","received_events_url":"https://api.github.com/users/jonhoo/received_events","type":"User","site_admin":false},"labels":[{"id":630652267,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-feature-request","name":"C-feature-request","color":"f5f1fd","default":false},{"id":211668062,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-libs","name":"T-libs","color":"bfd4f2","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-05-08T02:52:35Z","updated_at":"2018-05-08T14:56:47Z","closed_at":"2018-05-08T14:56:47Z","author_association":"CONTRIBUTOR","body":"In a decent number of situations, I end up finding myself writing code like:\r\n```rust\r\nif foo {\r\n    Some(bar)\r\n} else {\r\n    None\r\n}\r\n```\r\nThis happens especially in closures passed to `Iterator::filter_map`, but I also frequently find that I want this in `.and_then` (e.g., on futures). For cases like these, it'd be very handy to have a concise way of turning booleans into `Option`s. For example:\r\n```rust\r\nimpl bool {\r\n    fn map_true<T>(&self, on_true: T) -> Option<T> { if *self { Some(on_true) } else { None }}\r\n    fn map_false<T>(&self, on_true: T) -> Option<T> { if *self { None } else { Some(on_true) }}\r\n}\r\n```\r\nThere could also be closure variants of this for cases where the `T` is expensive to construct, but in my experience those cases are rarer. That would let the code above become:\r\n```rust\r\nfoo.map_true(bar)\r\n```\r\nThe name could of course be bikeshed (`if_true`?), but I think this is a pretty versatile and useful shorthand!","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50506","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50506/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50506/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50506/events","html_url":"https://github.com/rust-lang/rust/issues/50506","id":320835787,"number":50506,"title":"#[test] functions are silently excluded when they're defined inside of another function","user":{"login":"mjbshaw","id":1204698,"avatar_url":"https://avatars3.githubusercontent.com/u/1204698?v=4","gravatar_id":"","url":"https://api.github.com/users/mjbshaw","html_url":"https://github.com/mjbshaw","followers_url":"https://api.github.com/users/mjbshaw/followers","following_url":"https://api.github.com/users/mjbshaw/following{/other_user}","gists_url":"https://api.github.com/users/mjbshaw/gists{/gist_id}","starred_url":"https://api.github.com/users/mjbshaw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjbshaw/subscriptions","organizations_url":"https://api.github.com/users/mjbshaw/orgs","repos_url":"https://api.github.com/users/mjbshaw/repos","events_url":"https://api.github.com/users/mjbshaw/events{/privacy}","received_events_url":"https://api.github.com
4625
/users/mjbshaw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-07T14:53:59Z","updated_at":"2018-05-07T20:29:59Z","closed_at":"2018-05-07T20:29:59Z","author_association":"NONE","body":"Consider the following program:\r\n\r\n```rust\r\npub fn main() {\r\n    #[cfg(test)]\r\n    #[test]\r\n    fn it_works() {\r\n        panic!(\"Proof this test doesn't run\");\r\n    }\r\n}\r\n```\r\n\r\nI expect `cargo test` to run the unit test `it_works`. But this doesn't happen. `cargo test` doesn't run any tests:\r\n\r\n```\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nAdditionally, `rustc` emits no warnings or errors when compiling this. The test is just silently excluded from the executable (verified by running `otool` and grepping for `it_works`).\r\n\r\n`rustc` shouldn't exclude this test from the executable, and `cargo test` should run this test.\r\n\r\nYou might wonder why anyone would add a unit test within a function. My use case is a unit test injected by an attribute macro on a fn within an impl block (the attribute does many things to the function and adds the unit test to verify some parts that can't be validated at compile time).\r\n\r\nTested with `rustc 1.27.0-nightly (91db9dcf3 2018-05-04)` and `cargo 1.27.0-nightly (af3f1cd29 2018-05-03)`.","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50502","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50502/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50502/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50502/events","html_url":"https://github.com/rust-lang/rust/issues/50502","id":320826280,"number":50502,"title":"[parallel-queries] Make CrateMetadata::cnum_map immutable","user":{"login":"michaelwoerister","id":1825894,"avatar_url":"https://avatars2.githubusercontent.com/u/1825894?v=4","gravatar_id":"","url":"https://api.github.com/users/michaelwoerister","html_url":"https://github.com/michaelwoerister","followers_url":"https://api.github.com/users/michaelwoerister/followers","following_url":"https://api.github.com/users/michaelwoerister/following{/other_user}","gists_url":"https://api.github.com/users/michaelwoerister/gists{/gist_id}","starred_url":"https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michaelwoerister/subscriptions","organizations_url":"https://api.github.com/users/michaelwoerister/orgs","repos_url":"https://api.github.com/users/michaelwoerister/repos","events_url":"https://api.github.com/users/michaelwoerister/events{/privacy}","received_events_url":"https://api.github.com/users/michaelwoerister/received_events","type":"User","site_admin":false},"labels":[{"id":891133401,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-parallel-queries","name":"A-parallel-queries","color":"d7e102","default":false},{"id":234902,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-enhancement","name":"C-enhancement","color":"f5f1fd","default":false},{"id":67766349,"url":"https://api.github.com/repos/rust-lang/rust/labels/E-mentor","name":"E-mentor","color":"02E10C","default":false},{"id":849077850,"url":"https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance","name":"WG-compiler-performance","color":"c2e0c6","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-05-07T14:28:45Z","updated_at":"2018-05-11T11:11:41Z","closed_at":"2018-05-11T02:03:44Z","author_association":"CONTRIBUTOR","body":"The [CrateMetadata::cnum_map](https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src/librustc_metadata/cstore.rs#L67) field is wrapped in a `Lock` but it does not seem to be mutated anywhere. Less mutable state is always better. To solve this task, remove the `Lock` and make things compile again.\r\n\r\ncc @rust-lang/wg-compiler-performance ","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50501","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50501/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50501/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50501/events","html_url":"https://github.com/rust-lang/rust/issues/50501","id":320813684,"number":50501,"title":"[parallel-queries] DepGraph::previous_work_products could be made immutable to avoid shared mutable state","user":{"login":"michaelwoerister","id":1825894,"avatar_url":"https://avatars2.githubusercontent.com/u/1825894?v=4","gravatar_id":"","url":"https://api.github.com/users/michaelwoerister","html_url":"https://github.com/michaelwoerister","followers_url":"https://api.github.com/users/michaelwoerister/followers","following_url":"https://api.github.com/users/michaelwoerister/following{/other_user}","gists_url":"https://api.github.com/users/michaelwoerister/gists{/gist_id}","starred_url":"https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michaelwoerister/subscriptions","organizations_url":"https://api.github.com/users/michaelwoerister/orgs","repos_url":"https://api.github.com/users/michaelwoerister/repos","events_url":"https://api.github.com/users/michaelwoerister/events{/privacy}","received_events_url":"https://api.github.com/users/michaelwoerister/received_events","type":"User","site_admin":false},"labels":[{"id":891133401,"url":"https://api.github.com/repos/rust-lang/rust/labels/A-parallel-queries","name":"A-parallel-queries","color":"d7e102","default":false},{"id":234902,"url":"https://api.github.com/repos/rust-lang/rust/labels/C-enhancement","name":"C-enhancement","color":"f5f1fd","default":false},{"id":67766349,"url":"https://api.github.com/repos/rust-lang/rust/labels/E-mentor","name":"E-mentor","color":"02E10C","default":false},{"id":849077850,"url":"https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance","name":"WG-compiler-performance","color":"c2e0c6","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-05-07T13:53:52Z","updated_at":"2018-05-11T02:03:43Z","closed_at":"2018-05-11T02:03:43Z","author_association":"CONTRIBUTOR","body":"[DepGraph::previous_work_products](https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src/librustc/dep_graph/graph.rs#L76-L80) is a field in the dep-graph that contains the list of object files cached during the previous compilation session. In theory, this information is available already at the time when we load the previous dep-graph and thus the field could be made immutable (i.e. not use an `RwLock`) and be initialized at `DepGraph` construction time.\r\n\r\nRefactoring this would need the following steps:\r\n- [Load the previous work products data](https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src/librustc_incremental/persist/load.rs#L43-L78) already in [load_dep_graph()](https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src/librustc_incremental/persist/load.rs#L151) instead of in [dep_graph_tcx_init()](https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src/librustc_incremental/persist/load.rs#L28)\r\n- Pass previous work products data as parameter to [DepGraph::new()](https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src/librustc/dep_graph/graph.rs#L93)\r\n- Remove the `RwLock` around the [DepGraph::previous_work_products](https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src/librustc/dep_graph/graph.rs#L76-L80) field.\r\n\r\ncc @rust-lang/wg-compiler-performance ","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50496","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50496/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50496/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50496/events","html_url":"https://github.com/rust-lang/rust/issues/50496","id":320746394,"number":50496,"title":"Severe regression in html5ever build time","user":{"login":"michaelwoerister","id":1825894,"avatar_url":"https://avatars2.githubusercontent.com/u/1825894?v=4","gravatar_id":"","url":"https://api.github.com/users/michaelwoerister","html_url":"https://github.com/michaelwoerister","followers_url":"https://api.github.com/users/michaelwoerister/followers","following_url":"https://api.github.com/users/michaelwoerister/following{/other_user}","gists_url":"https://api.github.com/users/michaelwoerister/gists{/gist_id}","starred_url":"https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michaelwoerister/subscriptions","organizations_url":"https://api.github.com/users/michaelwoerister/orgs","repos_url":"https://api.github.com/users/michaelwoerister/repos","events_url":"https://api.github.com/users/michaelwoerister/events{/privacy}","received_events_url":"https://api.github.com/users/michaelwoerister/received_events","type":"User","site_admin":false},"labels":[{"id":64037154,"url":"https://api.github.com/repos/rust-lang/rust/labels/I-compiletime","name":"I-compiletime","color":"e11d21","default":false},{"id":123110,"url":"https://api.github.com/repos/rust-lang/rust/labels/O-linux","name":"O-linux","color":"6e6ec0","default":false},{"id":203429200,"url":"https://api.github.com/repos/rust-lang/rust/labels/P-high","name":"P-high","color":"eb6420","default":false},{"id":211668100,"url":"https://api.github.com/repos/rust-lang/rust/labels/T-compiler","name":"T-compiler","color":"bfd4f2","default":false},{"id":849077850,"url":"https://api.github.com/repos/rust-lang/rust/labels/WG-compiler-performance","name":"WG-compiler-performance","color":"c2e0c6","default":false},{"id":262252628,"url":"https://api.github.com/repos/rust-lang/rust/labels/regression-from-stable-to-beta","name":"regression-from-stable-to-beta","color":"e4008a","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rust-lang/rust/milestones/50","html_url":"https://github.com/rust-lang/rust/milestone/50","labels_url":"https://api.github.com/repos/rust-lang/rust/milestones/50/labels","id":3245333,"number":50,"title":"1.27","description":"","creator":{"login":"alexcrichton","id":64996,"avatar_url":"https://avatars1.githubusercontent.com/u/64996?v=4","gravatar_id":"","url":"https://api.github.com/users/alexcrichton","html_url":"https://github.com/alexcrichton","followers_url":"https://api.github.com/users/alexcrichton/followers","following_url":"https://api.github.com/users/alexcrichton/following{/other_user}","gists_url":"https://api.github.com/users/alexcrichton/gists{/gist_id}","starred_url":"https://api.github.com/users/alexcrichton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexcrichton/subscriptions","organizations_url":"https://api.github.com/users/alexcrichton/orgs","repos_url":"https://api.github.com/users/alexcrichton/repos","events_url":"https://api.github.com/users/alexcrichton/events{/privacy}","received_events_url":"https://api.github.com/users/alexcrichton/received_events","type":"User","site_admin":false},"open_issues":3,"closed_issues":9,"state":"open","created_at":"2018-04-05T13:55:36Z","updated_at":"2018-05-13T11:32:40Z","due_on":"2018-06-21T07:00:00Z","closed_at":null},"comments":24,"created_at":"2018-05-07T10:02:22Z","updated_at":"2018-05-11T02:03:49Z","closed_at":"2018-05-11T02:03:49Z","author_association":"CONTRIBUTOR","body":"The build time of html5ever has gone up by more than 70% for debug builds recently:\r\nhttp://perf.rust-lang.org/compare.html?start=4745092d608e65ec869c0ebdb27c535f27606ea4&end=6a87289fa4f49b6bdd62f33f69a580026223421f&stat=instructions:u\r\n\r\nThere are quite a few candidates for introducing this regression in the changeset:\r\nhttps://github.com/rust-lang/rust/compare/4745092d608e65ec869c0ebdb27c535f27606ea4...6a87289fa4f49b6bdd62f33f69a580026223421f\r\n\r\nWould anybody from @rust-lang/wg-compiler-performance or @rust-lang/infra care to bisect further?\r\n","score":1.0},{"url":"https://api.github.com/repos/rust-lang/rust/issues/50495","repository_url":"https://api.github.com/repos/rust-lang/rust","labels_url":"https://api.github.com/repos/rust-lang/rust/issues/50495/labels{/name}","comments_url":"https://api.github.com/repos/rust-lang/rust/issues/50495/comments","events_url":"https://api.github.com/repos/rust-lang/rust/issues/50495/events","html_url":"https://github.com/rust-lang/rust/issues/50495","id":320720372,"number":50495,"title":"Miri crashes on fat ptr to thin ptr conversion","user":{"login":"bjorn3","id":17426603,"avatar_url":"https://avatars1.githubusercontent.com/u/17426603?v=4","gravatar_id":"","url":"https://api.github.com/users/bjorn3","html_url":"https://github.com/bjorn3","followers_url":"https://api.github.com/users/bjorn3/followers","following_url":"https://api.github.com/users/bjorn3/following{/other_user}","gists_url":"https://api.github.com/users/bjorn3/gists{/gist_id}","starred_url":"https://api.github.com/users/bjorn3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bjorn3/subscriptions","organizations_url":"https://api.github.com/users/bjorn3/orgs","repos_url":"https://api.github.com/users/bjorn3/repos","events_url":"https://api.github.com/users/bjorn3/events{/privacy}","received_events_url":"https://api.github.com/users/bjorn3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-07T08:36:36Z","updated_at":"2018-05-08T20:36:18Z","closed_at":"2018-05-08T20:36:18Z","author_association":"CONTRIBUTOR","body":"At https://github.com/rust-lang/rust/blob/428ea5f6b9e7c6e5ee3294fe9f105e77e89ab407/src/librustc_mir/interpret/eval_context.rs#L671\r\n\r\nThis is used by is_null() https://github.com/rust-lang/rust/blob/428ea5f6b9e7c6e5ee3294fe9f105e77e89ab407/src/libcore/ptr.rs#L527-L531\r\n\r\nBacktrace:\r\n\r\n```\r\nerror: internal compiler error: librustc_mir/interpret/eval_context.rs:671: expected fat ptr\r\n\r\nthread 'main' panicked at 'Box<Any>', librustc_errors/lib.rs:554:9\r\nstack backtrace:\r\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\r\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\r\n   1: std::sys_common::backtrace::print\r\n             at libstd/sys_common/backtrace.rs:71\r\n             at libstd/sys_common/backtrace.rs:59\r\n   2: std::panicking::default_hook::{{closure}}\r\n             at libstd/panicking.rs:211\r\n   3: std::panicking::default_hook\r\n             at libstd/panicking.rs:227\r\n   4: rustc::util::common::panic_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n             at libstd/panicking.rs:467\r\n   6: std::panicking::begin_panic\r\n   7: rustc_errors::Handler::bug\r\n   8: rustc::session::opt_span_bug_fmt::{{closure}}\r\n   9: rustc::ty::context::tls::with_opt::{{closure}}\r\n  10: rustc::ty::context::tls::with_context_opt\r\n  11: rustc::ty::context::tls::with_opt\r\n  12: rustc::session::opt_span_bug_fmt\r\n  13: rustc::session::bug_fmt\r\n  14: <rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::eval_rvalue_into_place\r\n             at /home/bjorn/Documenten/miri/<bug macros>:4\r\n  15: rustc_mir::interpret::step::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::statement\r\n             at /checkout/src/librustc_mir/interpret/step.rs:59\r\n  16: rustc_mir::interpret::step::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::step\r\n             at /checkout/src/librustc_mir/interpret/step.rs:35\r\n  17: priroda::step::step\r\n             at src/step.rs:82\r\n  18: priroda::step::step_routes::single::{{closure}}\r\n             at src/step.rs:214\r\n  19: <F as alloc::boxed::FnBox<A>>::call_box\r\n             at /checkout/src/liballoc/boxed.rs:638\r\n  20: priroda::act\r\n             at src/main.rs:213\r\n  21: <priroda::MiriCompilerCalls as rustc_driver::CompilerCalls<'a>>::build_controller::{{closure}}\r\n             at src/main.rs:101\r\n  22: rustc::ty::context::tls::with_context\r\n  23: rustc_driver::driver::compile_input::{{closure}}\r\n  24: rustc::ty::context::tls::enter_context\r\n  25: <std::thread::local::LocalKey<T>>::with\r\n  26: rustc::ty::context::TyCtxt::create_and_enter\r\n  27: rustc_driver::driver::compile_input\r\n  28: rustc_driver::run_compiler_impl\r\n  29: <scoped_tls::ScopedKey<T>>::set\r\n  30: syntax::with_globals\r\n  31: rustc_driver::run_compiler\r\n  32: priroda::main\r\n             at src/main.rs:249\r\n  33: std::rt::lang_start::{{closure}}\r\n             at /checkout/src/libstd/rt.rs:74\r\n  34: std::panicking::try::do_call\r\n             at libstd/rt.rs:59\r\n             at libstd/panicking.rs:310\r\n  35: __rust_maybe_catch_panic\r\n             at libpanic_unwind/lib.rs:105\r\n  36: std::rt::lang_start_internal\r\n             at libstd/panicking.rs:289\r\n             at libstd/panic.rs:374\r\n             at libstd/rt.rs:58\r\n  37: std::rt::lang_start\r\n             at /checkout/src/libstd/rt.rs:74\r\n  38: main\r\n  39: __libc_start_main\r\n  40: _start\r\nquery stack during panic:\r\nend of query stack\r\n```\r\n\r\ncc solson/miri#368","score":1.0}]}
0

