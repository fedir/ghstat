HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 14 Nov 2020 18:10:47 GMT
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
Vary: Accept, Authorization, Cookie, X-GitHub-OTP
Vary: Accept-Encoding, Accept, X-Requested-With
Vary: Accept-Encoding
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: D2BE:072E:3B80F18:449F99B:5FB01DA6
X-Oauth-Scopes: repo
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 6
X-Ratelimit-Reset: 1605377483
X-Ratelimit-Used: 24
X-Xss-Protection: 1; mode=block

6993
{"total_count":9,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/fukamachi/dexador/issues/73","repository_url":"https://api.github.com/repos/fukamachi/dexador","labels_url":"https://api.github.com/repos/fukamachi/dexador/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/dexador/issues/73/comments","events_url":"https://api.github.com/repos/fukamachi/dexador/issues/73/events","html_url":"https://github.com/fukamachi/dexador/issues/73","id":495051359,"node_id":"MDU6SXNzdWU0OTUwNTEzNTk=","number":73,"title":"new version broke dexador on ubuntu 18.04","user":{"login":"jnc-nj","id":25879733,"node_id":"MDQ6VXNlcjI1ODc5NzMz","avatar_url":"https://avatars3.githubusercontent.com/u/25879733?v=4","gravatar_id":"","url":"https://api.github.com/users/jnc-nj","html_url":"https://github.com/jnc-nj","followers_url":"https://api.github.com/users/jnc-nj/followers","following_url":"https://api.github.com/users/jnc-nj/following{/other_user}","gists_url":"https://api.github.com/users/jnc-nj/gists{/gist_id}","starred_url":"https://api.github.com/users/jnc-nj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnc-nj/subscriptions","organizations_url":"https://api.github.com/users/jnc-nj/orgs","repos_url":"https://api.github.com/users/jnc-nj/repos","events_url":"https://api.github.com/users/jnc-nj/events{/privacy}","received_events_url":"https://api.github.com/users/jnc-nj/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-09-18T07:52:19Z","updated_at":"2019-09-20T11:26:07Z","closed_at":"2019-09-20T11:26:07Z","author_association":"NONE","active_lock_reason":null,"body":"# Service\r\n```\r\n(defhandler (app \"/\" :method :get)\r\n    \"quack quack i'm a server.\")\r\n```\r\n\r\n# Curl\r\n```\r\ncurl 127.0.0.1:9001\r\n--> \r\n{\"message\": \"quack quack i'm a server.\"}\r\n```\r\n\r\n# Drakma\r\n```\r\n(drakma:http-request \"http://127.0.0.1:9001/\" :method :get)\r\n-->\r\n#(123 34 109 101 115 115 97 103 101 34 58 32 34 113 117 97 99 107 32 113 117 97\r\n  99 107 32 105 39 109 32 97 32 115 101 114 118 101 114 46 34 125)\r\n200\r\n((:DATE . \"Wed, 18 Sep 2019 08:01:14 GMT\") (:CONTENT-TYPE . \"application/json\")\r\n (:TRANSFER-ENCODING . \"chunked\"))\r\n#<PURI:URI http://127.0.0.1:9001/>\r\n#<FLEXI-STREAMS:FLEXI-IO-STREAM {100679D4C3}>\r\nT\r\n\"OK\"\r\n```\r\n\r\n# Dexador\r\n```\r\n(dex:get \"http://127.0.0.1:9001/\")\r\n--> \r\nAn HTTP request to \"http://127.0.0.1:9001/\" returned 400 bad request.\r\n\r\n#(66 97 100 32 82 101 113 117 101 115 116)\r\n   [Condition of type DEXADOR.ERROR:HTTP-REQUEST-BAD-REQUEST]\r\n\r\nRestarts:\r\n 0: [RETRY-REQUEST] Retry the same request.\r\n 1: [IGNORE-AND-CONTINUE] Ignore the error and continue.\r\n 2: [RETRY] Retry SLIME REPL evaluation request.\r\n 3: [*ABORT] Return to SLIME's top level.\r\n 4: [ABORT] abort thread (#<THREAD \"repl-thread\" RUNNING {1004831BC3}>)\r\n\r\nBacktrace:\r\n  0: (DEXADOR.ERROR:HTTP-REQUEST-FAILED 400 :BODY #(66 97 100 32 82 101 ...) :HEADERS #<HASH-TABLE :TEST EQUAL :COUNT 3 {1007CA4563}> :URI #<QURI.URI.HTTP:URI-HTTP http://127.0.0.1:9001/> :METHOD :GET)\r\n  1: (DEXADOR.BACKEND.USOCKET:REQUEST #<unavailable argument> :METHOD :GET)\r\n  2: (SB-INT:SIMPLE-EVAL-IN-LEXENV (DEXADOR:GET \"http://127.0.0.1:9001/\") #<NULL-LEXENV>)\r\n  3: (EVAL (DEXADOR:GET \"http://127.0.0.1:9001/\"))\r\n  4: (SWANK::EVAL-REGION \"(dex:get \\\"http://127.0.0.1:9001/\\\") ..)\r\n  5: ((LAMBDA NIL :IN SWANK-REPL::REPL-EVAL))\r\n  6: (SWANK-REPL::TRACK-PACKAGE #<CLOSURE (LAMBDA NIL :IN SWANK-REPL::REPL-EVAL) {1007CA264B}>)\r\n  7: (SWANK::CALL-WITH-RETRY-RESTART \"Retry SLIME REPL evaluation request.\" #<CLOSURE (LAMBDA NIL :IN SWANK-REPL::REPL-EVAL) {1007CA25EB}>)\r\n  8: (SWANK::CALL-WITH-BUFFER-SYNTAX NIL #<CLOSURE (LAMBDA NIL :IN SWANK-REPL::REPL-EVAL) {1007CA25CB}>)\r\n  9: (SWANK-REPL::REPL-EVAL \"(dex:get \\\"http://127.0.0.1:9001/\\\") ..)\r\n 10: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SWANK-REPL:LISTENER-EVAL \"(dex:get \\\"http://127.0.0.1:9001/\\\") ..)\r\n 11: (EVAL (SWANK-REPL:LISTENER-EVAL \"(dex:get \\\"http://127.0.0.1:9001/\\\") ..)\r\n 12: (SWANK:EVAL-FOR-EMACS (SWANK-REPL:LISTENER-EVAL \"(dex:get \\\"http://127.0.0.1:9001/\\\") ..)\r\n 13: (SWANK::PROCESS-REQUESTS NIL)\r\n 14: ((LAMBDA NIL :IN SWANK::HANDLE-REQUESTS))\r\n 15: ((LAMBDA NIL :IN SWANK::HANDLE-REQUESTS))\r\n 16: (SWANK/SBCL::CALL-WITH-BREAK-HOOK #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK> #<CLOSURE (LAMBDA NIL :IN SWANK::HANDLE-REQUESTS) {10048400FB}>)\r\n 17: ((FLET SWANK/BACKEND:CALL-WITH-DEBUGGER-HOOK :IN \"/home/jacknchou/.roswell/lisp/slime/2019.08.13/swank/sbcl.lisp\") #<FUNCTION SWANK:SWANK-DEBUGGER-HOOK> #<CLOSURE (LAMBDA NIL :IN SWANK::HANDLE-REQUEST..\r\n 18: (SWANK::CALL-WITH-BINDINGS ((*STANDARD-INPUT* . #<SWANK/GRAY::SLIME-INPUT-STREAM {10047104D3}>)) #<CLOSURE (LAMBDA NIL :IN SWANK::HANDLE-REQUESTS) {100484011B}>)\r\n 19: (SWANK::HANDLE-REQUESTS #<SWANK::MULTITHREADED-CONNECTION {1003D5C763}> NIL)\r\n 20: ((FLET SB-UNIX::BODY :IN SB-THREAD::NEW-LISP-THREAD-TRAMPOLINE))\r\n 21: ((FLET \"WITHOUT-INTERRUPTS-BODY-4\" :IN SB-THREAD::NEW-LISP-THREAD-TRAMPOLINE))\r\n 22: ((FLET SB-THREAD::WITH-MUTEX-THUNK :IN SB-THREAD::NEW-LISP-THREAD-TRAMPOLINE))\r\n 23: ((FLET \"WITHOUT-INTERRUPTS-BODY-1\" :IN SB-THREAD::CALL-WITH-MUTEX))\r\n 24: (SB-THREAD::CALL-WITH-MUTEX #<CLOSURE (FLET SB-THREAD::WITH-MUTEX-THUNK :IN SB-THREAD::NEW-LISP-THREAD-TRAMPOLINE) {7FA848B96D7B}> #<SB-THREAD:MUTEX \"thread result lock\" owner: #<SB-THREAD:THREAD \"rep..\r\n 25: (SB-THREAD::NEW-LISP-THREAD-TRAMPOLINE #<SB-THREAD:THREAD \"repl-thread\" RUNNING {1004831BC3}> NIL #<CLOSURE (LAMBDA NIL :IN SWANK-REPL::SPAWN-REPL-THREAD) {1004831B6B}> NIL)\r\n 26: (\"foreign function: call_into_lisp\")\r\n 27: (\"foreign function: new_thread_trampoline\")\r\n```","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/fukamachi/lack/issues/39","repository_url":"https://api.github.com/repos/fukamachi/lack","labels_url":"https://api.github.com/repos/fukamachi/lack/issues/39/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/lack/issues/39/comments","events_url":"https://api.github.com/repos/fukamachi/lack/issues/39/events","html_url":"https://github.com/fukamachi/lack/issues/39","id":486682233,"node_id":"MDU6SXNzdWU0ODY2ODIyMzM=","number":39,"title":"null content-type breaks request handling","user":{"login":"fiddlerwoaroof","id":808745,"node_id":"MDQ6VXNlcjgwODc0NQ==","avatar_url":"https://avatars2.githubusercontent.com/u/808745?v=4","gravatar_id":"","url":"https://api.github.com/users/fiddlerwoaroof","html_url":"https://github.com/fiddlerwoaroof","followers_url":"https://api.github.com/users/fiddlerwoaroof/followers","following_url":"https://api.github.com/users/fiddlerwoaroof/following{/other_user}","gists_url":"https://api.github.com/users/fiddlerwoaroof/gists{/gist_id}","starred_url":"https://api.github.com/users/fiddlerwoaroof/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fiddlerwoaroof/subscriptions","organizations_url":"https://api.github.com/users/fiddlerwoaroof/orgs","repos_url":"https://api.github.com/users/fiddlerwoaroof/repos","events_url":"https://api.github.com/users/fiddlerwoaroof/events{/privacy}","received_events_url":"https://api.github.com/users/fiddlerwoaroof/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-08-29T01:10:28Z","updated_at":"2019-09-18T10:25:44Z","closed_at":"2019-08-29T07:21:46Z","author_association":"NONE","active_lock_reason":null,"body":"If the Content-Type header isn't passed, this code passes a content-type of NIL to HTTP-BODY:PARSE, preventing the request from being processed properly.\r\n\r\nhttps://github.com/fukamachi/lack/blob/8ddb6530070ac261560098c0a1841b787eee19ca/src/request.lisp#L105-L108\r\n\r\nThis could be fixed either by adding a null check or defaulting content-type to `text/plain` when it's not passed.","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/fukamachi/ningle/issues/20","repository_url":"https://api.github.com/repos/fukamachi/ningle","labels_url":"https://api.github.com/repos/fukamachi/ningle/issues/20/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/ningle/issues/20/comments","events_url":"https://api.github.com/repos/fukamachi/ningle/issues/20/events","html_url":"https://github.com/fukamachi/ningle/issues/20","id":197785239,"node_id":"MDU6SXNzdWUxOTc3ODUyMzk=","number":20,"title":"Serving arbitrary binary data","user":{"login":"thiru","id":65822,"node_id":"MDQ6VXNlcjY1ODIy","avatar_url":"https://avatars0.githubusercontent.com/u/65822?v=4","gravatar_id":"","url":"https://api.github.com/users/thiru","html_url":"https://github.com/thiru","followers_url":"https://api.github.com/users/thiru/followers","following_url":"https://api.github.com/users/thiru/following{/other_user}","gists_url":"https://api.github.com/users/thiru/gists{/gist_id}","starred_url":"https://api.github.com/users/thiru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thiru/subscriptions","organizations_url":"https://api.github.com/users/thiru/orgs","repos_url":"https://api.github.com/users/thiru/repos","events_url":"https://api.github.com/users/thiru/events{/privacy}","received_events_url":"https://api.github.com/users/thiru/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2016-12-28T02:23:10Z","updated_at":"2016-12-28T23:13:41Z","closed_at":"2016-12-28T21:41:16Z","author_association":"NONE","active_lock_reason":null,"body":"Hi there, great work on this project!\r\n\r\nWhat would be the best way to serve an arbitrary (binary) file that is outside the static files root directory?  E.g. say the request is \"localhost/download/path/to/file.pdf\".","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/fukamachi/ningle/issues/16","repository_url":"https://api.github.com/repos/fukamachi/ningle","labels_url":"https://api.github.com/repos/fukamachi/ningle/issues/16/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/ningle/issues/16/comments","events_url":"https://api.github.com/repos/fukamachi/ningle/issues/16/events","html_url":"https://github.com/fukamachi/ningle/issues/16","id":177700130,"node_id":"MDU6SXNzdWUxNzc3MDAxMzA=","number":16,"title":"Readme is confusing with \"authorize\"","user":{"login":"sabracrolleton","id":5070125,"node_id":"MDQ6VXNlcjUwNzAxMjU=","avatar_url":"https://avatars3.githubusercontent.com/u/5070125?v=4","gravatar_id":"","url":"https://api.github.com/users/sabracrolleton","html_url":"https://github.com/sabracrolleton","followers_url":"https://api.github.com/users/sabracrolleton/followers","following_url":"https://api.github.com/users/sabracrolleton/following{/other_user}","gists_url":"https://api.github.com/users/sabracrolleton/gists{/gist_id}","starred_url":"https://api.github.com/users/sabracrolleton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sabracrolleton/subscriptions","organizations_url":"https://api.github.com/users/sabracrolleton/orgs","repos_url":"https://api.github.com/users/sabracrolleton/repos","events_url":"https://api.github.com/users/sabracrolleton/events{/privacy}","received_events_url":"https://api.github.com/users/sabracrolleton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2016-09-19T03:53:09Z","updated_at":"2016-09-20T01:50:43Z","closed_at":"2016-09-19T07:27:02Z","author_association":"NONE","active_lock_reason":null,"body":"The Readme leaves me confused with the login method in the usage section. Where does \"authorize\" come from?\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/fukamachi/fast-http/issues/1","repository_url":"https://api.github.com/repos/fukamachi/fast-http","labels_url":"https://api.github.com/repos/fukamachi/fast-http/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/fast-http/issues/1/comments","events_url":"https://api.github.com/repos/fukamachi/fast-http/issues/1/events","html_url":"https://github.com/fukamachi/fast-http/issues/1","id":45640200,"node_id":"MDU6SXNzdWU0NTY0MDIwMA==","number":1,"title":"Do not use keywords for headers","user":{"login":"deadtrickster","id":172311,"node_id":"MDQ6VXNlcjE3MjMxMQ==","avatar_url":"https://avatars1.githubusercontent.com/u/172311?v=4","gravatar_id":"","url":"https://api.github.com/users/deadtrickster","html_url":"https://github.com/deadtrickster","followers_url":"https://api.github.com/users/deadtrickster/followers","following_url":"https://api.github.com/users/deadtrickster/following{/other_user}","gists_url":"https://api.github.com/users/deadtrickster/gists{/gist_id}","starred_url":"https://api.github.com/users/deadtrickster/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/deadtrickster/subscriptions","organizations_url":"https://api.github.com/users/deadtrickster/orgs","repos_url":"https://api.github.com/users/deadtrickster/repos","events_url":"https://api.github.com/users/deadtrickster/events{/privacy}","received_events_url":"https://api.github.com/users/deadtrickster/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2014-10-13T13:10:11Z","updated_at":"2017-01-06T16:49:48Z","closed_at":"2014-10-17T17:30:49Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"While issue not SBCL specific this code is:\n\n``` lisp\n(ql:quickload :fast-http)\n(ql:quickload :cl-interpol)\n(ql:quickload :trivial-utf-8)\n(cl-interpol:enable-interpol-syntax)\n\n(defun random-garbage (length)\n           (let ((chars \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")\n                 (garbage (make-string length)))\n             (dotimes (i length)\n               (setf (aref garbage i) (aref chars (random (length chars)))))\n             garbage))\n\n(defun test-memory-leak (iterations)\n           (loop for i from 0 to iterations do\n             (let* ((request (list #?\"POST / HTTP/1.1\\r\\n\"\n                              #?\"Host: www.example.com\\r\\n\"\n                              #?\"Content-Type${(random-garbage 1000)}: application/x-www-form-urlencoded\\r\\n\"\n                              #?\"Content-Length: 4\\r\\n\"\n                              #?\"Connection: close\\r\\n\"\n                              #?\"\\r\\n\"\n                              #?\"q=42\\r\\n\"))\n                    (http (fast-http:make-http-request :store-body t ))\n                    (parser (fast-http:make-parser http :store-body t :header-callback (lambda (h) (declare (ignore h)) ))))\n               (loop for req-chunk in request do              \n                 (funcall parser (trivial-utf-8:string-to-utf-8-bytes req-chunk))))))\n\n(define-alien-routine print-generation-stats void)\n(sb-ext:gc :full t)\n(print-generation-stats)\n\n;; MAGIC\n(test-memory-leak 200000) ;; maybe you should adapt this constant to your memory settings\n```\n\nOutput\n\n```\n Load 1 ASDF system:\n    fast-http\n; Loading \"fast-http\"\n..\n(:FAST-HTTP)\n* To load \"cl-interpol\":\n  Load 1 ASDF system:\n    cl-interpol\n; Loading \"cl-interpol\"\n...\n#<ASDF/SYSTEM:SYSTEM \"cl-interpol\"> \n(:CL-INTERPOL)\n* To load \"trivial-utf-8\":\n  Load 1 ASDF system:\n    trivial-utf-8\n; Loading \"trivial-utf-8\"\n\n(:TRIVIAL-UTF-8)\n* \n* \nRANDOM-GARBAGE\n* \nTEST-MEMORY-LEAK\n* \nPRINT-GENERATION-STATS\n* \nNIL\n*  Gen StaPg UbSta LaSta LUbSt Boxed Unboxed LB   LUB  !move  Alloc  Waste   Trig    WP  GCs Mem-age\n   0:     0     0     0     0     1     0     0     0     0        0 32768 10737418    0   0  0.0000\n   1:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   2:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   3:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   4:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   5:     0     0     0     0   636   357    68   128     6 37547216 1413936 48284634  698   1  0.0000\n   6:     0     0     0     0  1702   155     0     0     0 60850176     0  2000000 1608   0  0.0000\n   Total bytes allocated    = 98397392\n   Dynamic-space-size bytes = 1073741824\n\nNIL\n*\nHeap exhausted during garbage collection: 128 bytes available, 480 requested.\n Gen StaPg UbSta LaSta LUbSt Boxed Unboxed LB   LUB  !move  Alloc  Waste   Trig    WP  GCs Mem-age\n   0:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   1:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   2:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   3: 15219 23801     0     0  1350 13413   348    44     0 494612320 1986720 10737418    0   0  0.9943\n   4:     0     0     0     0     0     0     0     0     0        0     0 10737418    0   0  0.0000\n   5:     0     0     0     0   636   357    68   128     6 37547216 1413936 48284634  694   1  0.0000\n   6:     0     0     0     0  1702   155     0     0     0 60850176     0  2000000 1613   0  0.0000\n   Total bytes allocated    = 1068602064\n   Dynamic-space-size bytes = 1073741824\nGC control variables:\n   *GC-INHIBIT* = true\n   *GC-PENDING* = true\n   *STOP-FOR-GC-PENDING* = false\nfatal error encountered in SBCL pid 57429(tid 140737353971520):\nHeap exhausted, game over.\n\nWelcome to LDB, a low-level debugger for the Lisp runtime environment.\nldb>\n```\n\nPS. funny thing - chunga and its friends do the same mistake.\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/fukamachi/ningle/issues/9","repository_url":"https://api.github.com/repos/fukamachi/ningle","labels_url":"https://api.github.com/repos/fukamachi/ningle/issues/9/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/ningle/issues/9/comments","events_url":"https://api.github.com/repos/fukamachi/ningle/issues/9/events","html_url":"https://github.com/fukamachi/ningle/issues/9","id":87367838,"node_id":"MDU6SXNzdWU4NzM2NzgzOA==","number":9,"title":"session key seems to be invalid.","user":{"login":"Rudolph-Miller","id":6536064,"node_id":"MDQ6VXNlcjY1MzYwNjQ=","avatar_url":"https://avatars3.githubusercontent.com/u/6536064?v=4","gravatar_id":"","url":"https://api.github.com/users/Rudolph-Miller","html_url":"https://github.com/Rudolph-Miller","followers_url":"https://api.github.com/users/Rudolph-Miller/followers","following_url":"https://api.github.com/users/Rudolph-Miller/following{/other_user}","gists_url":"https://api.github.com/users/Rudolph-Miller/gists{/gist_id}","starred_url":"https://api.github.com/users/Rudolph-Miller/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rudolph-Miller/subscriptions","organizations_url":"https://api.github.com/users/Rudolph-Miller/orgs","repos_url":"https://api.github.com/users/Rudolph-Miller/repos","events_url":"https://api.github.com/users/Rudolph-Miller/events{/privacy}","received_events_url":"https://api.github.com/users/Rudolph-Miller/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-06-11T14:34:36Z","updated_at":"2015-06-11T15:50:43Z","closed_at":"2015-06-11T15:50:43Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"https://github.com/fukamachi/ningle/blob/master/src/context.lisp#L34\nIn this line, `make-context` creates `(context :session)` from `(getf env :clack.session)`, but lack stores session to `(getf env :lack.session)`.\nhttps://github.com/fukamachi/lack/blob/master/src/middleware/session.lisp#L38\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/fukamachi/caveman/issues/65","repository_url":"https://api.github.com/repos/fukamachi/caveman","labels_url":"https://api.github.com/repos/fukamachi/caveman/issues/65/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/caveman/issues/65/comments","events_url":"https://api.github.com/repos/fukamachi/caveman/issues/65/events","html_url":"https://github.com/fukamachi/caveman/issues/65","id":94370237,"node_id":"MDU6SXNzdWU5NDM3MDIzNw==","number":65,"title":"What's the right way to use lack.middleware.session.store?","user":{"login":"jackcarrozzo","id":1139482,"node_id":"MDQ6VXNlcjExMzk0ODI=","avatar_url":"https://avatars1.githubusercontent.com/u/1139482?v=4","gravatar_id":"","url":"https://api.github.com/users/jackcarrozzo","html_url":"https://github.com/jackcarrozzo","followers_url":"https://api.github.com/users/jackcarrozzo/followers","following_url":"https://api.github.com/users/jackcarrozzo/following{/other_user}","gists_url":"https://api.github.com/users/jackcarrozzo/gists{/gist_id}","starred_url":"https://api.github.com/users/jackcarrozzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jackcarrozzo/subscriptions","organizations_url":"https://api.github.com/users/jackcarrozzo/orgs","repos_url":"https://api.github.com/users/jackcarrozzo/repos","events_url":"https://api.github.com/users/jackcarrozzo/events{/privacy}","received_events_url":"https://api.github.com/users/jackcarrozzo/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2015-07-10T18:59:42Z","updated_at":"2015-07-11T00:18:26Z","closed_at":"2015-07-11T00:18:26Z","author_association":"NONE","active_lock_reason":null,"body":"What's the right way to interact with sessions in v2? My code is doing things like this, originally written before lack:\n\n`(gethash :userid *session*)`\n\nHowever, `*session*` is now nil after updating caveman and deps. I poked around a while in `lack/src/middleware/session/`, but its not immediately clear to me what is the intended use of the class and methods. Is there a way to access a particular session's hashtable directly?\n\nThanks!\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/fukamachi/caveman/issues/31","repository_url":"https://api.github.com/repos/fukamachi/caveman","labels_url":"https://api.github.com/repos/fukamachi/caveman/issues/31/labels{/name}","comments_url":"https://api.github.com/repos/fukamachi/caveman/issues/31/comments","events_url":"https://api.github.com/repos/fukamachi/caveman/issues/31/events","html_url":"https://github.com/fukamachi/caveman/issues/31","id":37207566,"node_id":"MDU6SXNzdWUzNzIwNzU2Ng==","number":31,"title":"Support for content type negotiation","user":{"login":"ralcantaraperez","id":1488282,"node_id":"MDQ6VXNlcjE0ODgyODI=","avatar_url":"https://avatars0.githubusercontent.com/u/1488282?v=4","gravatar_id":"","url":"https://api.github.com/users/ralcantaraperez","html_url":"https://github.com/ralcantaraperez","followers_url":"https://api.github.com/users/ralcantaraperez/followers","following_url":"https://api.github.com/users/ralcantaraperez/following{/other_user}","gists_url":"https://api.github.com/users/ralcantaraperez/gists{/gist_id}","starred_url":"https://api.github.com/users/ralcantaraperez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ralcantaraperez/subscriptions","organizations_url":"https://api.github.com/users/ralcantaraperez/orgs","repos_url":"https://api.github.com/users/ralcantaraperez/repos","events_url":"https://api.github.com/users/ralcantaraperez/events{/privacy}","received_events_url":"https://api.github.com/users/ralcantaraperez/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2014-07-05T22:32:52Z","updated_at":"2014-07-07T20:37:49Z","closed_at":"2014-07-07T09:39:32Z","author_association":"NONE","active_lock_reason":null,"body":"It should be useful to have a way to define **content type negotiation**. E.g.:\n\n``` common-lisp\n(defroute \"/\" :content-type \"text/html\" ()\n  (format nil \"<div>Hello world!</div>\"))\n\n(defroute \"/\" :content-type \"text/plain\" ()\n  (format nil \"Hello world!</div>\"))\n```\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/quicklisp/quicklisp-projects/issues/294","repository_url":"https://api.github.com/repos/quicklisp/quicklisp-projects","labels_url":"https://api.github.com/repos/quicklisp/quicklisp-projects/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/quicklisp/quicklisp-projects/issues/294/comments","events_url":"https://api.github.com/repos/quicklisp/quicklisp-projects/issues/294/events","html_url":"https://github.com/quicklisp/quicklisp-projects/issues/294","id":3942878,"node_id":"MDU6SXNzdWUzOTQyODc4","number":294,"title":"Please add \"ningle\"","user":{"login":"fukamachi","id":90570,"node_id":"MDQ6VXNlcjkwNTcw","avatar_url":"https://avatars2.githubusercontent.com/u/90570?v=4","gravatar_id":"","url":"https://api.github.com/users/fukamachi","html_url":"https://github.com/fukamachi","followers_url":"https://api.github.com/users/fukamachi/followers","following_url":"https://api.github.com/users/fukamachi/following{/other_user}","gists_url":"https://api.github.com/users/fukamachi/gists{/gist_id}","starred_url":"https://api.github.com/users/fukamachi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fukamachi/subscriptions","organizations_url":"https://api.github.com/users/fukamachi/orgs","repos_url":"https://api.github.com/users/fukamachi/repos","events_url":"https://api.github.com/users/fukamachi/events{/privacy}","received_events_url":"https://api.github.com/users/fukamachi/received_events","type":"User","site_admin":false},"labels":[{"id":52004,"node_id":"MDU6TGFiZWw1MjAwNA==","url":"https://api.github.com/repos/quicklisp/quicklisp-projects/labels/canbuild","name":"canbuild","color":"adffad","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2012-04-03T11:15:05Z","updated_at":"2012-04-10T15:41:24Z","closed_at":"2012-04-10T15:41:24Z","author_association":"NONE","active_lock_reason":null,"body":"\"ningle\" is a lightweight web application framework for Common Lisp.\n\nhttps://github.com/fukamachi/ningle\n","performed_via_github_app":null,"score":1.0}]}
0

