HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sun, 08 Apr 2018 22:36:53 GMT
Link: <https://api.github.com/search/issues?q=repo%3Atornadoweb%2Ftornado+type%3Aissue+state%3Aclosed&page=2>; rel="next", <https://api.github.com/search/issues?q=repo%3Atornadoweb%2Ftornado+type%3Aissue+state%3Aclosed&page=34>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CC72:54B9:144A19B:28CA4AE:5ACA9985
X-Oauth-Scopes: 
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 20
X-Ratelimit-Reset: 1523227064
X-Runtime-Rack: 0.313038
X-Xss-Protection: 1; mode=block

8000
{"total_count":1129,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2344","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2344/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2344/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2344/events","html_url":"https://github.com/tornadoweb/tornado/issues/2344","id":311230791,"number":2344,"title":"Different versions of Tornado come out different results when running thread in coroutine","user":{"login":"huashengdun","id":909962,"avatar_url":"https://avatars0.githubusercontent.com/u/909962?v=4","gravatar_id":"","url":"https://api.github.com/users/huashengdun","html_url":"https://github.com/huashengdun","followers_url":"https://api.github.com/users/huashengdun/followers","following_url":"https://api.github.com/users/huashengdun/following{/other_user}","gists_url":"https://api.github.com/users/huashengdun/gists{/gist_id}","starred_url":"https://api.github.com/users/huashengdun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/huashengdun/subscriptions","organizations_url":"https://api.github.com/users/huashengdun/orgs","repos_url":"https://api.github.com/users/huashengdun/repos","events_url":"https://api.github.com/users/huashengdun/events{/privacy}","received_events_url":"https://api.github.com/users/huashengdun/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-04-04T13:30:46Z","updated_at":"2018-04-06T16:59:20Z","closed_at":"2018-04-05T14:54:05Z","author_association":"NONE","body":"Here is the demo code.\r\n\r\n```python\r\nimport threading\r\nimport time\r\nfrom tornado.concurrent import Future\r\nfrom tornado import gen, ioloop\r\n\r\n\r\n@gen.coroutine\r\ndef foo(url):\r\n    future = Future()\r\n    threading.Thread(target=fetch_url_wrapped, args=(url, future)).start()\r\n    res = yield future\r\n    print(res)\r\n\r\n\r\ndef fetch_url(url):\r\n    time.sleep(1)\r\n    return 'hello world'\r\n\r\n\r\ndef fetch_url_wrapped(url, future):\r\n    print('fetching {}'.format(url))\r\n    result = fetch_url(url)\r\n    future.set_result(result)\r\n    print('set result {}'.format(result))\r\n\r\nloop = ioloop.IOLoop.current()\r\nloop.run_sync(lambda: foo('http://bar.com'))\r\n```\r\n\r\nBefore Tornado 5.0.0, it is ok.\r\nAfter version 5.0.0 (including 5.0.0), the program just blocks.","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2343","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2343/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2343/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2343/events","html_url":"https://github.com/tornadoweb/tornado/issues/2343","id":311119356,"number":2343,"title":"Exception in tornado iostream.","user":{"login":"cici-tan","id":13968333,"avatar_url":"https://avatars0.githubusercontent.com/u/13968333?v=4","gravatar_id":"","url":"https://api.github.com/users/cici-tan","html_url":"https://github.com/cici-tan","followers_url":"https://api.github.com/users/cici-tan/followers","following_url":"https://api.github.com/users/cici-tan/following{/other_user}","gists_url":"https://api.github.com/users/cici-tan/gists{/gist_id}","starred_url":"https://api.github.com/users/cici-tan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cici-tan/subscriptions","organizations_url":"https://api.github.com/users/cici-tan/orgs","repos_url":"https://api.github.com/users/cici-tan/repos","events_url":"https://api.github.com/users/cici-tan/events{/privacy}","received_events_url":"https://api.github.com/users/cici-tan/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-04T07:44:38Z","updated_at":"2018-04-06T18:04:44Z","closed_at":"2018-04-06T18:04:44Z","author_association":"NONE","body":"Anyone know why this happened?\r\n![exception2](https://user-images.githubusercontent.com/13968333/38294397-4f8dc686-381d-11e8-83c3-7af8e644245e.png)\r\n![excptions](https://user-images.githubusercontent.com/13968333/38294398-4fedcb80-381d-11e8-9076-85b655f6cbcd.png)\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2342","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2342/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2342/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2342/events","html_url":"https://github.com/tornadoweb/tornado/issues/2342","id":310706138,"number":2342,"title":"torando import error","user":{"login":"cuckoo-linux","id":32926301,"avatar_url":"https://avatars3.githubusercontent.com/u/32926301?v=4","gravatar_id":"","url":"https://api.github.com/users/cuckoo-linux","html_url":"https://github.com/cuckoo-linux","followers_url":"https://api.github.com/users/cuckoo-linux/followers","following_url":"https://api.github.com/users/cuckoo-linux/following{/other_user}","gists_url":"https://api.github.com/users/cuckoo-linux/gists{/gist_id}","starred_url":"https://api.github.com/users/cuckoo-linux/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cuckoo-linux/subscriptions","organizations_url":"https://api.github.com/users/cuckoo-linux/orgs","repos_url":"https://api.github.com/users/cuckoo-linux/repos","events_url":"https://api.github.com/users/cuckoo-linux/events{/privacy}","received_events_url":"https://api.github.com/users/cuckoo-linux/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-03T06:10:51Z","updated_at":"2018-04-04T01:45:49Z","closed_at":"2018-04-04T01:45:49Z","author_association":"NONE","body":"pip install -r ~/klara-github-repo/install/requirements.txt\r\nRequirement already satisfied: torndb in /usr/local/lib/python2.7/dist-packages (from -r /home/projects/klara-github-repo/install/requirements.txt (line 1))\r\nRequirement already satisfied: requests in /usr/local/lib/python2.7/dist-packages (from -r /home/projects/klara-github-repo/install/requirements.txt (line 2))\r\nCollecting tornado (from -r /home/projects/klara-github-repo/install/requirements.txt (line 3))\r\n/usr/local/lib/python2.7/dist-packages/pip/_vendor/urllib3/util/ssl_.py:339: SNIMissingWarning: An HTTPS request has been made, but the SNI (Subject Name Indication) extension to TLS is not available on this platform. This may cause the server to present an incorrect TLS certificate, which can cause validation failures. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\r\n  SNIMissingWarning\r\n/usr/local/lib/python2.7/dist-packages/pip/_vendor/urllib3/util/ssl_.py:137: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\r\n  InsecurePlatformWarning\r\n  **Could not find a version that satisfies the requirement tornado (from -r /home/projects/klara-github-repo/install/requirements.txt (line 3)) (from versions: )\r\nNo matching distribution found for tornado (from -r /home/projects/klara-github-repo/install/requirements.txt (line **3))**\r\n$ pip -V\r\npip 9.0.3 from /usr/local/lib/python2.7/dist-packages (python 2.7)\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2340","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2340/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2340/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2340/events","html_url":"https://github.com/tornadoweb/tornado/issues/2340","id":310486276,"number":2340,"title":"Leaking file descriptors in 5.0 after loop.close","user":{"login":"mrocklin","id":306380,"avatar_url":"https://avatars3.githubusercontent.com/u/306380?v=4","gravatar_id":"","url":"https://api.github.com/users/mrocklin","html_url":"https://github.com/mrocklin","followers_url":"https://api.github.com/users/mrocklin/followers","following_url":"https://api.github.com/users/mrocklin/following{/other_user}","gists_url":"https://api.github.com/users/mrocklin/gists{/gist_id}","starred_url":"https://api.github.com/users/mrocklin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrocklin/subscriptions","organizations_url":"https://api.github.com/users/mrocklin/orgs","repos_url":"https://api.github.com/users/mrocklin/repos","events_url":"https://api.github.com/users/mrocklin/events{/privacy}","received_events_url":"https://api.github.com/users/mrocklin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-04-02T13:35:02Z","updated_at":"2018-04-03T00:58:11Z","closed_at":"2018-04-03T00:58:11Z","author_association":"NONE","body":"The command `loop.close(all_fds=True)` seems to still leave some file descriptors open.  This appears to be new.\r\n\r\n### 4.5.3\r\n\r\n```python\r\nIn [1]: import psutil\r\nIn [2]: from tornado.ioloop import IOLoop\r\nIn [3]: psutil.Process().num_fds()\r\nOut[3]: 14\r\n\r\nIn [4]: loop = IOLoop()\r\nIn [5]: psutil.Process().num_fds()\r\nOut[5]: 16\r\n\r\nIn [6]: loop.close(all_fds=True)\r\nIn [7]: psutil.Process().num_fds()\r\nOut[7]: 14\r\n\r\nIn [8]: import tornado\r\nIn [9]: tornado.version\r\nOut[9]: '4.5.3'\r\n```\r\n\r\n### 5.0\r\n\r\n```python\r\nIn [1]: import psutil\r\nIn [2]: from tornado.ioloop import IOLoop\r\nIn [3]: psutil.Process().num_fds()\r\nOut[3]: 14\r\n\r\nIn [4]: loop = IOLoop()\r\nIn [5]: psutil.Process().num_fds()\r\nOut[5]: 20\r\n\r\nIn [6]: loop.close(all_fds=True)\r\nIn [7]: psutil.Process().num_fds()\r\nOut[7]: 17\r\n\r\nIn [8]: import tornado\r\nIn [9]: tornado.version\r\nOut[9]: '5.0'\r\n```\r\n\r\nI've also tried this on master and get the same result","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2337","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2337/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2337/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2337/events","html_url":"https://github.com/tornadoweb/tornado/issues/2337","id":310254263,"number":2337,"title":"creating basic server breaks in 5.0.1, but works in 4.5.2","user":{"login":"heppg","id":5240331,"avatar_url":"https://avatars3.githubusercontent.com/u/5240331?v=4","gravatar_id":"","url":"https://api.github.com/users/heppg","html_url":"https://github.com/heppg","followers_url":"https://api.github.com/users/heppg/followers","following_url":"https://api.github.com/users/heppg/following{/other_user}","gists_url":"https://api.github.com/users/heppg/gists{/gist_id}","starred_url":"https://api.github.com/users/heppg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/heppg/subscriptions","organizations_url":"https://api.github.com/users/heppg/orgs","repos_url":"https://api.github.com/users/heppg/repos","events_url":"https://api.github.com/users/heppg/events{/privacy}","received_events_url":"https://api.github.com/users/heppg/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-31T16:45:00Z","updated_at":"2018-03-31T17:10:50Z","closed_at":"2018-03-31T17:10:49Z","author_association":"NONE","body":"Create a server in a thread (code shortened for clarity):\r\n1547       self.app = self.make_app()\r\n1548       self.app.listen( 8080)\r\n1549       if debug:\r\n1550           print(\"ServerThread tornado ioloop started\")\r\n1551        tornado.ioloop.IOLoop.current().start()\r\n\r\nSystem is Python 3.5.3 (default, Jan 19 2017, 14:11:04)\r\n[GCC 6.3.0 20170124] on linux\r\n\r\n\r\nIn 5.0.1, I get an exception in app.listen:\r\nTraceback (most recent call last):\r\n  File \"/home/pi/scratchClient/src/server/scratchClientServer.py\", line 1548, in run\r\n    self.app.listen( 8080)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/web.py\", line 1986, in listen\r\n    server.listen(port, address)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/tcpserver.py\", line 145, in listen\r\n    self.add_sockets(sockets)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/tcpserver.py\", line 159, in add_sockets\r\n    sock, self._handle_connection)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/netutil.py\", line 219, in add_accept_handler\r\n    io_loop = IOLoop.current()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/ioloop.py\", line 283, in current\r\n    loop = asyncio.get_event_loop()\r\n  File \"/usr/lib/python3.5/asyncio/events.py\", line 671, in get_event_loop\r\n    return get_event_loop_policy().get_event_loop()\r\n  File \"/usr/lib/python3.5/asyncio/events.py\", line 583, in get_event_loop\r\n    % threading.current_thread().name)\r\nRuntimeError: There is no current event loop in thread 'GUIServerThread_0'.\r\n\r\nThe .IOLoop.current().start() is not executed.\r\n\r\nThe code runs with release 4.5.2. As a workaround, I changed the tornado version back to 4.5.2 in installation documentation.\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2334","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2334/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2334/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2334/events","html_url":"https://github.com/tornadoweb/tornado/issues/2334","id":310151194,"number":2334,"title":"on_finish() not being called when *server* finishes first; finish() called *twice*.  (c.f. #517)","user":{"login":"sam-falvo","id":1495032,"avatar_url":"https://avatars0.githubusercontent.com/u/1495032?v=4","gravatar_id":"","url":"https://api.github.com/users/sam-falvo","html_url":"https://github.com/sam-falvo","followers_url":"https://api.github.com/users/sam-falvo/followers","following_url":"https://api.github.com/users/sam-falvo/following{/other_user}","gists_url":"https://api.github.com/users/sam-falvo/gists{/gist_id}","starred_url":"https://api.github.com/users/sam-falvo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sam-falvo/subscriptions","organizations_url":"https://api.github.com/users/sam-falvo/orgs","repos_url":"https://api.github.com/users/sam-falvo/repos","events_url":"https://api.github.com/users/sam-falvo/events{/privacy}","received_events_url":"https://api.github.com/users/sam-falvo/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-30T19:40:17Z","updated_at":"2018-03-30T22:16:50Z","closed_at":"2018-03-30T22:16:50Z","author_association":"NONE","body":"This is not a duplicate issue to #517, because I'm forcing the server to close the connection first.  Apparently twice, but this is actually a separate issue.\r\n\r\nSo far as I'm able to tell by spelunking through the code in Tornado, it unconditionally is supposed to call `on_finish`.  However, I'm showing *no* evidence this call is being made.  None of my logs contains any `on_finish` or `on_connection_close` output.\r\n\r\nI'm running the following code in my web-app for testing purposes:\r\n\r\n```python\r\nclass HealthHandler(CorsMixin, V3Handler):                                                                                                                                                    \r\n                                                                                                                                                                                              \r\n    \"\"\"                                                                                                                                                                                       \r\n    This class handles GETs to /.  This serves two purposes:                                                                                                                                  \r\n    for programmers, it's a nice cheat-sheet to create your own handler                                                                                                                       \r\n    classes with; and, for operations, it's a convenient health-check.                                                                                                                        \r\n    If the server responds, we know that the V3 event loop is up.                                                                                                                             \r\n    \"\"\"                                                                                                                                                                                       \r\n                                                                                                                                                                                              \r\n    CORS_ORIGIN = '*'                                                                                                                                                                         \r\n    CORS_METHODS = 'GET'                                                                                                                                                                      \r\n                                                                                                                                                                                              \r\n    def get(self):                                                                                                                                                                            \r\n        LOG.info(\"Health checked\")\r\n        self._ok(\"Health check OK\")                                                                                                                                                           \r\n```\r\n\r\nThe V3Handler class is defined like so:\r\n\r\n```python\r\nclass V3Handler(RequestHandler):                                                                                                                                                              \r\n    \"\"\"                                                                                                                                                                                       \r\n    This class provides a common handler base class for all V3 handlers.                                                                                                                      \r\n    It enhances RequestHandler with the following features:                                                                                                                                   \r\n                                                                                                                                                                                              \r\n    - Standard responses for API endpoints, including both error and success                                                                                                                  \r\n      methods.                                                                                                                                                                                \r\n                                                                                                                                                                                              \r\n    - Standardized request logging.                                                                                                                                                           \r\n    \"\"\"                                                                                                                                                                                       \r\n                                                                                                                                                                                              \r\n    # V3Handler-specific logic                                                                                                                                                                \r\n                                                                                                                                                                                              \r\n    def _log(self, meth, status, msg):                                                                                                                                                        \r\n        self.set_status(status)                                                                                                                                                               \r\n        self.write(msg)                                                                                                                                                                       \r\n        meth(\"{}\".format(msg))                                                                                                                                                                \r\n        self.finish()                                                                                                                                                                         \r\n                                                                                                                                                                                              \r\n    def _error(self, msg, status=404):                                                                                                                                                        \r\n        self._log(LOG.error, status, err(msg))                                                                                                                                                \r\n                                                                                                                                                                                              \r\n    def _exception(self, msg, status=500):                                                                                                                                                    \r\n        self._log(LOG.exception, status, err(msg))                                                                                                                                            \r\n                                                                                                                                                                                              \r\n    def _ok(self, msg=None):                                                                                                                                                                  \r\n        self.write(ok(msg))                                                                                                                                                                   \r\n        self.finish()                                                                                                                                                                         \r\n                                                                                                                                                                                              \r\n    def missing_field(self, term):                                                                                                                                                            \r\n        self._exception(missing_field(term))                                                                                                                                                  \r\n                                                                                                                                                                                              \r\n    def not_live_system(self):                                                                                                                                                                \r\n        self._error(                                                                                                                                                                          \r\n            \"The given serial or token combination \"                                                                                                                                          \r\n            \"is not associated with a live system.\"                                                                                                                                           \r\n        )                                                                                                                                                                                     \r\n                                                                                                                                                                                              \r\n    def no_data(self, qualifier=None):                                                                                                                                                        \r\n        self._error(                                                                                                                                                                          \r\n            \"No data found{}\".format(\" for {}\".format(qualifier) if qualifier else \"\")                                                                                                        \r\n        )                                                                                                                                                                                     \r\n                                                                                                                                                                                              \r\n    def method_not_allowed(self):                                                                                                                                                             \r\n        self._error(\"Method not allowed\", status=405)                                                                                                                                         \r\n                                                                                                                                                                                              \r\n    # overriding RequestHandler methods                                                                                                                                                       \r\n                                                                                                                                                                                              \r\n    def prepare(self):                                                                                                                                                                        \r\n        method = self.request.method                                                                                                                                                          \r\n        url = self.request.path                                                                                                                                                               \r\n        source = self.request.remote_ip                                                                                                                                                       \r\n        LOG.info(\"{} - {} {}\".format(source, method, url))                                                                                                                                    \r\n                                                                                                                                                                                              \r\n    def finish(self, *args, **kw_args):                                                                                                                                                       \r\n        print(\"FINISH!!\")                                                                                                                                                                     \r\n        self.on_finish()                                                                                                                                                                      \r\n        return super(V3Handler, self).finish(*args, **kw_args)                                                                                                                                \r\n                                                                                                                                                                                              \r\n    def on_finish(self):                                                                                                                                                                      \r\n        print(\"FINI\")                                                                                                                                                                         \r\n        LOG.info(\"FINI.\")                                                                                                                                                                     \r\n```\r\n\r\nWhen I issue a `curl` command to GET the / endpoint, I receive back a response and the HTTP connection closes, as one would expect.  I also find the following on the log output:\r\n\r\n```\r\n2018-03-30 12:29:22,225 - __main__ - INFO - Health checked\r\nFINISH!!\r\nFINI\r\n2018-03-30 12:29:22,225 - src.server.generic_handler - INFO - FINI.\r\nFINISH!!\r\nFINI\r\n2018-03-30 12:29:22,231 - src.server.generic_handler - INFO - FINI.\r\n```\r\n\r\nLooks like everything is working correctly; *however*, if I **remove** the invokation of `self.on_finish()` in my override of `finish`, the resulting logs are produced instead, clearly showing that `on_finish` is *not* being called by the `finish` method, and apparently contradicting the source listing:\r\n\r\n```\r\n2018-03-30 12:28:54,339 - __main__ - INFO - Health checked\r\nFINISH!!\r\nFINISH!!\r\n```\r\n\r\nIn my project's requirements.txt file, I have the following listed:\r\n\r\n```\r\ntornado==4.5.3\r\ntornado_cors==0.6.0\r\n```\r\n\r\nWhat steps must I take to *reliably* get `on_finish` called?\r\n\r\nThanks for any help you can provide.  If you need more information from me, I'd be happy to help provide it if I can.","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2333","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/is
8000
sues/2333/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2333/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2333/events","html_url":"https://github.com/tornadoweb/tornado/issues/2333","id":309968156,"number":2333,"title":"ioloop: PeriodicCallback executes too often on windows","user":{"login":"wanghongzhou","id":12545839,"avatar_url":"https://avatars2.githubusercontent.com/u/12545839?v=4","gravatar_id":"","url":"https://api.github.com/users/wanghongzhou","html_url":"https://github.com/wanghongzhou","followers_url":"https://api.github.com/users/wanghongzhou/followers","following_url":"https://api.github.com/users/wanghongzhou/following{/other_user}","gists_url":"https://api.github.com/users/wanghongzhou/gists{/gist_id}","starred_url":"https://api.github.com/users/wanghongzhou/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wanghongzhou/subscriptions","organizations_url":"https://api.github.com/users/wanghongzhou/orgs","repos_url":"https://api.github.com/users/wanghongzhou/repos","events_url":"https://api.github.com/users/wanghongzhou/events{/privacy}","received_events_url":"https://api.github.com/users/wanghongzhou/received_events","type":"User","site_admin":false},"labels":[{"id":131319116,"url":"https://api.github.com/repos/tornadoweb/tornado/labels/windows","name":"windows","color":"fbca04","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2018-03-30T03:48:17Z","updated_at":"2018-04-06T17:52:53Z","closed_at":"2018-04-06T17:52:53Z","author_association":"NONE","body":"## Here is the code:\r\nimport math\r\n\r\nimport logging\r\nfrom crontab import CronTab\r\nfrom tornado.ioloop import PeriodicCallback, IOLoop\r\n\r\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\r\n\r\n\r\nclass CronTabCallback(PeriodicCallback):\r\n\r\n    def __init__(self, callback, schedule):\r\n        self._callback = callback\r\n        self._crontab = CronTab(schedule)\r\n        super(CronTabCallback, self).__init__(self.run, self._calc_callbacktime())\r\n\r\n    def _calc_callbacktime(self, now=None):\r\n        return math.ceil(self._crontab.next(now)) * 1000.0\r\n\r\n    def run(self):\r\n        return self._callback()\r\n\r\n    def _schedule_next(self):\r\n        self.callback_time = self._calc_callbacktime()\r\n        logging.info('calc ---------------------')\r\n        logging.info('delay %s' % self.callback_time)\r\n        logging.info('last execute %s' % self._next_timeout)\r\n\r\n        last = self._next_timeout\r\n        super(CronTabCallback, self)._schedule_next()\r\n\r\n        if last == self._next_timeout:\r\n            logging.error('error !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\r\n\r\n        logging.info('current: %s' % self.io_loop.time())\r\n        logging.info('calc next: %s' % self._next_timeout)\r\n        logging.info('--------------------------\\n')\r\n\r\n\r\ndef crontab(schedule):\r\n    def decorator(func):\r\n        CronTabCallback(func, schedule).start()\r\n        return func\r\n\r\n    return decorator\r\n\r\n\r\n@crontab('*/1 * * * *')\r\ndef run():\r\n    logging.info('execute ... \\n')\r\n\r\n\r\nif __name__ == '__main__':\r\n    IOLoop.current().start()\r\n\r\n## Here is the console log\r\n2018-03-30 11:33:00,311 - asyncio - DEBUG - Using selector: SelectSelector\r\n2018-03-30 11:33:00,316 - root - INFO - calc ---------------------\r\n2018-03-30 11:33:00,316 - root - INFO - delay 60000.0\r\n2018-03-30 11:33:00,316 - root - INFO - last execute 1522380780.3169544\r\n2018-03-30 11:33:00,316 - root - INFO - current: 1522380780.3169544\r\n2018-03-30 11:33:00,316 - root - INFO - **calc next: 1522380840.3169544**\r\n2018-03-30 11:33:00,316 - root - INFO - --------------------------\r\n\r\n**2018-03-30 11:34:00,313** - root - INFO - execute ... \r\n\r\n2018-03-30 11:34:00,313 - root - INFO - calc ---------------------\r\n2018-03-30 11:34:00,313 - root - INFO - delay 60000.0\r\n2018-03-30 11:34:00,313 - root - INFO - last execute 1522380840.3169544\r\n2018-03-30 11:34:00,313 - root - ERROR - error !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n2018-03-30 11:34:00,313 - root - INFO - current: 1522380840.3139544\r\n2018-03-30 11:34:00,313 - root - INFO - calc next: 1522380840.3169544\r\n2018-03-30 11:34:00,313 - root - INFO - --------------------------\r\n\r\n2018-03-30 11:34:00,318 - root - INFO - execute ... \r\n\r\n2018-03-30 11:34:00,318 - root - INFO - calc ---------------------\r\n2018-03-30 11:34:00,318 - root - INFO - delay 60000.0\r\n2018-03-30 11:34:00,318 - root - INFO - last execute 1522380840.3169544\r\n2018-03-30 11:34:00,318 - root - INFO - current: 1522380840.3189545\r\n2018-03-30 11:34:00,318 - root - INFO - calc next: 1522380900.3169544\r\n2018-03-30 11:34:00,318 - root - INFO - --------------------------\r\n\r\n## Environment:\r\nOS: windows 7\r\nPython:  python 3.6\r\nDependent library: crontab 0.22.0\r\n\r\nTornado 4.5.1 python2 (ok) python3(ok)\r\nTornado 5.0.1 python2 (ok) python3 (linux ok, window has issue)","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2325","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2325/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2325/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2325/events","html_url":"https://github.com/tornadoweb/tornado/issues/2325","id":308268540,"number":2325,"title":" 'HTTPClient' object has no attribute '_closed'  in tornado5.0","user":{"login":"DreamHackchosenone","id":29697934,"avatar_url":"https://avatars2.githubusercontent.com/u/29697934?v=4","gravatar_id":"","url":"https://api.github.com/users/DreamHackchosenone","html_url":"https://github.com/DreamHackchosenone","followers_url":"https://api.github.com/users/DreamHackchosenone/followers","following_url":"https://api.github.com/users/DreamHackchosenone/following{/other_user}","gists_url":"https://api.github.com/users/DreamHackchosenone/gists{/gist_id}","starred_url":"https://api.github.com/users/DreamHackchosenone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DreamHackchosenone/subscriptions","organizations_url":"https://api.github.com/users/DreamHackchosenone/orgs","repos_url":"https://api.github.com/users/DreamHackchosenone/repos","events_url":"https://api.github.com/users/DreamHackchosenone/events{/privacy}","received_events_url":"https://api.github.com/users/DreamHackchosenone/received_events","type":"User","site_admin":false},"labels":[{"id":114337843,"url":"https://api.github.com/repos/tornadoweb/tornado/labels/httpclient","name":"httpclient","color":"0052cc","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-03-24T14:51:19Z","updated_at":"2018-03-25T14:20:13Z","closed_at":"2018-03-25T14:20:13Z","author_association":"NONE","body":"about httpclient.HTTPClient()\r\nI can't execute http_client = httpclient.HTTPClient() in tornado==5.0\r\nrunning this will throw Exception this：\r\nTraceback (most recent call last):\r\nFile \"/Users/zhonghao/anaconda3/envs/tornado_test/lib/python3.6/site-packages/tornado/httpclient.py\", line 85, in del\r\nself.close()\r\nFile \"/Users/zhonghao/anaconda3/envs/tornado_test/lib/python3.6/site-packages/tornado/httpclient.py\", line 89, in close\r\nif not self._closed:\r\nAttributeError: 'HTTPClient' object has no attribute '_closed'\r\n\r\nbut in tornado==4.5.2\r\nit works fine, this issue on macOS，can you tell me why？","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2324","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2324/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2324/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2324/events","html_url":"https://github.com/tornadoweb/tornado/issues/2324","id":308196683,"number":2324,"title":"Create AsyncIOLoop from existing asyncio event loop","user":{"login":"adamrothman","id":662688,"avatar_url":"https://avatars1.githubusercontent.com/u/662688?v=4","gravatar_id":"","url":"https://api.github.com/users/adamrothman","html_url":"https://github.com/adamrothman","followers_url":"https://api.github.com/users/adamrothman/followers","following_url":"https://api.github.com/users/adamrothman/following{/other_user}","gists_url":"https://api.github.com/users/adamrothman/gists{/gist_id}","starred_url":"https://api.github.com/users/adamrothman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adamrothman/subscriptions","organizations_url":"https://api.github.com/users/adamrothman/orgs","repos_url":"https://api.github.com/users/adamrothman/repos","events_url":"https://api.github.com/users/adamrothman/events{/privacy}","received_events_url":"https://api.github.com/users/adamrothman/received_events","type":"User","site_admin":false},"labels":[{"id":131319754,"url":"https://api.github.com/repos/tornadoweb/tornado/labels/testing","name":"testing","color":"0052cc","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-23T22:29:11Z","updated_at":"2018-03-27T17:27:43Z","closed_at":"2018-03-25T16:34:20Z","author_association":"NONE","body":"Creating a new `AsyncIOLoop` always creates a new underlying asyncio event loop. I think this makes sense in most cases but it would be very helpful (especially for testing, read on) to be able to pass an existing asyncio event loop for Tornado to wrap.\r\n\r\nWe use [pytest](https://docs.pytest.org/en/latest/index.html) with the [pytest-asyncio](https://github.com/pytest-dev/pytest-asyncio) plugin to run our test suite for several Tornado applications. After upgrading one of these apps to Tornado 5 and improving our test hygiene to use a new event loop for each test, our test suite broke.\r\n\r\nOur unit tests are simple because they don't interact with or depend on `tornado.testing.AsyncTestCase` at all. Our integration tests do (because they make requests against the application), however, and this is where I ran into trouble. When I ran the tests, I would get a ton of errors due to `Task`s getting `Future`s attached to a different loop, like this:\r\n\r\n>RuntimeError: Task <Task pending coro=<test_get_targets() running at /Users/adam/Other/src/pusheen/tests/integration/application_api_test.py:279> cb=[IOLoop.add_future.<locals>.<lambda>() at /Users/adam/Other/src/pusheen/.tox/verbose/lib/python3.6/site-packages/tornado/ioloop.py:721]> got Future <Task pending coro=<AioBaseClient._make_api_call() running at /Users/adam/Other/src/pusheen/.tox/verbose/lib/python3.6/site-packages/aiobotocore/client.py:65>> attached to a different loop\r\n\r\npytest-asyncio creates a new event loop for each async test that it runs (which is a good thing). Previously we were overriding this behavior to always return the \"main\" loop via `asyncio.get_event_loop()` and explicitly _not_ close the loop between tests. This worked under Tornado 4 because we were using `AsyncIOMainLoop`, and Tornado 4 did not close the underlying asyncio event loop in such a configuration. But this override has always felt kind of gross to me, so I resolved to remove it. After all, there's no reason it should be necessary; we are careful to pass the testing event loop to classes that require it so they don't grab the main loop by default. Plus, Tornado 5 _does_ close the underlying loop when closing `AsyncIOMainLoop`.\r\n\r\nBut making this change borked our tests.\r\n\r\nWe have some setup code that is shared between the unit and integration tests. This setup is handled by pytest, so a number of async singletons (e.g. DB connectors) get configured to use the event loop created by pytest-asyncio for each test.\r\n\r\n`tornado.testing.AsyncTestCase` _also_ creates a loop for each test – an `IOLoop` – by calling `get_new_ioloop` as part of `setUp`. This is still a good thing – but turned out to be the cause of my sadness. During the integration tests, our application logic is run by Tornado's loop, but per the above, the async singletons use pytest-asyncio's loop. When async code running on one loop tries to interact with async code on the other, people weep in the streets.\r\n\r\nBeing able to override `AsyncTestCase.get_new_ioloop` goes most of the way towards solving this issue. It's not difficult to expose pytest-asyncio's event loop to this function – the problem is that I can't use this existing asyncio event loop to instantiate the Tornado IOLoop `get_new_ioloop` is expected to return.\r\n\r\nFor now I'm working around this limitation by overriding pytest-asyncio's default behavior to first create an `AsyncIOLoop` and then using the underlying `.asyncio_loop`. This feels wrong, though. pytest shouldn't need to know about what's happening \"downstream\" as long as it implements a compatible test interface like `unittest.TestCase`.\r\n\r\nMine is just one (long-winded, sorry) case but I can imagine there are other situations in which users would want to provide an existing event loop to Tornado. What do you think @bdarnell?","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2323","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2323/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2323/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2323/events","html_url":"https://github.com/tornadoweb/tornado/issues/2323","id":307822408,"number":2323,"title":"AsyncHTTPClient keeps request objects forever when fetching error responses","user":{"login":"fabiant7t","id":81570,"avatar_url":"https://avatars3.githubusercontent.com/u/81570?v=4","gravatar_id":"","url":"https://api.github.com/users/fabiant7t","html_url":"https://github.com/fabiant7t","followers_url":"https://api.github.com/users/fabiant7t/followers","following_url":"https://api.github.com/users/fabiant7t/following{/other_user}","gists_url":"https://api.github.com/users/fabiant7t/gists{/gist_id}","starred_url":"https://api.github.com/users/fabiant7t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fabiant7t/subscriptions","organizations_url":"https://api.github.com/users/fabiant7t/orgs","repos_url":"https://api.github.com/users/fabiant7t/repos","events_url":"https://api.github.com/users/fabiant7t/events{/privacy}","received_events_url":"https://api.github.com/users/fabiant7t/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-22T21:31:53Z","updated_at":"2018-03-24T16:13:37Z","closed_at":"2018-03-22T22:06:52Z","author_association":"NONE","body":"Using Tornado as a proxy, I noticed that its memory usage increases. \r\nAsyncHTTPClient.fetch takes a request object and calls its URL. If the response is successful (2xx) or a redirection (3xx), this request object gets properly deleted/garbage collected.\r\nHowever, if the response is a client (4xx) or server error (5xx), the request is not being deleted and lives forever, eating RAM.\r\n\r\nTo reproduce in Python 3, spin up tornado_test.py and call\r\n1) http://localhost:8888/200\r\n-> You'll see 'Request object deleted' being printed to stdout right away\r\n2) http://localhost:8888/400\r\n-> You don't see 'Request object deleted' being printed to stdout. But you will after exiting the whole program with <Ctrl+C>.\r\n\r\nPython2 shows the same problem (see comment below).\r\n\r\n```\r\n#!/usr/bin/python3\r\nimport weakref                                                                                                                                                                                                                                                                                                                                                                                                                            \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\nimport tornado.httpclient                                                                                                                                                                                                                                                                                                                                                                                                                 \r\nimport tornado.ioloop                                                                                                                                                                                                                                                                                                                                                                                                                     \r\nimport tornado.gen                                                                                                                                                                                                                                                                                                                                                                                                                        \r\nimport tornado.web                                                                                                                                                                                                                                                                                                                                                                                                                        \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\nclass MainHandler(tornado.web.RequestHandler):                                                                                                                                                                                                                                                                                                                                                                                            \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\n    @tornado.gen.coroutine                                                                                                                                                                                                                                                                                                                                                                                                                \r\n    def get(self, status):                                                                                                                                                                                                                                                                                                                                                                                                                \r\n        request = tornado.httpclient.HTTPRequest(                                                                                                                                                                                                                                                                                                                                                                                         \r\n            url='https://httpstat.us/{}'.format(status)                                                                                                                                                                                                                                                                                                                                                                                   \r\n        )                                                                                                                                                                                                                                                                                                                                                                                                                                 \r\n        weakref.finalize(request, lambda: print('Request object deleted'))                                                                                                                                                                                                                                                                                                                                                                          \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\n        client = tornado.httpclient.AsyncHTTPClient()                                                                                                                                                                                                                                                                                                                                                                                     \r\n        response = yield client.fetch(request, raise_error=False)                                                                                                                                                                                                                                                                                                                                                                         \r\n        # client.close()                                                                                                                                                                                                                                                                                                                                                                                                                  \r\n        self.set_status(response.code)                                                                                                                                                                                                                                                                                                                                                                                                    \r\n        self.write('Status %d' % response.code)                                                                                                                                                                                                                                                                                                                                                                                           \r\n        self.finish()                                                                                                                                                                                                                                                                                                                                                                                                                     \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\ndef make_app():                                                                                                                                                                                                                                                                                                                                                                                                                           \r\n    return tornado.web.Application([                                                                                                                                                                                                                                                                                                                                                                                                      \r\n        (r\"/(?P<status>\\d{3})\", MainHandler),                                                                                                                                                                                                                                                                                                                                                                                               \r\n    ])                                                                                                                                                                                                                                                                                                                                                                                                                                    \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \r\nif __name__ == \"__main__\":                                                                                                                                                                                                                                                                                                                                                                                                                \r\n    app = make_app()                                                                                                                                                                                                                                                                                                                                                                                                                      \r\n    app.listen(8888)                                                                                                                                                                                                                                                                                                                                                                                                                      \r\n    tornado.ioloop.IOLoop.current().start()\r\n```","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2321","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2321/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2321/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2321/events","html_url":"https://github.com/tornadoweb/tornado/issues/2321","id":307651881,"number":2321,"title":"Synchronous HTTPClient leaks memory in 5.0.1","user":{"login":"NicolasLM","id":7612656,"avatar_url":"https://avatars0.githubusercontent.com/u/7612656?v=4","gravatar_id":"","url":"https://api.github.com/users/NicolasLM","html_url":"https://github.com/NicolasLM","followers_url":"https://api.github.com/users/NicolasLM/followers","following_url":"https://api.github.com/users/NicolasLM/following{/other_user}","gists_url":"https://api.github.com/users/NicolasLM/gists{/gist_id}","starred_url":"https://api.github.com/users/NicolasLM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NicolasLM/subscriptions","organizations_url":"https://api.github.com/users/NicolasLM/orgs","repos_url":"https://api.github.com/users/NicolasLM/repos","events_url":"https://api.github.com/users/NicolasLM/events{/privacy}","received_events_url":"https://api.github.com/users/NicolasLM/received_events","type":"User","site_admin":false},"labels":[{"id":114337843,"url":"https://api.github.com/repos/tornadoweb/tornado/labels/httpclient","name":"httpclient","color":"0052cc","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-22T13:51:07Z","updated_at":"2018-03-25T16:59:39Z","closed_at":"2018-03-25T16:59:39Z","author_association":"NONE","body":"The synchronous HTTPClient leaks memory for each request made since upgrading to Tornado 5.0.1.\r\n\r\n```python\r\nfrom tornado import httpclient\r\n\r\nwhile True:\r\n    try:\r\n        http_client = httpclient.HTTP
8000
Client()\r\n        response = http_client.fetch(\"http://localhost\")\r\n    except Exception:\r\n        pass\r\n    finally:\r\n        http_client.close()\r\n```\r\n\r\nRunning this script for 3 minutes in docker (`python:3.6-stretch`): \r\n- `tornado==4.5.3`: 18.52MiB / 1.952GiB\r\n- `tornado==5.0.1`: 350.28MiB / 1.952GiB\r\n\r\nNote, I cannot seem to reproduce the issue on macOS.","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2320","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2320/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2320/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2320/events","html_url":"https://github.com/tornadoweb/tornado/issues/2320","id":306522613,"number":2320,"title":"strange behavior of AsyncHTTPClient while using streaming mode in tornado 5.x","user":{"login":"serg666","id":10406902,"avatar_url":"https://avatars1.githubusercontent.com/u/10406902?v=4","gravatar_id":"","url":"https://api.github.com/users/serg666","html_url":"https://github.com/serg666","followers_url":"https://api.github.com/users/serg666/followers","following_url":"https://api.github.com/users/serg666/following{/other_user}","gists_url":"https://api.github.com/users/serg666/gists{/gist_id}","starred_url":"https://api.github.com/users/serg666/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/serg666/subscriptions","organizations_url":"https://api.github.com/users/serg666/orgs","repos_url":"https://api.github.com/users/serg666/repos","events_url":"https://api.github.com/users/serg666/events{/privacy}","received_events_url":"https://api.github.com/users/serg666/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-19T15:55:10Z","updated_at":"2018-03-22T15:53:36Z","closed_at":"2018-03-21T23:35:51Z","author_association":"NONE","body":"Hi! \r\n\r\nI have the following (tornado==4.5.3):\r\n```python\r\nimport logging\r\nimport asyncio\r\nimport tornado.httpclient\r\n\r\nimport tornado.platform.asyncio\r\n\r\n\r\nFORMAT='%(asctime)s,%(msecs)03d %(name)s [%(threadName)s] %(levelname)s: %(message)s'\r\nlog = logging.getLogger(__name__)\r\nlogging.basicConfig(format=FORMAT, datefmt='%Y-%m-%d %H:%M:%S%Z',\r\n                    level = logging.DEBUG)\r\n\r\nclass Download(object):\r\n    def streaming_callback(self, data):\r\n        log.debug('get chunk')\r\n\r\n    def async_callback(self, response):\r\n        log.debug('final response: {}'.format(response))\r\n\r\n    async def run(self):\r\n        await tornado.platform.asyncio.to_asyncio_future(\r\n            tornado.httpclient.AsyncHTTPClient().fetch(\r\n                tornado.httpclient.HTTPRequest('https://ya.ru/', streaming_callback=self.streaming_callback),\r\n                self.async_callback\r\n            )\r\n        )\r\n        log.debug('fetch done')\r\n\r\n\r\ntornado.platform.asyncio.AsyncIOMainLoop().install()\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(Download().run())\r\nlog.debug('Exit')\r\n```\r\n\r\nIf I run the code above under tornado==4.5.3, I see something like this:\r\n\r\n```\r\n2018-03-19 18:38:58MSK,807 asyncio [MainThread] DEBUG: Using selector: EpollSelector\r\n2018-03-19 18:38:58MSK,953 __main__ [MainThread] DEBUG: get chunk\r\n2018-03-19 18:38:58MSK,954 __main__ [MainThread] DEBUG: get chunk\r\n2018-03-19 18:38:58MSK,956 __main__ [MainThread] DEBUG: final response: HTTPResponse(_body=None,buffer=<_io.BytesIO object at 0x7f6258e49308>,code=200,effective_url='https://ya.ru/',error=None,headers=<tornado.httputil.HTTPHeaders object at 0x7f625941ad30>,reason='Ok',request=<tornado.httpclient.HTTPRequest object at 0x7f62593bfc88>,request_time=0.13659238815307617,time_info={})\r\n2018-03-19 18:38:58MSK,957 __main__ [MainThread] DEBUG: fetch done\r\n2018-03-19 18:38:58MSK,957 __main__ [MainThread] DEBUG: Exit\r\n```\r\n\r\ne.g. we have called `async_callback` inside `async def run` and before  `log.debug('fetch done')`\r\n\r\n\r\nDue to current documentation AsyncHTTPClient.fetch return asyncio future, so we do not need to use tornado.platform.asyncio directly.\r\n\r\n\r\nSo, I modify code like this:\r\n```python\r\nimport logging\r\nimport asyncio\r\nimport tornado.httpclient\r\n\r\n\r\nFORMAT='%(asctime)s,%(msecs)03d %(name)s [%(threadName)s] %(levelname)s: %(message)s'\r\nlog = logging.getLogger(__name__)\r\nlogging.basicConfig(format=FORMAT, datefmt='%Y-%m-%d %H:%M:%S%Z',\r\n                    level = logging.DEBUG)\r\n\r\nclass Download(object):\r\n    def streaming_callback(self, data):\r\n        log.debug('get chunk')\r\n\r\n    def async_callback(self, response):\r\n        log.debug('final response: {}'.format(response))\r\n\r\n    async def run(self):\r\n        await tornado.httpclient.AsyncHTTPClient().fetch(\r\n            tornado.httpclient.HTTPRequest('https://ya.ru/', streaming_callback=self.streaming_callback),\r\n            self.async_callback\r\n        )\r\n        log.debug('fetch done')\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(Download().run())\r\nlog.debug('Exit')\r\n```\r\n\r\nAnd when I run the code above, I see something like this:\r\n```\r\n2018-03-19 18:48:32MSK,943 asyncio [MainThread] DEBUG: Using selector: EpollSelector\r\n2018-03-19 18:48:33MSK,081 __main__ [MainThread] DEBUG: get chunk\r\n2018-03-19 18:48:33MSK,082 __main__ [MainThread] DEBUG: get chunk\r\n2018-03-19 18:48:33MSK,083 __main__ [MainThread] DEBUG: fetch done\r\n2018-03-19 18:48:33MSK,084 __main__ [MainThread] DEBUG: final response: HTTPResponse(_body=None,buffer=<_io.BytesIO object at 0x7f4d23d545c8>,code=200,effective_url='https://ya.ru/',error=None,headers=<tornado.httputil.HTTPHeaders object at 0x7f4d23d6c400>,reason='Ok',request=<tornado.httpclient.HTTPRequest object at 0x7f4d23d8aa90>,request_time=0.12746953964233398,time_info={})\r\n2018-03-19 18:48:33MSK,085 __main__ [MainThread] DEBUG: Exit\r\n```\r\n\r\nThe problem is, that `async_callback` has not called inside `async def run` before `log.debug('fetch done')`, like under tornado 4.5.3\r\n\r\nSo, how can I get response inside `async def run` and before `log.debug('fetch done')`?","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2314","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2314/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2314/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2314/events","html_url":"https://github.com/tornadoweb/tornado/issues/2314","id":306170036,"number":2314,"title":"Mistake in official user guide?","user":{"login":"nicolinux","id":1069286,"avatar_url":"https://avatars2.githubusercontent.com/u/1069286?v=4","gravatar_id":"","url":"https://api.github.com/users/nicolinux","html_url":"https://github.com/nicolinux","followers_url":"https://api.github.com/users/nicolinux/followers","following_url":"https://api.github.com/users/nicolinux/following{/other_user}","gists_url":"https://api.github.com/users/nicolinux/gists{/gist_id}","starred_url":"https://api.github.com/users/nicolinux/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nicolinux/subscriptions","organizations_url":"https://api.github.com/users/nicolinux/orgs","repos_url":"https://api.github.com/users/nicolinux/repos","events_url":"https://api.github.com/users/nicolinux/events{/privacy}","received_events_url":"https://api.github.com/users/nicolinux/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-17T16:32:26Z","updated_at":"2018-03-17T18:45:20Z","closed_at":"2018-03-17T18:45:20Z","author_association":"NONE","body":"Looking at the official [guide/async](http://www.tornadoweb.org/en/stable/guide/async.html), the async example shows the method: \r\n`def asynchronous_fetch(url, callback):`\r\n\r\nI wonder if the argument `callback` is correct since this would imply that calling the method would need to provide that callback.\r\nI am just starting out with Tornado so I admit that I have no clue about it, but looking at another example on StackOverflow which uses that same example, it makes way more sense to me for the async method to have this signature: \r\n`def asynchronous_fetch(url):`\r\n[StackOverflow example](https://stackoverflow.com/questions/31079717/synchronous-v-s-asynchronous)\r\n\r\nIf it is a small mistake, I'd suggest to fix it soon since this trips newbs big time when they try to wrap their head around the async concept in Tornado (speaking from experience :) )","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2313","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2313/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2313/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2313/events","html_url":"https://github.com/tornadoweb/tornado/issues/2313","id":305817226,"number":2313,"title":"AsyncHTTPTestCase block, and raise \"Async operation timed out after 5 seconds\"","user":{"login":"ityoung","id":12296804,"avatar_url":"https://avatars0.githubusercontent.com/u/12296804?v=4","gravatar_id":"","url":"https://api.github.com/users/ityoung","html_url":"https://github.com/ityoung","followers_url":"https://api.github.com/users/ityoung/followers","following_url":"https://api.github.com/users/ityoung/following{/other_user}","gists_url":"https://api.github.com/users/ityoung/gists{/gist_id}","starred_url":"https://api.github.com/users/ityoung/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ityoung/subscriptions","organizations_url":"https://api.github.com/users/ityoung/orgs","repos_url":"https://api.github.com/users/ityoung/repos","events_url":"https://api.github.com/users/ityoung/events{/privacy}","received_events_url":"https://api.github.com/users/ityoung/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-16T06:36:45Z","updated_at":"2018-03-16T08:02:59Z","closed_at":"2018-03-16T08:01:59Z","author_association":"NONE","body":"Hello, I met an error \"Async operation timed out after 5 seconds\", and I did find some question in issue, but didn'd solve my problem.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.5/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/usr/lib/python3.5/unittest/case.py\", line 605, in run\r\n    testMethod()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/testing.py\", line 136, in __call__\r\n    result = self.orig_method(*args, **kwargs)\r\n  File \"/home/yangxin/Geetest/server/gt-message/test/test_pre_gateway.py\", line 95, in test_post\r\n    res = self.fetch('/pre_gateway', method='POST', body=json.dumps(opsalt_origin))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/testing.py\", line 406, in fetch\r\n    return self.wait()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/testing.py\", line 336, in wait\r\n    self.__rethrow()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/testing.py\", line 272, in __rethrow\r\n    raise_exc_info(failure)\r\n  File \"<string>\", line 4, in raise_exc_info\r\n  File \"/usr/local/lib/python3.5/dist-packages/tornado/testing.py\", line 320, in timeout_func\r\n    timeout)\r\nAssertionError: Async operation timed out after 5 seconds\r\n```\r\n\r\nthats my code below:\r\n\r\n```\r\nfrom tornado.testing import AsyncHTTPTestCase\r\nfrom tornado.web import Application\r\n\r\nfrom index import init_redis\r\nfrom handler.find import FindHandler\r\n\r\nimport unittest\r\nimport json\r\n\r\nimport asyncio\r\n\r\nopsalt_origin = {\r\n    'dns': 'unknown'\r\n}\r\n\r\n\r\nclass TestPreGateway(AsyncHTTPTestCase):\r\n\r\n    def setUp(self):\r\n        super(TestPreGateway, self).setUp()\r\n\r\n    def get_app(self):\r\n        return Application([('/find', FindHandler)])\r\n\r\n    def test_post(self):\r\n        asyncio.get_event_loop().run_until_complete(init_redis())\r\n        res = self.fetch('/find', method='POST', body=json.dumps(opsalt_origin))\r\n        print(res.body)\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n\r\n```\r\n\r\nbecause my `index.py` is something like this, so I just move the initial func to my test code:\r\n\r\n```\r\ndef initialize_utils():\r\n    asyncio.get_event_loop().run_until_complete(init_redis())\r\n\r\nif __name__ == \"__main__\":\r\n    ...\r\n    initialize_utils()\r\n    ...\r\n```\r\n\r\nI'm really confuse that if I want to test a handler which need to connect to redis, I did need to initialize my redis right? Then how to init an async redis setting before I fetch the path?","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2312","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2312/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2312/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2312/events","html_url":"https://github.com/tornadoweb/tornado/issues/2312","id":305170875,"number":2312,"title":"Websockets with ThreadPoolExecutor - running messages on the same websocket sequentially","user":{"login":"nadavb","id":845175,"avatar_url":"https://avatars3.githubusercontent.com/u/845175?v=4","gravatar_id":"","url":"https://api.github.com/users/nadavb","html_url":"https://github.com/nadavb","followers_url":"https://api.github.com/users/nadavb/followers","following_url":"https://api.github.com/users/nadavb/following{/other_user}","gists_url":"https://api.github.com/users/nadavb/gists{/gist_id}","starred_url":"https://api.github.com/users/nadavb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nadavb/subscriptions","organizations_url":"https://api.github.com/users/nadavb/orgs","repos_url":"https://api.github.com/users/nadavb/repos","events_url":"https://api.github.com/users/nadavb/events{/privacy}","received_events_url":"https://api.github.com/users/nadavb/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-14T14:02:32Z","updated_at":"2018-03-18T11:23:53Z","closed_at":"2018-03-17T18:38:10Z","author_association":"NONE","body":"When using Tornado to handle websockets, how can we allow concurrency across different websockets (for example using ThreadPoolExecutor), while demanding that messages on the same websocket be run sequentially?\r\n\r\nSo it's kinda like some QoS (quality of service), so if I have 10000 clients, each is holding one websocket, I want to allow concurrency, that's why I will use ThreadPoolExecutor(8) to utilize my 8 processor cores, but I would like that every message from the same websocket be run sequentially, so that one websocket will not abuse the resources of the machine.\r\n\r\nOne solution may be to spawn 8 threads, and allocate for every websocket (out of the 10k) one thread that will handle this websocket. \r\n\r\nIs there anything like it?","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2311","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2311/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2311/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2311/events","html_url":"https://github.com/tornadoweb/tornado/issues/2311","id":305151735,"number":2311,"title":"Tornado subprocess works in macOS but not in centOS","user":{"login":"pivdets","id":37371804,"avatar_url":"https://avatars0.githubusercontent.com/u/37371804?v=4","gravatar_id":"","url":"https://api.github.com/users/pivdets","html_url":"https://github.com/pivdets","followers_url":"https://api.github.com/users/pivdets/followers","following_url":"https://api.github.com/users/pivdets/following{/other_user}","gists_url":"https://api.github.com/users/pivdets/gists{/gist_id}","starred_url":"https://api.github.com/users/pivdets/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pivdets/subscriptions","organizations_url":"https://api.github.com/users/pivdets/orgs","repos_url":"https://api.github.com/users/pivdets/repos","events_url":"https://api.github.com/users/pivdets/events{/privacy}","received_events_url":"https://api.github.com/users/pivdets/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-14T13:10:51Z","updated_at":"2018-03-19T07:35:26Z","closed_at":"2018-03-19T07:35:26Z","author_association":"NONE","body":"update: I just remove the java part and use python to show the subprocess.\r\n\r\norigin:\r\nI post the same thread in [SO](https://stackoverflow.com/questions/49252078/tornado-subprocess-works-in-macos-but-not-in-centos), but got no answer, so I repost it here.\r\n\r\nI've a tornado program which uses async to call subprocess and return the result.\r\n\r\n```python\r\nimport tornado.ioloop\r\nimport tornado.web\r\nfrom tornado.process import Subprocess\r\nfrom tornado.gen import coroutine, Task, Return\r\nimport subprocess\r\n\r\n\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    @coroutine\r\n    def get(self):\r\n        appid = self.get_argument(\"appid\")\r\n        cmd = ['/usr/local/bin/python2.7', 'jarlib101.py', appid]\r\n\r\n        result, error = yield self.call_subprocess(cmd)\r\n\r\n        with open('defx.txt', 'r') as myfile:\r\n            data=myfile.read()\r\n\r\n        self.write(data)\r\n\r\n\r\n    @coroutine\r\n    def call_subprocess(self, cmd, stdin_data=None, stdin_async=True):\r\n        stdin = Subprocess.STREAM if stdin_async else subprocess.PIPE\r\n        sub_process = Subprocess(cmd,\r\n                                 stdin=stdin,\r\n                                 stdout=Subprocess.STREAM,\r\n                                 stderr=Subprocess.STREAM,)\r\n        if stdin_data:\r\n            if stdin_async:\r\n                yield Task(sub_process.stdin.write, stdin_data)\r\n            else:\r\n                sub_process.stdin.write(stdin_data)\r\n\r\n        if stdin_async or stdin_data:\r\n            sub_process.stdin.close()\r\n\r\n        result, error = yield [Task(sub_process.stdout.read_until_close),\r\n                               Task(sub_process.stderr.read_until_close),]\r\n\r\n        raise Return((result, error))\r\n\r\n\r\n\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        (r\"/webmini\", MainHandler),\r\n    ])\r\n\r\nif __name__ == \"__main__\":\r\n    app = make_app()\r\n    app.listen(8845)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nHere's the source code of the `jarlib101.py`:\r\n\r\n```python\r\nfrom time import sleep\r\nimport sys\r\n\r\nsleep(5)\r\n\r\nappid = sys.argv[1]\r\n\r\nwith open('defx.txt', 'w') as myfile:\r\n    myfile.write(appid)\r\n```\r\n\r\nThe python code works well on my **MacBook** laptop:\r\n\r\n> $ /usr/local/bin/python2 webmini2.py\r\n\r\nI test it in a browser as follows: \r\n![wechatimg229](https://user-images.githubusercontent.com/37371804/37404178-0eec117a-27cc-11e8-9048-adb8aa2cc6ab.jpeg)\r\n\r\nBut when I upload my code to **centOS** and start the server\r\n\r\n> $ /usr/local/bin/python2.7 webmini2.py\r\n\r\nI got an empty response from the browser, but there's an `deft.txt` on the server folder with content\r\n\r\n```bash\r\n$cat defx.txt\r\n1299w\r\n```","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2309","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2309/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2309/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2309/events","html_url":"https://github.com/tornadoweb/tornado/issues/2309","id":304728797,"number":2309,"title":"Tornado 5.0 request handler hangs when executing method `get` in thread pool","user":{"login":"MrP4p3r","id":12061243,"avatar_url":"https://avatars1.githubusercontent.com/u/12061243?v=4","gravatar_id":"","url":"https://api.github.com/users/MrP4p3r","html_url":"https://github.com/MrP4p3r","followers_url":"https://api.github.com/users/MrP4p3r/followers","following_url":"https://api.github.com/users/MrP4p3r/following{/other_user}","gists_url":"https://api.github.com/users/MrP4p3r/gists{/gist_id}","starred_url":"https://api.github.com/users/MrP4p3r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MrP4p3r/subscriptions","organizations_url":"https://api.github.com/users/MrP4p3r/orgs","repos_url":"https://api.github.com/users/MrP4p3r/repos","events_url":"https://api.github.com/users/MrP4p3r/events{/privacy}","received_events_url":"https://api.github.com/users/MrP4p3r/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-13T11:37:20Z","updated_at":"2018-03-13T13:48:42Z","closed_at":"2018-03-13T13:19:52Z","author_association":"NONE","body":"I try to decorate `get` method in request handler to execute it in separate thread (via thread pool) by using tornado.concurrent.Future.\r\n\r\nCode:\r\nhttps://gist.github.com/MrP4p3r/8d0e7ff0ab4bd42af7f1fd5b12c65ea1\r\n\r\nI tried five similar decorators. Two of them wrap request handler method with tornado.gen.coroutine decorated wrapper. They always work with tornado 4.5.3. But with tornado 5.0.0 request handler hangs almost in all cases until I refresh the page. Browser does not receive data.\r\n\r\nOther two decorators is an attempt to use asyncio.Future and `async def` wrapper for request handler method. They do not work in 5.0.0 as well.\r\n\r\nThe last one starts separate thread and executes method `get` in separate thread. It works in both 4.5.3 and 5.0.0. But is not suitable in my case since I have to use thread pool.\r\n\r\nHow it looks:\r\n![image](https://user-images.githubusercontent.com/12061243/37340659-de96f3b6-26cf-11e8-8c5f-ffe51eedc311.png)\r\n\r\n\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2308","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2308/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2308/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2308/events","html_url":"https://github.com/tornadoweb/tornado/issues/2308","id":304628508,"number":2308,"title":"Starting server in separate thread gives... RuntimeError: There is no current event loop in thread 'Thread-4'","user":{"login":"wroscoe","id":147582,"avatar_url":"https://avatars2.githubusercontent.com/u/147582?v=4","gravatar_id":"","url":"https://api.github.com/users/wroscoe","html_url":"https://github.com/wroscoe","followers_url":"https://api.github.com/users/wroscoe/followers","following_url":"https://api.github.com/users/wroscoe/following{/other_user}","gists_url":"https://api.github.com/users/wroscoe/gists{/gist_id}","starred_url":"https://api.github.com/users/wroscoe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wroscoe/subscriptions","organizations_url":"https://api.github.com/users/wroscoe/orgs","repos_url":"https://api.github.com/users/wroscoe/repos","events_url":"https://api.github.com/users/wroscoe/events{/privacy}","received_events_url":"https://api.github.com/users/wroscoe/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-13T04:59:22Z","updated_at":"2018-03-13T13:15:23Z","closed_at":"2018-03-13T13:15:23Z","author_association":"NONE","body":"In the 5.0.0 the following code no longer works and throws the error shown below. Is there still a way to start a tornado server in separate thread? For context, I'm using this for the (a self driving car project)[https://github.com/wroscoe/donkey] its web controller. This still works in v4.5.3. \r\n\r\n```python\r\nimport tornado.web\r\n\r\nclass WebServer(tornado.web.Application):\r\n\r\n    def __init__(self):\r\n        handlers = [ (r\"/test\", TestHandler), ]\r\n        settings = {'debug': True}\r\n        super().__init__(handlers, **settings)\r\n        \r\n    def run(self, port=8886):\r\n        self.listen(port)\r\n        tornado.ioloop.IOLoop.instance().start()\r\n        \r\nclass TestHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.write(\"test success\")\r\n        \r\nws = WebServer()\r\n\r\n\r\nfrom threading import Thread\r\nt = Thread(target=ws.run, args=())\r\nt.daemon = True\r\nt.start()\r\n\r\n```\r\n\r\n```bash\r\nException in thread Thread-4:\r\nTraceback (most recent call last):\r\n  File \"/home/wroscoe/miniconda3/envs/donkey/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\r\n    self.run()\r\n  File \"/home/wroscoe/miniconda3/envs/donkey/lib/python3.6/threading.py\", line 864, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"<ipython-input-1-65816933cb20>\", line 12, in run\r\n    super().__init__(self.handlers, **self.settings)\r\n  File \"/home/wroscoe/miniconda3/envs/donkey/lib/python3.6/site-packages/tornado/web.py\", line 1961, in __init__\r\n    autoreload.start()\r\n  File \"/home/wroscoe/miniconda3/envs/donkey/lib/python3.6/site-packages/tornado/autoreload.py\", line 118, in start\r\n    io_loop = ioloop.IOLoop.current()\r\n  File \"/home/wroscoe/miniconda3/envs/donkey/lib/python3.6/site-packages/tornado/ioloop.py\", line 283, in current\r\n    loop = asyncio.get_event_loop()\r\n  File \"/home/wroscoe/miniconda3/envs/donkey/lib/python3.6/asyncio/events.py\", line 694, in get_event_loop\r\n    return get_event_loop_policy().get_event_loop()\r\n  File \"/home/wroscoe/miniconda3/envs/donkey/lib/python3.6/asyncio/events.py\", line 602, in get_event_loop\r\n    % threading.current_thread().name)\r\nRuntimeError: There is no current event loop in thread 'Thread-4'.\r\n```","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2304","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2304/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2304/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2304/events","html_url":"https://github.com/tornadoweb/tornado/issues/2304","id":304092710,"number":2304,"title":"RuntimeError: There is no current event loop in thread 'ThreadPoolExecutor-1_0'","user":{"login":"jayanth1991","id":1319597,"avatar_url":"https://avatars3.githubusercontent.com/u/1319597?v=4","gravatar_id":"","url":"https://api.github.com/users/jayanth1991","html_url":"https://github.com/jayanth1991","followers_url":"https://api.github.com/users/jayanth1991/followers","following_url":"https://api.github.com/users/jayanth1991/following{/other_user}","gists_url":"https://api.github.com/users/jayanth1991/gists{/gist_id}","starred_url":"https://api.github.com/users/jayanth1991/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jayanth1991/subscriptions","organizations_url":"https://api.github.com/users/jayanth1991/orgs","repos_url":"https://api.github.com/users/jayanth1991/repos","events_url":"https://api.github.com/users/jayanth1991/events{/privacy}","received_events_url":"https://api.github.com/users/jayanth1991/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-10T18:28:01Z","updated_at":"2018-03-11T21:54:07Z","closed_at":"2018-03-11T16:13:30Z","author_association":"NONE","body":"OS: Windows 10\r\nTornado: 5.0\r\nPython: 3.6.4\r\n\r\n```py\r\nimport tornado.web\r\nimport tornado.gen\r\nimport time\r\nfrom tornado.ioloop import IOLoop\r\n\r\n\r\nclass TestHandler(tornado.web.RequestHandler):\r\n\r\n    def _call_later_something(self):\r\n        pass\r\n\r\n    def _get(self, var1):\r\n        # Does some time consuming call\r\n        # Mocking it\r\n        time.sleep(2)\r\n        IOLoop.current().call_later(10, self._call_later_something)\r\n        resp_dict = {}\r\n        resp_dict['blah'] = \"blah\"\r\n\r\n        return resp_dict\r\n\r\n    @tornado.web.asynchronous\r\n    @tornado.gen.coroutine\r\n    def get(self, *args, **kwargs):\r\n        var1 = self.get_argument('var1', None)\r\n        resp_dict = yield IOLoop.current().run_in_executor(None,\r\n                                                           self._get,\r\n                                                           var1)\r\n        self.write(resp_dict)\r\n        self.finish()\r\n\r\n\r\nclass MyApp(tornado.web.Application):\r\n    def __init__(self, test=False):\r\n        handlers = [\r\n            (r\"/api/sometest\", TestHandler),\r\n        ]\r\n        tornado_settings = dict(\r\n            debug=True,\r\n            serve_traceback=True,\r\n        )\r\n\r\n        tornado.web.Application.__init__(self, handlers, **tornado_settings)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Hard code this so that jarvis and ironman can be in sync\r\n    port_number = 9999\r\n\r\n    http_server = MyApp()\r\n    http_server.listen(port_number)\r\n    IOLoop.instance().start()\r\n```\r\n\r\nThis works completely fine on Python2.7, throws the error \r\n`RuntimeError: There is no current event loop in thread 'ThreadPoolExecutor-1_0'`\r\n\r\nNot sure what I am doing wrong. ","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2302","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2302/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2302/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2302/events","html_url":"https://github.com/tornadoweb/tornado/issues/2302","id":303087849,"number":2302,"title":"Async operation timed out when unit testing HTTPServer creation","user":{"login":"k4ppa","id":1504021,"avatar_url":"https://avatars2.githubusercontent.com/u/1504021?v=4","gravatar_id":"","url":"https://api.github.com/users/k4ppa","html_url":"https://github.com/k4ppa","followers_url":"https://api.github.com/users/k4ppa/followers","following_url":"https://api.github.com/users/k4ppa/following{/other_user}","gists_url":"https://api.github.com/users/k4ppa/gists{/gist_id}","starred_url":"https://api.github.com/users/k4ppa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k4ppa/subscriptions","organizations_url":"https://api.github.com/users/k4ppa/orgs","repos_url":"https://api.github.com/users/k4ppa/repos","events_url":"https://api.github.com/users/k4ppa/events{/privacy}","received_events_url":"https://api.github.com/users/k4ppa/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-07T12:56:51Z","updated_at":"2018-03-14T14:49:15Z","closed_at":"2018-03-13T01:22:44Z","author_association":"NONE","body":"I'm trying to unit test a Tornado application.\r\n\r\nThe goal of my test (test_POST_empty_json_in_do_nothing) is now only to send a POST request of an empty zipped json. When it receive the request the HTTPServer must only return an HTTP code 200.\r\n\r\nFollowing [this example](https://gist.github.com/reinhrst/8775b63b1c369773e1f7) I overrided get_http_server to return my HTTPServer.\r\n\r\nBut doing this both tests fail with:\r\n\r\n> AssertionError: Async operation timed out after 5 seconds\r\n\r\nAs far as I understand the tips found online about this issue ([fo
8000
r example here](https://github.com/tornadoweb/tornado/issues/1505) and [here](https://stackoverflow.com/questions/14688042/tornado-blocked-while-testing-asynchronous-method-using-asynchttptastcase)), this problem is generated by the use of the wrong ioloop. A workaround is to override the function _get_new_ioloop_ to return _IOLoop.instance()_.\r\nI did it as you can see in the code below.\r\n\r\necomtranslatorSrv.py\r\n```\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        pass\r\n\r\nclass NewBasketHandler(tornado.web.RequestHandler):\r\n    def post(self):\r\n        pass\r\n\r\n\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        (MAIN_HANDLER, MainHandler),\r\n        (NEW_BASKET, NewBasketHandler)\r\n    ])\r\n\r\n\r\ndef make_server(app, io_loop=None):\r\n    return tornado.httpserver.HTTPServer(app, io_loop=io_loop, decompress_request=True)\r\n```\r\n\r\ntest_translator_server.py\r\n```\r\nclass TestTranslatorServer(AsyncHTTPSTestCase):\r\n\r\n    def setUp(self):\r\n        super(TestTranslatorServer, self).setUp()\r\n\r\n    def tearDown(self):\r\n        super(TestTranslatorServer, self).tearDown()\r\n\r\n    def get_app(self):\r\n        return ecomtranslatorSrv.make_app()\r\n\r\n    def get_http_server(self):\r\n        return ecomtranslatorSrv.make_server(self._app, self.io_loop)\r\n\r\n    def get_new_ioloop(self):\r\n        return IOLoop.instance()\r\n\r\n    def test_GET_main_handler(self):\r\n        response = self.fetch('/')\r\n        self.assertEqual(response.code, 200)\r\n\r\n    def test_POST_empty_json_in_do_nothing(self):\r\n        headers = tornado.httputil.HTTPHeaders({\"Content-Type\": \"application/json\", 'Content-Encoding': 'gzip'})\r\n        body = zlib.compress('{}')\r\n        response = self.fetch(method='POST', path='/basket/json_in', headers=headers, body=body)\r\n        self.assertEqual(response.code, 200)\r\n\r\n\r\ndef main():\r\n    tornado.testing.main()\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nBut the result did not change: both tests fail after the 5 seconds timeout.\r\n\r\nThe only way to get rid of the issue is to not override _get_http_server_. But I don't want to use the HTTPServer created by default by the test module, since I'm trying to use TDD and I don't want to write code that is not used in the tests.\r\n\r\nSo how can I test the creation of an HTTPServer without incurring in  a time out error?\r\n\r\nPython 2.7.12\r\ntornado 4.5.1","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2301","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2301/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2301/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2301/events","html_url":"https://github.com/tornadoweb/tornado/issues/2301","id":302644650,"number":2301,"title":"asyncio's ensure_future for Python versions <3.4.4","user":{"login":"christippett","id":7218120,"avatar_url":"https://avatars0.githubusercontent.com/u/7218120?v=4","gravatar_id":"","url":"https://api.github.com/users/christippett","html_url":"https://github.com/christippett","followers_url":"https://api.github.com/users/christippett/followers","following_url":"https://api.github.com/users/christippett/following{/other_user}","gists_url":"https://api.github.com/users/christippett/gists{/gist_id}","starred_url":"https://api.github.com/users/christippett/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christippett/subscriptions","organizations_url":"https://api.github.com/users/christippett/orgs","repos_url":"https://api.github.com/users/christippett/repos","events_url":"https://api.github.com/users/christippett/events{/privacy}","received_events_url":"https://api.github.com/users/christippett/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-06T10:28:03Z","updated_at":"2018-03-11T18:45:49Z","closed_at":"2018-03-11T18:45:49Z","author_association":"NONE","body":"**Version**\r\nPython: 3.4.3\r\nTornado: 5.0\r\n\r\n**Issue**\r\nI use the `raven` Python library that has Tornado as a requirement. When installing raven in a new environment, a newer version of Tornado was installed (5.0) which resulted in the following exception:\r\n\r\n```\r\n  File \"/opt/python/run/venv/local/lib/python3.4/site-packages/raven/transport/tornado.py\", line 17, in <module>\r\n    from tornado.httpclient import AsyncHTTPClient, HTTPClient\r\n  File \"/opt/python/run/venv/local/lib64/python3.4/site-packages/tornado/httpclient.py\", line 49, in <module>\r\n    from tornado import gen, httputil, stack_context\r\n  File \"/opt/python/run/venv/local/lib64/python3.4/site-packages/tornado/gen.py\", line 1295, in <module>\r\n    _wrap_awaitable = asyncio.ensure_future\r\nAttributeError: 'module' object has no attribute 'ensure_future'\r\n```\r\n\r\nThe previous version of Tornado I was using (4.5.3) does not have this error. Downgrading Tornado from 5.0 to 4.5.3 resolves the problem.\r\n\r\nLooking into the issue, I believe it's caused by Tornado's incompatibility with using an older version of Python's `asyncio`. Should the import for `ensure_future` for Python version <3.4.4 \r\nbe `from asyncio import async as ensure_future` ?\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2295","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2295/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2295/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2295/events","html_url":"https://github.com/tornadoweb/tornado/issues/2295","id":301984930,"number":2295,"title":"AssertionError in write_ping (Python 3)","user":{"login":"Nagidal","id":7075397,"avatar_url":"https://avatars0.githubusercontent.com/u/7075397?v=4","gravatar_id":"","url":"https://api.github.com/users/Nagidal","html_url":"https://github.com/Nagidal","followers_url":"https://api.github.com/users/Nagidal/followers","following_url":"https://api.github.com/users/Nagidal/following{/other_user}","gists_url":"https://api.github.com/users/Nagidal/gists{/gist_id}","starred_url":"https://api.github.com/users/Nagidal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nagidal/subscriptions","organizations_url":"https://api.github.com/users/Nagidal/orgs","repos_url":"https://api.github.com/users/Nagidal/repos","events_url":"https://api.github.com/users/Nagidal/events{/privacy}","received_events_url":"https://api.github.com/users/Nagidal/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-03T09:47:46Z","updated_at":"2018-03-12T02:00:51Z","closed_at":"2018-03-12T02:00:51Z","author_association":"NONE","body":"I was trying to run the sample code for the websocket of SeismicPortal ([http://www.seismicportal.eu/realtime.html](http://www.seismicportal.eu/realtime.html)).  The code in question is shown on their webiste. I installed Tornado 4.5.3 in my Python 3.6, but when running SeismicPortal's script, I was periodically getting this error:\r\n\r\n```\r\nINFO:root:trying connection to ws://www.seismicportal.eu/standing_order/websocket\r\nINFO:root:connected, waiting for messages\r\nERROR:tornado.application:Exception in callback functools.partial(<function wrap.<locals>.wrapped at 0x0000000002F7ED90>)\r\nTraceback (most recent call last):\r\n  File \"C:\\Python36\\lib\\site-packages\\tornado\\ioloop.py\", line 605, in _run_callback\r\n    ret = callback()\r\n  File \"C:\\Python36\\lib\\site-packages\\tornado\\stack_context.py\", line 345, in wrapped\r\n    raise_exc_info(exc)\r\n  File \"<string>\", line 4, in raise_exc_info\r\n  File \"C:\\Python36\\lib\\site-packages\\tornado\\stack_context.py\", line 316, in wrapped\r\n    ret = fn(*args, **kwargs)\r\n  File \"example.py\", line 27, in dokeepalive\r\n    self.conn.protocol.write_ping(\"\")\r\n  File \"C:\\Python36\\lib\\site-packages\\tornado\\websocket.py\", line 797, in write_ping\r\n    assert isinstance(data, bytes)\r\nAssertionError\r\n```\r\nI was debugging this for a while until I found [svisser's post](https://github.com/GehirnInc/python-jwt/issues/2#issue-41131541) that `assert isinstance(..., ...)` works different in Python 3.\r\n\r\nSeismicPortal's websocket is sending `String` type, but tornado's function `write_ping` in `websocket.py` needs it as bytes. I made a quick workaround this by converting the data to bytes, adding a line of code just before the assertion:\r\n\r\n```\r\n    def write_ping(self, data):\r\n        \"\"\"Send ping frame.\"\"\"\r\n        # Workaround for Python 3 AssertionError\r\n        # Need to convert String type to bytes\r\n        data = data.encode(encoding=\"utf-8\", errors=\"strict\") \r\n        # End of workaround for Python 3 AssertionError\r\n        assert isinstance(data, bytes)\r\n        self._write_frame(True, 0x9, data)\r\n```\r\n\r\nRunning SeismicPotal's websocket sample code with this hotfix in `websocket.py` produced the desired results, i.e. JSONs with data of current earthquake events (one of which occurs and is sent by the websocket server every few minutes):\r\n\r\n```\r\nINFO:root:trying connection to ws://www.seismicportal.eu/standing_order/websocket \r\nINFO:root:connected, waiting for messages                                         \r\n>> {\"action\":\"update\",\"data\":{                                                    \r\n  \"geometry\": {                                                                   \r\n    \"type\": \"Point\",                                                              \r\n    \"coordinates\": [                                                              \r\n      40.05,                                                                      \r\n      39.95,                                                                      \r\n      -1.0                                                                        \r\n    ]                                                                             \r\n  },                                                                              \r\n  \"type\": \"Feature\",                                                              \r\n  \"id\": \"20180303_0000038\",                                                       \r\n  \"properties\": {                                                                 \r\n    \"lastupdate\": \"2018-03-03T09:18:00.0Z\",                                       \r\n    \"magtype\": \"ml\",                                                              \r\n    \"evtype\": \"ke\",                                                               \r\n    \"lon\": 40.05,                                                                 \r\n    \"auth\": \"EMSC\",                                                               \r\n    \"lat\": 39.95,                                                                 \r\n    \"depth\": 1.0,                                                                 \r\n    \"unid\": \"20180303_0000038\",                                                   \r\n    \"mag\": 4.1,                                                                   \r\n    \"time\": \"2018-03-03T09:05:48.1Z\",                                             \r\n    \"source_id\": \"652117\",                                                        \r\n    \"source_catalog\": \"EMSC-RTS\",                                                 \r\n    \"flynn_region\": \"EASTERN TURKEY\"                                              \r\n  }                                                                               \r\n}}                                                                                \r\n\r\n```\r\n\r\nI am sure that this workaround may only work for my particular example with SeismicPortal's websocket and may make tornado incompatible with other websocket servers or Python 2.x versions.\r\n\r\nPlease implement a proper clean and elegant handling of the differentiation between bytes and string in Python 3. I am looking forward for your update.","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2294","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2294/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2294/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2294/events","html_url":"https://github.com/tornadoweb/tornado/issues/2294","id":300622519,"number":2294,"title":"WSGI adapter introduces unavoidable buffering","user":{"login":"lerks","id":120810,"avatar_url":"https://avatars1.githubusercontent.com/u/120810?v=4","gravatar_id":"","url":"https://api.github.com/users/lerks","html_url":"https://github.com/lerks","followers_url":"https://api.github.com/users/lerks/followers","following_url":"https://api.github.com/users/lerks/following{/other_user}","gists_url":"https://api.github.com/users/lerks/gists{/gist_id}","starred_url":"https://api.github.com/users/lerks/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lerks/subscriptions","organizations_url":"https://api.github.com/users/lerks/orgs","repos_url":"https://api.github.com/users/lerks/repos","events_url":"https://api.github.com/users/lerks/events{/privacy}","received_events_url":"https://api.github.com/users/lerks/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-02-27T13:08:35Z","updated_at":"2018-03-02T21:11:23Z","closed_at":"2018-03-02T21:11:23Z","author_association":"CONTRIBUTOR","body":"We're using Tornado on top of the WSGI server provided by gevent. We've recently realized that, when downloading large files, they would first be fully read from disk to memory and only then be sent on the HTTP connection. Since we're copying them (from the file to the connection) in small chunks and flushing after every write, we were surprised by this. We traced it down to Tornado's `_WSGIConnection` simply adding the chunk to its `_write_buffer` when calling the `write` method, and the whole buffer being only sent at the very end of `WSGIAdapter`'s `__call__` method, all at once. This is quite problematic. Could anyone have a look at this and attempt a fix?","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2291","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2291/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2291/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2291/events","html_url":"https://github.com/tornadoweb/tornado/issues/2291","id":300046703,"number":2291,"title":"The Hello World example does not work","user":{"login":"kzhdev","id":1855243,"avatar_url":"https://avatars3.githubusercontent.com/u/1855243?v=4","gravatar_id":"","url":"https://api.github.com/users/kzhdev","html_url":"https://github.com/kzhdev","followers_url":"https://api.github.com/users/kzhdev/followers","following_url":"https://api.github.com/users/kzhdev/following{/other_user}","gists_url":"https://api.github.com/users/kzhdev/gists{/gist_id}","starred_url":"https://api.github.com/users/kzhdev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kzhdev/subscriptions","organizations_url":"https://api.github.com/users/kzhdev/orgs","repos_url":"https://api.github.com/users/kzhdev/repos","events_url":"https://api.github.com/users/kzhdev/events{/privacy}","received_events_url":"https://api.github.com/users/kzhdev/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-02-25T17:59:14Z","updated_at":"2018-02-26T02:56:30Z","closed_at":"2018-02-26T02:56:30Z","author_association":"NONE","body":"I'm new to tornado. The first thing I tried is the Hello World example, but it gave me an Uncaught Exception. I am using python 3.6.4 and tornado-4.5.3\r\n\r\n```\r\nERROR:tornado.application:Uncaught exception\r\nTraceback (most recent call last):\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/http1connection.py\", line 238, in _read_message\r\n    delegate.finish()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/routing.py\", line 251, in finish\r\n    self.delegate.finish()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 2097, in finish\r\n    self.execute()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 2117, in execute\r\n    **self.handler_kwargs)\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 192, in __init__\r\n    self.initialize(**kwargs)\r\nTypeError: initialize() missing 1 required positional argument: 'url'\r\nERROR:tornado.application:Uncaught exception\r\nTraceback (most recent call last):\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/http1connection.py\", line 238, in _read_message\r\n    delegate.finish()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/routing.py\", line 251, in finish\r\n    self.delegate.finish()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 2097, in finish\r\n    self.execute()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 2117, in execute\r\n    **self.handler_kwargs)\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 192, in __init__\r\n    self.initialize(**kwargs)\r\nTypeError: initialize() missing 1 required positional argument: 'url'\r\nERROR:tornado.application:Uncaught exception\r\nTraceback (most recent call last):\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/http1connection.py\", line 238, in _read_message\r\n    delegate.finish()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/routing.py\", line 251, in finish\r\n    self.delegate.finish()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 2097, in finish\r\n    self.execute()\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 2117, in execute\r\n    **self.handler_kwargs)\r\n  File \"/Users/kzhao/anaconda/envs/learning_fun/lib/python3.6/site-packages/tornado/web.py\", line 192, in __init__\r\n    self.initialize(**kwargs)\r\nTypeError: initialize() missing 1 required positional argument: 'url'\r\n```\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2290","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2290/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2290/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2290/events","html_url":"https://github.com/tornadoweb/tornado/issues/2290","id":299930922,"number":2290,"title":"Knowing response code in streaming_callback","user":{"login":"legnaleurc","id":14612,"avatar_url":"https://avatars0.githubusercontent.com/u/14612?v=4","gravatar_id":"","url":"https://api.github.com/users/legnaleurc","html_url":"https://github.com/legnaleurc","followers_url":"https://api.github.com/users/legnaleurc/followers","following_url":"https://api.github.com/users/legnaleurc/following{/other_user}","gists_url":"https://api.github.com/users/legnaleurc/gists{/gist_id}","starred_url":"https://api.github.com/users/legnaleurc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/legnaleurc/subscriptions","organizations_url":"https://api.github.com/users/legnaleurc/orgs","repos_url":"https://api.github.com/users/legnaleurc/repos","events_url":"https://api.github.com/users/legnaleurc/events{/privacy}","received_events_url":"https://api.github.com/users/legnaleurc/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-02-24T10:25:08Z","updated_at":"2018-02-26T00:25:50Z","closed_at":"2018-02-26T00:25:50Z","author_association":"CONTRIBUTOR","body":"I was using a RESTful API to download a file, so I did this (simplified):\r\n\r\n```python\r\nresponse = await client.fetch(url, streaming_callback=fn_to_write_file)\r\n```\r\n\r\nBut the problem is, even if the response code is not 200, the `streaming_callback` will still be called anyway, no matter `raise_error` is true or not.\r\nFor example, Google Drive API will put error detail as a JSON in the body, so this will cause serious problem when trying to resume downloading. The real content and error message may interleave in the output file.\r\n\r\nProbably #2209 could solve the root cause.","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2289","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2289/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2289/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2289/events","html_url":"https://github.com/tornadoweb/tornado/issues/2289","id":299917466,"number":2289,"title":"AssertionError: Python 2.6+ and OpenSSL required for SSL","user":{"login":"wanghaiqing2015","id":11815186,"avatar_url":"https://avatars1.githubusercontent.com/u/11815186?v=4","gravatar_id":"","url":"https://api.github.com/users/wanghaiqing2015","html_url":"https://github.com/wanghaiqing2015","followers_url":"https://api.github.com/users/wanghaiqing2015/followers","following_url":"https://api.github.com/users/wanghaiqing2015/following{/other_user}","gists_url":"https://api.github.com/users/wanghaiqing2015/gists{/gist_id}","starred_url":"https://api.github.com/users/wanghaiqing2015/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wanghaiqing2015/subscriptions","organizations_url":"https://api.github.com/users/wanghaiqing2015/orgs","repos_url":"https://api.github.com/users/wanghaiqing2015/repos","events_url":"https://api.github.com/users/wanghaiqing2015/events{/privacy}","received_events_url":"https://api.github.com/users/wanghaiqing2015/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-02-24T06:36:47Z","updated_at":"2018-02-24T07:27:18Z","closed_at":"2018-02-24T07:27:18Z","author_association":"NONE","body":"config the application:\r\n        ssl_options={\r\n                   \"certfile\": os.path.join(os.path.abspath(\".\"), \"static/server.crt\"),\r\n                   \"keyfile\": os.path.join(os.path.abspath(\".\"), \"static/server.key\"),\r\n                    },\r\n\r\nreport error, it worked good on python2.7.5 , but failed on python3.6\r\n \r\n    Traceback (most recent call last):\r\n      File \"/opt/python3/lib/python3.6/site-packages/tornado/ioloop.py\", line 888, in start\r\n        handler_func(fd_obj, events)\r\n      File \"/opt/python3/lib/python3.6/site-packages/tornado/stack_context.py\", line 277, in null_wrapper\r\n        return fn(*args, **kwargs)\r\n      File \"/opt/python3/lib/python3.6/site-packages/tornado/netutil.py\", line 277, in accept_handler\r\n        callback(connection, address)\r\n      File \"/opt/python3/lib/python3.6/site-packages/tornado/tcpserver.py\", line 259, in _handle_connection\r\n        assert ssl, \"Python 2.6+ and OpenSSL required for SSL\"\r\n    AssertionError: Python 2.6+ and OpenSSL required for SSL\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2287","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2287/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2287/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2287/events","html_url":"https://github.com/tornadoweb/tornado/issues/2287","id":299590762,"number":2287,"title":"When will support http2 protocol?","user":{"login":"nihao","id":1400426,"avatar_url":"https://avatars1.githubusercontent.com/u/1400426?v=4","gravatar_id":"","url":"https://api.github.com/users/nihao","html_url":"https://github.com/nihao","followers_url":"https://api.github.com/users/nihao/followers","following_url":"https://api.github.com/users/nihao/following{/other_user}","gists_url":"https://api.github.com/users/nihao/gists{/gist_id}","starred_url":"https://api.github.com/users/nihao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nihao/subscriptions","organizations_url":"https://api.github.com/users/nihao/orgs","repos_url":"https://api.github.com/users/nihao/repos","events_url":"https://api.github.com/users/nihao/events{/privacy}","received_events_url":"https://api.github.com/users/nihao/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-02-23T03:52:04Z","updated_at":"2018-02-26T00:14:37Z","closed_at":"2018-02-26T00:14:37Z","author_association":"NONE","body":"Hi,\r\n\r\ntornado is a perfect frame for http1 and websocket, we used it in many our current project.\r\n\r\nnow, we are planing to try http2 in new project, but not found any documents.\r\n\r\nwhen will support http2?\r\n\r\nThanks.","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2286","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2286/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2286/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2286/events","html_url":"https://github.com/tornadoweb/tornado/issues/2286","id":299391591,"number":2286,"title":"Keeping request object for a second","user":{"login":"imirzadeh","id":8312051,"avatar_url":"https://avatars0.githubusercontent.com/u/8312051?v=4","gravatar_id":"","url":"https://api.github.com/users/imirzadeh","html_url":"https://github.com/imirzadeh","followers_url":"https://api.github.com/users/imirzadeh/followers","following_url":"https://api.github.com/users/imirzadeh/following{/other_user}","gists_url":"https://api.github.com/users/imirzadeh/gists{/gist_id}","starred_url":"https://api.github.com/users/imirzadeh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imirzadeh/subscriptions","organizations_url":"https://api.github.com/users/imirzadeh/orgs","repos_url":"https://api.github.com/users/imirzadeh/repos","events_url":"https://api.github.com/users/imirzadeh/events{/privacy}","received_events_url":"https://api.github.com/users/imirzadeh/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-02-22T15:15:35Z","updated_at":"2018-03-24T17:12:02Z","closed_at":"2018-03-24T17:12:02Z","author_association":"NONE","body":"When a new request comes, I put the request object in a hashmap and when the result of external service comes, I call .write() method of that request.\r\nHowever when server loads at start everything is ok but after a while although it prints  \"going to send response\" but nothing goes to the client!\r\nDoes anyone know why?\r\n\r\n\r\n\r\n```\r\ndef post(self):\r\n\t\tself._auto_finish = False\r\n                 key = get_new_key_for_request()\r\n                 global my map\r\n                 my_map[key] =  self\r\n                 ... send request data to external source with key and wait for result\r\n\r\ndef ready(key):\r\n           global my_map\r\n           req = my_map.pop(key)\r\n           print(\"going to send response\")\r\n           req.write(\"OK\")\r\n\r\n```\r\n\r\nOS: Ubuntu 16.04\r\nPython: Python 3.5.2\r\ntornado: 4.5.2","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2285","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2285/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2285/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2285/events","html_url":"https://github.com/tornadoweb/tornado/issues/2285","id":299360621,"number":2285,"title":"exception when calling finish()","user":{"login":"imirzadeh","id":8312051,"avatar_url":"https://avatars0.githubusercontent.com/u/8312051?v=4","gravatar_id":"","url":"https://api.github.com/users/imirzadeh","html_url":"https://github.com/imirzadeh","followers_url":"https://api.github.com/users/imirzadeh/followers","following_url":"https://api.github.com/users/imirzadeh/following{/other_user}","gists_url":"https://api.github.com/users/imirzadeh/gists{/gist_id}","starred_url":"https://api.github.com/users/imirzadeh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imirzadeh/subscriptions","organizations_url":"https://api.github.com/users/imirzadeh/orgs","repos_url":"https://api.github.com/users/imirzadeh/repos","events_url":"https://api.github.com/users/imirzadeh/events{/privacy}","received_events_url":"https://api.github.com/users/imirzadeh/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-02-22T13:49:28Z","updated_at":"2018-03-17T18:39:45Z","closed_at":"2018-03-17T18:39:45Z","author_association":"NONE","body":"Sometimes when I call **finish** method of http response I get this exception, anyone can help?:\r\n\r\n```\r\nFile \"/home/sokhan/nava/src/gateways/http_server/server.py\", line 47, in send_response\r\n    reference.finish()\r\n  File \"/home/sokhan/nava_env/lib/python3.5/site-packages/tornado/web.py\", line 991, in finish\r\n    self.flush(include_footers=True)\r\n  File \"/home/sokhan/nava_env/lib/python3.5/site-packages/tornado/web.py\", line 947, in flush\r\n    start_line, self._headers, chunk, callback=callback)\r\n  File \"/home/sokhan/nava_env/lib/python3.5/site-packages/tornado/http1connection.py\", line 400, in write_headers\r\n    self._pending_write = self.stream.write(data)\r\n  File \"/home/sokhan/nava_env/lib/python3.5/site-packages/tornado/iostream.py\", line 406, in write\r\n    self._handle_write()\r\n  File \"/home/sokhan/nava_env/lib/python3.5/site-packages/tornado/iostream.py\", line 872, in _handle_write\r\n    del self._write_buffer[:self._write_buffer_pos]\r\nTypeError: 'NoneType' object does not support item deletion\r\n\r\n```\r\n\r\nOS: Ubuntu 16.04\r\nPython: Python 3.5.2 \r\ntornado: 4.5.2\r\n","score":1.0},{"url":"https://api.github.com/repos/tornadoweb/tornado/issues/2283","repository_url":"https://api.github.com/repos/tornadoweb/tornado","labels_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2283/labels{/name}","comments_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2283/comments","events_url":"https://api.github.com/repos/tornadoweb/tornado/issues/2283/events","html_url":"https://github.com/tornadoweb/tornado/issues/2283","id":298969715,"number":2283,"title":"Typo in documentation","user":{"login":"BaloneyGeek","id":989234,"avatar_url":"https://avatars1.githubusercontent.com/u/989234?v=4","gravatar_id":"","url":"https://api.github.com/users/BaloneyGeek","html_url":"https://github.com/BaloneyGeek","followers_url":"https://api.github.com/users/BaloneyGeek/followers","following_url":"https://api.github.com/users/BaloneyGeek/following{/other_user}","gists_url":"https://api.github.com/users
3c5
/BaloneyGeek/gists{/gist_id}","starred_url":"https://api.github.com/users/BaloneyGeek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BaloneyGeek/subscriptions","organizations_url":"https://api.github.com/users/BaloneyGeek/orgs","repos_url":"https://api.github.com/users/BaloneyGeek/repos","events_url":"https://api.github.com/users/BaloneyGeek/events{/privacy}","received_events_url":"https://api.github.com/users/BaloneyGeek/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-02-21T13:28:39Z","updated_at":"2018-03-04T00:00:37Z","closed_at":"2018-03-04T00:00:37Z","author_association":"NONE","body":"https://github.com/tornadoweb/tornado/blob/4adf5ec9f55e8de4e75cfa29b50acfcf342f0c2e/tornado/ioloop.py#L247\r\n\r\nShouldn't this line be:\r\n\r\n`clear_instance()` is an alias for `clear_current()`","score":1.0}]}
0

