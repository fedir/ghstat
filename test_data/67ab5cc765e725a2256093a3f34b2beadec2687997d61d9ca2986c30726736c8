HTTP/1.1 200 OK
Transfer-Encoding: chunked
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset
Cache-Control: no-cache
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Sat, 14 Nov 2020 18:06:08 GMT
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Status: 200 OK
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
Vary: Accept, Authorization, Cookie, X-GitHub-OTP
Vary: Accept-Encoding, Accept, X-Requested-With
Vary: Accept-Encoding
X-Accepted-Oauth-Scopes: 
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: CFAD:072E:3B69B81:4484120:5FB01C90
X-Oauth-Scopes: repo
X-Ratelimit-Limit: 30
X-Ratelimit-Remaining: 10
X-Ratelimit-Reset: 1605377196
X-Ratelimit-Used: 20
X-Xss-Protection: 1; mode=block

4bad
{"total_count":6,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/Wardrop/Scorched/issues/34","repository_url":"https://api.github.com/repos/Wardrop/Scorched","labels_url":"https://api.github.com/repos/Wardrop/Scorched/issues/34/labels{/name}","comments_url":"https://api.github.com/repos/Wardrop/Scorched/issues/34/comments","events_url":"https://api.github.com/repos/Wardrop/Scorched/issues/34/events","html_url":"https://github.com/Wardrop/Scorched/issues/34","id":56840577,"node_id":"MDU6SXNzdWU1Njg0MDU3Nw==","number":34,"title":"helpers to the Root url of the controller","user":{"login":"CrowdHailer","id":5862302,"node_id":"MDQ6VXNlcjU4NjIzMDI=","avatar_url":"https://avatars3.githubusercontent.com/u/5862302?v=4","gravatar_id":"","url":"https://api.github.com/users/CrowdHailer","html_url":"https://github.com/CrowdHailer","followers_url":"https://api.github.com/users/CrowdHailer/followers","following_url":"https://api.github.com/users/CrowdHailer/following{/other_user}","gists_url":"https://api.github.com/users/CrowdHailer/gists{/gist_id}","starred_url":"https://api.github.com/users/CrowdHailer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/CrowdHailer/subscriptions","organizations_url":"https://api.github.com/users/CrowdHailer/orgs","repos_url":"https://api.github.com/users/CrowdHailer/repos","events_url":"https://api.github.com/users/CrowdHailer/events{/privacy}","received_events_url":"https://api.github.com/users/CrowdHailer/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-02-06T17:20:13Z","updated_at":"2015-04-06T02:39:04Z","closed_at":"2015-04-06T02:39:04Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I will start this with my example config.ru\n\n``` rb\nrequire 'scorched'\n\nclass SubController < Scorched::Controller\n  get '/' do\n    url # Would expect this to show http://localhost:9292/root\n  end\n\n  get '/branch' do\n    absolute # Similar would expect this to show /root\n  end\n\n  # The reason for this is to make methods for url that work regardless of where the controller is used\n  def branch_path\n    absolute('/branch')\n    # in reality required to know how it is mounted as correct method would need to be\n    # absolute('root/branch')\n  end\nend\n\nclass App < Scorched::Controller\n  controller '/root', SubController\nend\n\nrun App\n```\n\nThis was possibly my misunderstanding when reading the docs. So have been considering each Scorched controller as a nice way to build and compose rack applications. Therefore I would expect the subcontroller to be mounted to app and there be a way to get url helpers within a controller. When reading the docs I thought i had found what I was after.\n\n> absolute - Returns the absolute URL of the web application root, with the optional argument joined to the end. For example, if you're application was mounted under example.com/myapp/: absolute '/about' #=> /myapp/about \n\nIs there away to get a application url just from specifying the controller extension\n\n``` rb\n# Within subcontroller\nrelative_url('branch')\n# => /root/branch\n```\n\nI imagine there might be a use for both but it comes up alot that I have the desire to redirect to the show path after creating a resource so i would use redirect `relative_url(\"#{resource.id}\")` and would like that to work when the controller is mounted within an admin controller within an app controller or just mounted on its own for testing purposes.\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/rubinius/rubinius/issues/3309","repository_url":"https://api.github.com/repos/rubinius/rubinius","labels_url":"https://api.github.com/repos/rubinius/rubinius/issues/3309/labels{/name}","comments_url":"https://api.github.com/repos/rubinius/rubinius/issues/3309/comments","events_url":"https://api.github.com/repos/rubinius/rubinius/issues/3309/events","html_url":"https://github.com/rubinius/rubinius/issues/3309","id":56626402,"node_id":"MDU6SXNzdWU1NjYyNjQwMg==","number":3309,"title":"'scorched' gem fails miserably","user":{"login":"mustmodify","id":32432,"node_id":"MDQ6VXNlcjMyNDMy","avatar_url":"https://avatars3.githubusercontent.com/u/32432?v=4","gravatar_id":"","url":"https://api.github.com/users/mustmodify","html_url":"https://github.com/mustmodify","followers_url":"https://api.github.com/users/mustmodify/followers","following_url":"https://api.github.com/users/mustmodify/following{/other_user}","gists_url":"https://api.github.com/users/mustmodify/gists{/gist_id}","starred_url":"https://api.github.com/users/mustmodify/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mustmodify/subscriptions","organizations_url":"https://api.github.com/users/mustmodify/orgs","repos_url":"https://api.github.com/users/mustmodify/repos","events_url":"https://api.github.com/users/mustmodify/events{/privacy}","received_events_url":"https://api.github.com/users/mustmodify/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-02-05T04:32:50Z","updated_at":"2015-02-05T06:24:19Z","closed_at":"2015-02-05T06:12:36Z","author_association":"NONE","active_lock_reason":null,"body":"https://gist.github.com/mustmodify/ba6a3079517eda3ea049\n\n```\njw@logopolis:/projects/experiments/scorched-spike$ wc -l err.log\n5466 err.log\njw@logopolis:/projects/experiments/scorched-spike$ cat err.log | sort | uniq | wc -l\n70\n```\n\nI hope to try to get an even simpler reproduction tomorrow. But who knows.\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/Wardrop/Scorched/issues/29","repository_url":"https://api.github.com/repos/Wardrop/Scorched","labels_url":"https://api.github.com/repos/Wardrop/Scorched/issues/29/labels{/name}","comments_url":"https://api.github.com/repos/Wardrop/Scorched/issues/29/comments","events_url":"https://api.github.com/repos/Wardrop/Scorched/issues/29/events","html_url":"https://github.com/Wardrop/Scorched/issues/29","id":56346492,"node_id":"MDU6SXNzdWU1NjM0NjQ5Mg==","number":29,"title":"Query. What is the requirement to add middleware as a proc in controllers","user":{"login":"CrowdHailer","id":5862302,"node_id":"MDQ6VXNlcjU4NjIzMDI=","avatar_url":"https://avatars3.githubusercontent.com/u/5862302?v=4","gravatar_id":"","url":"https://api.github.com/users/CrowdHailer","html_url":"https://github.com/CrowdHailer","followers_url":"https://api.github.com/users/CrowdHailer/followers","following_url":"https://api.github.com/users/CrowdHailer/following{/other_user}","gists_url":"https://api.github.com/users/CrowdHailer/gists{/gist_id}","starred_url":"https://api.github.com/users/CrowdHailer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/CrowdHailer/subscriptions","organizations_url":"https://api.github.com/users/CrowdHailer/orgs","repos_url":"https://api.github.com/users/CrowdHailer/repos","events_url":"https://api.github.com/users/CrowdHailer/events{/privacy}","received_events_url":"https://api.github.com/users/CrowdHailer/received_events","type":"User","site_admin":false},"labels":[{"id":11279617,"node_id":"MDU6TGFiZWwxMTI3OTYxNw==","url":"https://api.github.com/repos/Wardrop/Scorched/labels/question","name":"question","color":"cc317c","default":true,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-02-03T08:11:58Z","updated_at":"2015-02-03T10:33:22Z","closed_at":"2015-02-03T10:33:09Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I have a controller that looks like the following.\n\n``` rb\nclass App < Scorched::Controller\n  middleware << proc do\n    use Rack::Session::Cookie, secret: 'blah'\n    use Rack::Csrf, :raise => true\n  end\nend\n```\n\nI was looking into adding code to be able to do the following. \n\n``` rb\nclass App < Scorched::Controller\n    use Rack::Session::Cookie, secret: 'blah'\n    use Rack::Csrf, :raise => true\nend\n```\n\nHowever I was wondering if you had a reason to not do this before I tripped over a problem you had already thought about\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/rack/rack/issues/564","repository_url":"https://api.github.com/repos/rack/rack","labels_url":"https://api.github.com/repos/rack/rack/issues/564/labels{/name}","comments_url":"https://api.github.com/repos/rack/rack/issues/564/comments","events_url":"https://api.github.com/repos/rack/rack/issues/564/events","html_url":"https://github.com/rack/rack/issues/564","id":14651958,"node_id":"MDU6SXNzdWUxNDY1MTk1OA==","number":564,"title":"Infinite recursion issue with BodyProxy","user":{"login":"Wardrop","id":201442,"node_id":"MDQ6VXNlcjIwMTQ0Mg==","avatar_url":"https://avatars1.githubusercontent.com/u/201442?v=4","gravatar_id":"","url":"https://api.github.com/users/Wardrop","html_url":"https://github.com/Wardrop","followers_url":"https://api.github.com/users/Wardrop/followers","following_url":"https://api.github.com/users/Wardrop/following{/other_user}","gists_url":"https://api.github.com/users/Wardrop/gists{/gist_id}","starred_url":"https://api.github.com/users/Wardrop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Wardrop/subscriptions","organizations_url":"https://api.github.com/users/Wardrop/orgs","repos_url":"https://api.github.com/users/Wardrop/repos","events_url":"https://api.github.com/users/Wardrop/events{/privacy}","received_events_url":"https://api.github.com/users/Wardrop/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/rack/rack/milestones/14","html_url":"https://github.com/rack/rack/milestone/14","labels_url":"https://api.github.com/repos/rack/rack/milestones/14/labels","id":249041,"node_id":"MDk6TWlsZXN0b25lMjQ5MDQx","number":14,"title":"Rack 1.6","description":"","creator":{"login":"raggi","id":348,"node_id":"MDQ6VXNlcjM0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/348?v=4","gravatar_id":"","url":"https://api.github.com/users/raggi","html_url":"https://github.com/raggi","followers_url":"https://api.github.com/users/raggi/followers","following_url":"https://api.github.com/users/raggi/following{/other_user}","gists_url":"https://api.github.com/users/raggi/gists{/gist_id}","starred_url":"https://api.github.com/users/raggi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raggi/subscriptions","organizations_url":"https://api.github.com/users/raggi/orgs","repos_url":"https://api.github.com/users/raggi/repos","events_url":"https://api.github.com/users/raggi/events{/privacy}","received_events_url":"https://api.github.com/users/raggi/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":32,"state":"closed","created_at":"2013-01-22T06:46:15Z","updated_at":"2019-11-14T01:15:07Z","due_on":null,"closed_at":"2019-11-14T01:15:07Z"},"comments":6,"created_at":"2013-05-23T00:05:19Z","updated_at":"2014-08-03T17:13:00Z","closed_at":"2014-08-03T17:13:00Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hi,\n\nI've encountered an infinite recursion issue with BodyProxy. The issue is that by having #finish return self wrapped within a BodyProxy object, it allows for infinite recursion. The issue isn't the simplest to explain, so bear with me.\n\nIn my framework, Scorched, controllers can be nested to any arbitrary depth, so ControllerA may call ControllerB which calls ControllerC. There's no concept of a root/parent controller, so ControllerC for example has no idea it was called by ControllerB, hence every controller needs to comply with the Rack spec by accepting an `env` hash, and returning an array of three elements. So for each controller, I return the result of #finish after processing the request as to return the appropriate three element array.\n\nThe parent controller, like the sub controller, doesn't know it's called another controller. It just knows it's called a rack compliant object, which is all it needs to know. The parent controller takes the response, and merges it with it's own response object. In my framework, this response object is shared between controllers (it's stored in the `env` hash), so what happens is that when I assign the body object returned by a sub-controller to the response object of the parent controller, the body of my response object now contains a BodyProxy object that refers back to the response object, hence I get an infinite loop resulting in a stack overflow.\n\nI can work around the issue by inspecting the body object that BodyProxy contains (checking if it's equal to self or not), but now my framework needs to be concerned with implementation details of Rack that may change in the future. Something else I can do to work-around the issue is to, instead of assigning the returned body object directly to the response object of the parent, I can iterate over the returned body object by calling #each, and assigning each value to a new array which I then assign as the body of the parent response object.\n\nSadly, I'm not sure what the best solution for this is. The whole problem only exists because #finish wraps self within a BodyProxy object. If BodyProxy only wrapped the body of the response object, and not the whole response object, you would avoid the issue.\n\nI find it hard to recommend a solution because I'm not exactly sure what function BodyProxy serves or what problem it solves. I can only suspect that perhaps there's a better way that avoids creating the potential for infinite recursion. Could having BodyProxy wrap the actual response body rather than the response object be possible?\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/Wardrop/Scorched/issues/27","repository_url":"https://api.github.com/repos/Wardrop/Scorched","labels_url":"https://api.github.com/repos/Wardrop/Scorched/issues/27/labels{/name}","comments_url":"https://api.github.com/repos/Wardrop/Scorched/issues/27/comments","events_url":"https://api.github.com/repos/Wardrop/Scorched/issues/27/events","html_url":"https://github.com/Wardrop/Scorched/issues/27","id":25419066,"node_id":"MDU6SXNzdWUyNTQxOTA2Ng==","number":27,"title":"Benchmarks results for Hello World","user":{"login":"scalp42","id":1475276,"node_id":"MDQ6VXNlcjE0NzUyNzY=","avatar_url":"https://avatars1.githubusercontent.com/u/1475276?v=4","gravatar_id":"","url":"https://api.github.com/users/scalp42","html_url":"https://github.com/scalp42","followers_url":"https://api.github.com/users/scalp42/followers","following_url":"https://api.github.com/users/scalp42/following{/other_user}","gists_url":"https://api.github.com/users/scalp42/gists{/gist_id}","starred_url":"https://api.github.com/users/scalp42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scalp42/subscriptions","organizations_url":"https://api.github.com/users/scalp42/orgs","repos_url":"https://api.github.com/users/scalp42/repos","events_url":"https://api.github.com/users/scalp42/events{/privacy}","received_events_url":"https://api.github.com/users/scalp42/received_events","type":"User","site_admin":false},"labels":[{"id":11279617,"node_id":"MDU6TGFiZWwxMTI3OTYxNw==","url":"https://api.github.com/repos/Wardrop/Scorched/labels/question","name":"question","color":"cc317c","default":true,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2014-01-10T20:07:06Z","updated_at":"2014-01-13T23:36:18Z","closed_at":"2014-01-11T20:48:41Z","author_association":"NONE","active_lock_reason":null,"body":"Hi @Wardrop \n\nThanks for Scorched in the first place and have been using it for a project.\n\nDo you happen to have any comments regarding the benchmark made by [luislavena](https://github.com/luislavena/bench-micro) and why it performed slower than the other ones based on Rack as well?\n\nGenuinely interested in your opinion and what do you think about it.\n\nThanks in advance!\n","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/Wardrop/Scorched/issues/4","repository_url":"https://api.github.com/repos/Wardrop/Scorched","labels_url":"https://api.github.com/repos/Wardrop/Scorched/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/Wardrop/Scorched/issues/4/comments","events_url":"https://api.github.com/repos/Wardrop/Scorched/issues/4/events","html_url":"https://github.com/Wardrop/Scorched/issues/4","id":12521479,"node_id":"MDU6SXNzdWUxMjUyMTQ3OQ==","number":4,"title":"Examples of sub-controllers with configuration applied along the way","user":{"login":"josevalim","id":9582,"node_id":"MDQ6VXNlcjk1ODI=","avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":11279617,"node_id":"MDU6TGFiZWwxMTI3OTYxNw==","url":"https://api.github.com/repos/Wardrop/Scorched/labels/question","name":"question","color":"cc317c","default":true,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2013-03-27T16:52:14Z","updated_at":"2013-03-28T04:31:14Z","closed_at":"2013-03-28T01:53:28Z","author_association":"NONE","active_lock_reason":null,"body":"I am opening this as an issue (even though it is not an issue) because I didn't see any links to a (possible) mailing list. That said, my question is about this line on the README:\n\n> Scorched supports sub-controllers to any arbitrary depth, with each controllers configuration, filters, route conditions, etc, applied along the way.\n\nDo you have examples of how this would work? I am asking because this is similar to the approach I have tried on [Dynamo](http://github.com/elixir-lang/dynamo) but while building an application, it felt clunk. As the application grows, it gets harder for you to know where the request has passed through and it doesn't compose as well. For example, in a single router (controller), you have routes that require authentication and some that does not, and declaring those in a routing-style controller is often too verbose and repetitive.\n\nIf you have examples, snippets from real applications, it would be even better (I can provide some too)! In any case, great job!\n","performed_via_github_app":null,"score":1.0}]}
0

